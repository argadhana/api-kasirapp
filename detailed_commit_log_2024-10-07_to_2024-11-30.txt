Detailed Commit Log (From 2024-10-07 to 2024-11-30)
====================================================
----------------------------------------------------
Commit: 098a635
Author: argadhana
Date: 2024-11-29
Message: add purchasePrice in stock entity
Changes:
commit 098a6358937ea5795a9f014a665098629f722505
Author: argadhana <yoshspecta333@gmail.com>
Date:   Fri Nov 29 16:12:45 2024 +0700

    add purchasePrice in stock entity

 handler/stock.go       | 22 ++++++++++++++++++++++
 input/stock.go         | 13 +++++++------
 main.go                | 11 +++++++----
 models/stock_entity.go |  1 +
 service/stock.go       |  2 ++
 5 files changed, 39 insertions(+), 10 deletions(-)

Full Diff:
commit 098a6358937ea5795a9f014a665098629f722505
Author: argadhana <yoshspecta333@gmail.com>
Date:   Fri Nov 29 16:12:45 2024 +0700

    add purchasePrice in stock entity

diff --git a/handler/stock.go b/handler/stock.go
index 771766f..12bb53f 100644
--- a/handler/stock.go
+++ b/handler/stock.go
@@ -196,3 +196,25 @@ func (h *StockHandler) UpdateStock(c *gin.Context) {
 	response := helper.APIResponse("Stock successfully updated", http.StatusOK, "success", formattedStock)
 	c.JSON(http.StatusOK, response)
 }
+
+func (h *StockHandler) GetStocksByStockID(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid stock ID", http.StatusBadRequest, "error", gin.H{"errors": "Invalid ID format"})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	stock, err := h.stockService.GetStockByID(id)
+	if err != nil {
+		response := helper.APIResponse("Stock not found", http.StatusNotFound, "error", gin.H{"errors": err.Error()})
+		c.JSON(http.StatusNotFound, response)
+		return
+	}
+
+	formattedStock := formatter.FormatStockResponse(stock)
+	response := helper.APIResponse("Stock retrieved successfully", http.StatusOK, "success", formattedStock)
+	c.JSON(http.StatusOK, response)
+
+}
diff --git a/input/stock.go b/input/stock.go
index c68672c..22f08c2 100644
--- a/input/stock.go
+++ b/input/stock.go
@@ -3,10 +3,11 @@ package input
 import "time"
 
 type CreateStockInput struct {
-	ProductID    int       `json:"product_id"`
-	Quantity     int       `json:"quantity"`
-	BasePrice    float64   `json:"base_price"`
-	SellingPrice float64   `json:"selling_price"`
-	Date         time.Time `json:"date"`
-	Description  string    `json:"description"`
+	ProductID    int     `json:"product_id"`
+	Quantity     int     `json:"quantity"`
+	BasePrice    float64 `json:"base_price"`
+	SellingPrice float64 `json:"selling_price"`
+	PurchasePrice float64 `json:"purchase_price"`
+	Date        time.Time `json:"date"`
+	Description string    `json:"description"`
 }
diff --git a/main.go b/main.go
index d61777f..3094f45 100644
--- a/main.go
+++ b/main.go
@@ -78,7 +78,7 @@ func main() {
 	api := router.Group("/api/v1")
 	api.POST("/users", userHandler.RegisterUser)
 	api.POST("/sessions", userHandler.Login)
-	api.POST("/email_checkers", userHandler.CheckEmailAvailability)
+	api.POST("/email-checkers", userHandler.CheckEmailAvailability)
 	api.POST("/categories", categoryHandler.CreateCategory)
 	api.POST("/products", productHandler.CreateProduct)
 	api.POST("/customers", customerHandler.CreateCustomer)
@@ -98,7 +98,7 @@ func main() {
 	api.GET("/discounts", discountHandler.GetDiscounts)
 	api.GET("/discounts/:id", discountHandler.GetDiscountById)
 	api.GET("/category-products/:id", categoryHandler.GetCategoryProducts)
-	api.GET("/category-name/:category_name", categoryHandler.GetProductsByCategoryName)
+	api.GET("/category-name/:category-name", categoryHandler.GetProductsByCategoryName)
 
 	api.PUT("/categories/:id", categoryHandler.UpdateCategory)
 	api.PUT("/products/:id", productHandler.UpdateProduct)
@@ -115,7 +115,7 @@ func main() {
 	api.DELETE("/stocks/:id", stockHandler.DeleteStock)
 
 	api.POST("/stocks", stockHandler.AddStock)
-	api.GET("/stocks/:id", stockHandler.GetStocks)
+	api.GET("/stocks/:id", stockHandler.GetStocksByStockID)
 	api.GET("/stocks", stockHandler.GetStocks)
 	api.GET("/stock-product/:productID", stockHandler.GetStocksByProductID)
 
@@ -128,7 +128,10 @@ func main() {
 	api.GET("/export/suppliers", supplierHandler.ExportSuppliers)
 	api.POST("/import/suppliers", supplierHandler.ImportSuppliers)
 
-	router.Run()
+	err = router.Run()
+	if err != nil {
+		log.Fatal(err.Error())
+	}
 }
 
 func loadEnv() {
diff --git a/models/stock_entity.go b/models/stock_entity.go
index 8443457..b90e313 100644
--- a/models/stock_entity.go
+++ b/models/stock_entity.go
@@ -9,6 +9,7 @@ type Stock struct {
 	Quantity     int       `json:"quantity"`
 	BasePrice    float64   `json:"base_price"`
 	SellingPrice float64   `json:"selling_price"`
+	PurchasePrice float64 `json:"purchase_price"`
 	Date         time.Time `json:"date"`
 	Description  string    `json:"description"`
 }
diff --git a/service/stock.go b/service/stock.go
index 375bdf6..e74447c 100644
--- a/service/stock.go
+++ b/service/stock.go
@@ -36,6 +36,7 @@ func (s *stockService) AddStock(input input.CreateStockInput) (models.Stock, err
 		Quantity:     input.Quantity,
 		BasePrice:    input.BasePrice,
 		SellingPrice: input.SellingPrice,
+		PurchasePrice: input.PurchasePrice,
 		Date:         input.Date,
 		Description:  input.Description,
 	}
@@ -126,6 +127,7 @@ func (s *stockService) UpdateStockByID(id int, input input.CreateStockInput) (mo
 		Quantity:     input.Quantity,
 		BasePrice:    input.BasePrice,
 		SellingPrice: input.SellingPrice,
+		PurchasePrice: input.PurchasePrice,
 		Date:         input.Date,
 		Description:  input.Description,
 	}
----------------------------------------------------


----------------------------------------------------
Commit: 7f323b1
Author: argadhana
Date: 2024-11-28
Message: get all stock with pagination
Changes:
commit 7f323b13cae1cc679153fc708f42e8b9bc5686c9
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 28 23:33:15 2024 +0700

    get all stock with pagination

 main.go | 1 +
 1 file changed, 1 insertion(+)

Full Diff:
commit 7f323b13cae1cc679153fc708f42e8b9bc5686c9
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 28 23:33:15 2024 +0700

    get all stock with pagination

diff --git a/main.go b/main.go
index b909313..d61777f 100644
--- a/main.go
+++ b/main.go
@@ -116,6 +116,7 @@ func main() {
 
 	api.POST("/stocks", stockHandler.AddStock)
 	api.GET("/stocks/:id", stockHandler.GetStocks)
+	api.GET("/stocks", stockHandler.GetStocks)
 	api.GET("/stock-product/:productID", stockHandler.GetStocksByProductID)
 
 	api.GET("/export/products", productHandler.ExportProducts)
----------------------------------------------------


----------------------------------------------------
Commit: f1bf58f
Author: argadhana
Date: 2024-11-28
Message: add update stock
Changes:
commit f1bf58f53af1c967eb04a5bd8774a633d3f80d04
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 28 23:23:10 2024 +0700

    add update stock

 handler/stock.go    | 34 ++++++++++++++++++++++++++++++++++
 input/stock.go      | 10 +++++-----
 main.go             |  1 +
 repository/stock.go | 27 +++++++++++++++++++++++++++
 service/stock.go    | 33 +++++++++++++++++++++++++++++++++
 5 files changed, 100 insertions(+), 5 deletions(-)

Full Diff:
commit f1bf58f53af1c967eb04a5bd8774a633d3f80d04
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 28 23:23:10 2024 +0700

    add update stock

diff --git a/handler/stock.go b/handler/stock.go
index 7486afc..771766f 100644
--- a/handler/stock.go
+++ b/handler/stock.go
@@ -162,3 +162,37 @@ func (h *StockHandler) GetStockByID(c *gin.Context) {
 	response := helper.APIResponse("Stock retrieved successfully", http.StatusOK, "success", formattedStock)
 	c.JSON(http.StatusOK, response)
 }
+
+func (h *StockHandler) UpdateStock(c *gin.Context) {
+	// Parse the stock ID from URL parameters
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid stock ID", http.StatusBadRequest, "error", gin.H{"errors": "Invalid ID format"})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	// Bind the JSON payload to the UpdateStockInput struct
+	var input input.CreateStockInput
+	err = c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		response := helper.APIResponse("Failed to update stock", http.StatusUnprocessableEntity, "error", gin.H{"errors": errors})
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	// Call the service to update the stock
+	updatedStock, err := h.stockService.UpdateStockByID(id, input)
+	if err != nil {
+		response := helper.APIResponse("Failed to update stock", http.StatusBadRequest, "error", gin.H{"errors": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	// Format and send the success response
+	formattedStock := formatter.FormatStockResponse(updatedStock)
+	response := helper.APIResponse("Stock successfully updated", http.StatusOK, "success", formattedStock)
+	c.JSON(http.StatusOK, response)
+}
diff --git a/input/stock.go b/input/stock.go
index fb2566d..c68672c 100644
--- a/input/stock.go
+++ b/input/stock.go
@@ -3,10 +3,10 @@ package input
 import "time"
 
 type CreateStockInput struct {
-	ProductID    int       `json:"product_id" binding:"required"`
-	Quantity     int       `json:"quantity" binding:"required"`
-	BasePrice    float64   `json:"base_price" binding:"required"`
-	SellingPrice float64   `json:"selling_price" binding:"required"`
-	Date         time.Time `json:"date" binding:"required"`
+	ProductID    int       `json:"product_id"`
+	Quantity     int       `json:"quantity"`
+	BasePrice    float64   `json:"base_price"`
+	SellingPrice float64   `json:"selling_price"`
+	Date         time.Time `json:"date"`
 	Description  string    `json:"description"`
 }
diff --git a/main.go b/main.go
index a31148b..b909313 100644
--- a/main.go
+++ b/main.go
@@ -105,6 +105,7 @@ func main() {
 	api.PUT("/customers/:id", customerHandler.UpdateCustomer)
 	api.PUT("/suppliers/:id", supplierHandler.UpdateSupplier)
 	api.PUT("/discounts/:id", discountHandler.UpdateDiscount)
+	api.PUT("/stocks/:id", stockHandler.UpdateStock)
 
 	api.DELETE("/categories/:id", categoryHandler.DeleteCategory)
 	api.DELETE("/products/:id", productHandler.DeleteProduct)
diff --git a/repository/stock.go b/repository/stock.go
index 8177c4c..7526a39 100644
--- a/repository/stock.go
+++ b/repository/stock.go
@@ -16,6 +16,7 @@ type StockRepository interface {
 	CountStocks() (int64, error)
 	DeleteByID(id int) error
 	GetByID(id int) (models.Stock, error)
+	UpdateByID(id int, stock models.Stock) (models.Stock, error)
 }
 
 type stockRepository struct {
@@ -90,3 +91,29 @@ func (r *stockRepository) GetByID(id int) (models.Stock, error) {
 
 	return stock, nil
 }
+
+func (r *stockRepository) UpdateByID(id int, stock models.Stock) (models.Stock, error) {
+	// Find the existing stock
+	var existingStock models.Stock
+	err := r.db.First(&existingStock, id).Error
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return existingStock, fmt.Errorf("stock not found")
+		}
+		return existingStock, err
+	}
+
+	// Update the stock
+	err = r.db.Model(&existingStock).Updates(stock).Error
+	if err != nil {
+		return existingStock, err
+	}
+
+	// Preload the associated product
+	err = r.db.Preload("Product").First(&existingStock, id).Error
+	if err != nil {
+		return existingStock, err
+	}
+
+	return existingStock, nil
+}
diff --git a/service/stock.go b/service/stock.go
index 319ba7b..375bdf6 100644
--- a/service/stock.go
+++ b/service/stock.go
@@ -16,6 +16,7 @@ type StockService interface {
 	CountStocks() (int64, error)
 	DeleteStock(id int) error
 	GetStockByID(id int) (models.Stock, error)
+	UpdateStockByID(id int, input input.CreateStockInput) (models.Stock, error)
 }
 
 type stockService struct {
@@ -105,3 +106,35 @@ func (s *stockService) GetStockByID(id int) (models.Stock, error) {
 	}
 	return stock, nil
 }
+
+func (s *stockService) UpdateStockByID(id int, input input.CreateStockInput) (models.Stock, error) {
+	// Validate the stock existence
+	_, err := s.stockrepository.GetByID(id)
+	if err != nil {
+		return models.Stock{}, fmt.Errorf("stock not found")
+	}
+
+	// Validate product existence (optional, based on business rules)
+	_, err = s.productRepository.FindByID(input.ProductID)
+	if err != nil {
+		return models.Stock{}, fmt.Errorf("product not found")
+	}
+
+	// Prepare updated stock data
+	updatedStock := models.Stock{
+		ProductID:    input.ProductID,
+		Quantity:     input.Quantity,
+		BasePrice:    input.BasePrice,
+		SellingPrice: input.SellingPrice,
+		Date:         input.Date,
+		Description:  input.Description,
+	}
+
+	// Call repository to update the stock
+	newStock, err := s.stockrepository.UpdateByID(id, updatedStock)
+	if err != nil {
+		return models.Stock{}, fmt.Errorf("failed to update stock: %w", err)
+	}
+
+	return newStock, nil
+}
----------------------------------------------------


----------------------------------------------------
Commit: 6f60487
Author: argadhana
Date: 2024-11-28
Message: get stock by stock id + delete stock
Changes:
commit 6f604870f207f0f7c02fc1ae7970b779bdc39b99
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 28 02:20:39 2024 +0700

    get stock by stock id + delete stock

 handler/stock.go    | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 main.go             |  5 +++--
 repository/stock.go | 27 +++++++++++++++++++++++++++
 service/stock.go    | 26 ++++++++++++++++++++++++++
 4 files changed, 103 insertions(+), 2 deletions(-)

Full Diff:
commit 6f604870f207f0f7c02fc1ae7970b779bdc39b99
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 28 02:20:39 2024 +0700

    get stock by stock id + delete stock

diff --git a/handler/stock.go b/handler/stock.go
index 7fd777a..7486afc 100644
--- a/handler/stock.go
+++ b/handler/stock.go
@@ -115,3 +115,50 @@ func (h *StockHandler) GetStocksByProductID(c *gin.Context) {
 
 	c.JSON(http.StatusOK, gin.H{"data": stocks})
 }
+
+func (h *StockHandler) DeleteStock(c *gin.Context) {
+	// Get the ID from the URL parameter
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid stock ID", http.StatusBadRequest, "error", gin.H{"errors": "Invalid ID format"})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	// Call the service to delete the stock
+	err = h.stockService.DeleteStock(id)
+	if err != nil {
+		response := helper.APIResponse("Failed to delete stock", http.StatusNotFound, "error", gin.H{"errors": err.Error()})
+		c.JSON(http.StatusNotFound, response)
+		return
+	}
+
+	// Return a success response
+	response := helper.APIResponse("Stock successfully deleted", http.StatusOK, "success", nil)
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *StockHandler) GetStockByID(c *gin.Context) {
+	// Get the ID from the URL parameter
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid stock ID", http.StatusBadRequest, "error", gin.H{"errors": "Invalid ID format"})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	// Call the service to get the stock
+	stock, err := h.stockService.GetStockByID(id)
+	if err != nil {
+		response := helper.APIResponse("Stock not found", http.StatusNotFound, "error", gin.H{"errors": err.Error()})
+		c.JSON(http.StatusNotFound, response)
+		return
+	}
+
+	// Format the response
+	formattedStock := formatter.FormatStockResponse(stock)
+	response := helper.APIResponse("Stock retrieved successfully", http.StatusOK, "success", formattedStock)
+	c.JSON(http.StatusOK, response)
+}
diff --git a/main.go b/main.go
index 05cbf86..a31148b 100644
--- a/main.go
+++ b/main.go
@@ -111,10 +111,11 @@ func main() {
 	api.DELETE("/customers/:id", customerHandler.DeleteCustomer)
 	api.DELETE("/suppliers/:id", supplierHandler.DeleteSupplier)
 	api.DELETE("/discounts/:id", discountHandler.DeleteDiscount)
+	api.DELETE("/stocks/:id", stockHandler.DeleteStock)
 
 	api.POST("/stocks", stockHandler.AddStock)
-	api.GET("/stocks", stockHandler.GetStocks)
-	api.GET("/stocks/:productID", stockHandler.GetStocksByProductID)
+	api.GET("/stocks/:id", stockHandler.GetStocks)
+	api.GET("/stock-product/:productID", stockHandler.GetStocksByProductID)
 
 	api.GET("/export/products", productHandler.ExportProducts)
 	api.POST("/import/products", productHandler.ImportProducts)
diff --git a/repository/stock.go b/repository/stock.go
index 3346db3..8177c4c 100644
--- a/repository/stock.go
+++ b/repository/stock.go
@@ -3,6 +3,7 @@ package repository
 
 import (
 	"api-kasirapp/models"
+	"errors"
 	"fmt"
 
 	"gorm.io/gorm"
@@ -13,6 +14,8 @@ type StockRepository interface {
 	FindStocks(limit int, offset int) ([]models.Stock, error)
 	GetByProductID(productID int) ([]models.Stock, error)
 	CountStocks() (int64, error)
+	DeleteByID(id int) error
+	GetByID(id int) (models.Stock, error)
 }
 
 type stockRepository struct {
@@ -63,3 +66,27 @@ func (r *stockRepository) CountStocks() (int64, error) {
 	err := r.db.Model(&models.Stock{}).Count(&total).Error
 	return total, err
 }
+
+func (r *stockRepository) DeleteByID(id int) error {
+	err := r.db.Delete(&models.Stock{}, id).Error
+	if err != nil {
+		return err
+	}
+	return nil
+}
+
+func (r *stockRepository) GetByID(id int) (models.Stock, error) {
+	var stock models.Stock
+
+	// Use GORM to find the stock by ID and preload the associated Product
+	err := r.db.Preload("Product").First(&stock, id).Error
+	if err != nil {
+		// Return an error if the stock is not found
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return stock, fmt.Errorf("stock not found")
+		}
+		return stock, err
+	}
+
+	return stock, nil
+}
diff --git a/service/stock.go b/service/stock.go
index 3469e82..319ba7b 100644
--- a/service/stock.go
+++ b/service/stock.go
@@ -14,6 +14,8 @@ type StockService interface {
 	GetStocks(limit int, offset int) ([]models.Stock, error)
 	GetStocksByProductID(productID int) ([]models.Stock, error)
 	CountStocks() (int64, error)
+	DeleteStock(id int) error
+	GetStockByID(id int) (models.Stock, error)
 }
 
 type stockService struct {
@@ -79,3 +81,27 @@ func (s *stockService) GetStocksByProductID(productID int) ([]models.Stock, erro
 func (s *stockService) CountStocks() (int64, error) {
 	return s.stockrepository.CountStocks()
 }
+
+func (s *stockService) DeleteStock(id int) error {
+	// Check if the stock exists
+	stock, err := s.stockrepository.GetByID(id) // Ensure a GetByID method exists
+	if err != nil {
+		return errors.New("stock not found")
+	}
+
+	// Perform the delete operation
+	err = s.stockrepository.DeleteByID(stock.ID)
+	if err != nil {
+		return errors.New("failed to delete stock")
+	}
+
+	return nil
+}
+
+func (s *stockService) GetStockByID(id int) (models.Stock, error) {
+	stock, err := s.stockrepository.GetByID(id)
+	if err != nil {
+		return models.Stock{}, err
+	}
+	return stock, nil
+}
----------------------------------------------------


----------------------------------------------------
Commit: 37c6eed
Author: argadhana
Date: 2024-11-28
Message: preload product when add stock
Changes:
commit 37c6eed090a968c139b90ba0cefb5b1774058185
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 28 01:43:41 2024 +0700

    preload product when add stock

 formatter/stock.go     | 29 ++++++++++++++++++++---------
 handler/stock.go       | 25 +++++++++++++++++++++----
 main.go                |  2 +-
 models/stock_entity.go |  2 +-
 repository/product.go  | 20 ++++++++++----------
 repository/stock.go    | 25 ++++++++++++++++++++++---
 service/stock.go       | 38 +++++++++++++++++++++++++++++---------
 7 files changed, 104 insertions(+), 37 deletions(-)

Full Diff:
commit 37c6eed090a968c139b90ba0cefb5b1774058185
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 28 01:43:41 2024 +0700

    preload product when add stock

diff --git a/formatter/stock.go b/formatter/stock.go
index 818dabd..b678647 100644
--- a/formatter/stock.go
+++ b/formatter/stock.go
@@ -6,21 +6,21 @@ import (
 )
 
 type StockResponse struct {
-	ID           int    `json:"id"`
-	ProductID    int    `json:"product_id"`
-	ProductName  string `json:"product_name"`
-	Quantity     int    `json:"quantity"`
-	BasePrice    string `json:"base_price"`
-	SellingPrice string `json:"selling_price"`
-	Date         string `json:"date"`
-	Description  string `json:"description"`
+	ID           int              `json:"id"`
+	ProductID    int              `json:"product_id"`
+	Product      ProductFormatter `json:"product"`
+	Quantity     int              `json:"quantity"`
+	BasePrice    string           `json:"base_price"`
+	SellingPrice string           `json:"selling_price"`
+	Date         string           `json:"date"`
+	Description  string           `json:"description"`
 }
 
 func FormatStockResponse(stock models.Stock) StockResponse {
 	return StockResponse{
 		ID:           stock.ID,
 		ProductID:    stock.ProductID,
-		ProductName:  stock.Product.Name,
+		Product:      FormatProduct(stock.Product),
 		Quantity:     stock.Quantity,
 		BasePrice:    fmt.Sprintf("%.2f", stock.BasePrice),
 		SellingPrice: fmt.Sprintf("%.2f", stock.SellingPrice),
@@ -28,3 +28,14 @@ func FormatStockResponse(stock models.Stock) StockResponse {
 		Description:  stock.Description,
 	}
 }
+
+func FormatStocks(stocks []models.Stock) []StockResponse {
+	var stocksResponse []StockResponse
+
+	for _, stock := range stocks {
+		formattedStock := FormatStockResponse(stock)
+		stocksResponse = append(stocksResponse, formattedStock)
+	}
+
+	return stocksResponse
+}
diff --git a/handler/stock.go b/handler/stock.go
index b9826ac..7fd777a 100644
--- a/handler/stock.go
+++ b/handler/stock.go
@@ -2,6 +2,7 @@
 package handler
 
 import (
+	"api-kasirapp/formatter"
 	"api-kasirapp/helper"
 	"api-kasirapp/input"
 	"api-kasirapp/service"
@@ -21,19 +22,35 @@ func NewStockHandler(stockService service.StockService) *StockHandler {
 }
 
 func (h *StockHandler) AddStock(c *gin.Context) {
+	// Bind the incoming JSON payload to the CreateStockInput struct
 	var input input.CreateStockInput
-	if err := c.ShouldBindJSON(&input); err != nil {
-		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
+
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		// Format validation errors
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		// Respond with a formatted API response for validation errors
+		response := helper.APIResponse("Add stock failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
 		return
 	}
 
+	// Call the AddStock service
 	newStock, err := h.stockService.AddStock(input)
 	if err != nil {
-		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
+		// Respond with a formatted API response for service errors
+		errorMessage := gin.H{"errors": err.Error()}
+		response := helper.APIResponse("Add stock failed", http.StatusBadRequest, "error", errorMessage)
+		c.JSON(http.StatusBadRequest, response)
 		return
 	}
 
-	c.JSON(http.StatusOK, gin.H{"data": newStock})
+	// Format the response for a successful stock creation
+	formattedStock := formatter.FormatStockResponse(newStock)
+	response := helper.APIResponse("Stock successfully added", http.StatusCreated, "success", formattedStock)
+	c.JSON(http.StatusCreated, response)
 }
 
 func (h *StockHandler) GetStocks(c *gin.Context) {
diff --git a/main.go b/main.go
index e4f25e0..05cbf86 100644
--- a/main.go
+++ b/main.go
@@ -54,7 +54,7 @@ func main() {
 	customersService := service.NewCustomerService(customerRepository)
 	supplierService := service.NewSupplierService(supplierRepository)
 	discountService := service.NewDiscountService(discountRepository)
-	stockService := service.NewStockService(stockRepository)
+	stockService := service.NewStockService(stockRepository, productRepository)
 	transactionService := service.NewOrderService(transactionRepository, productRepository)
 
 	userHandler := handler.NewUserHandler(userService, authService)
diff --git a/models/stock_entity.go b/models/stock_entity.go
index ceacc8f..8443457 100644
--- a/models/stock_entity.go
+++ b/models/stock_entity.go
@@ -5,10 +5,10 @@ import "time"
 type Stock struct {
 	ID           int       `json:"id"`
 	ProductID    int       `json:"product_id"`
+	Product      Product   `json:"product" gorm:"foreignKey:ProductID"`
 	Quantity     int       `json:"quantity"`
 	BasePrice    float64   `json:"base_price"`
 	SellingPrice float64   `json:"selling_price"`
 	Date         time.Time `json:"date"`
 	Description  string    `json:"description"`
-	Product      Product   `json:"product" gorm:"foreignKey:ProductID"`
 }
diff --git a/repository/product.go b/repository/product.go
index d7115e0..7dd9905 100644
--- a/repository/product.go
+++ b/repository/product.go
@@ -17,6 +17,14 @@ type ProductRepository interface {
 	Delete(ID int) (models.Product, error)
 }
 
+type productRepository struct {
+	db *gorm.DB
+}
+
+func NewProductRepository(db *gorm.DB) *productRepository {
+	return &productRepository{db}
+}
+
 func (r *productRepository) FindByCategoryID(categoryID int) ([]models.Product, error) {
 	var products []models.Product
 
@@ -27,14 +35,6 @@ func (r *productRepository) FindByCategoryID(categoryID int) ([]models.Product,
 	return products, nil
 }
 
-type productRepository struct {
-	db *gorm.DB
-}
-
-func NewProductRepository(db *gorm.DB) *productRepository {
-	return &productRepository{db}
-}
-
 func (r *productRepository) Save(product models.Product) (models.Product, error) {
 	var existingProduct models.Product
 
@@ -53,7 +53,8 @@ func (r *productRepository) Save(product models.Product) (models.Product, error)
 
 func (r *productRepository) FindByID(productID int) (models.Product, error) {
 	var product models.Product
-	if err := r.db.First(&product, productID).Error; err != nil {
+	err := r.db.First(&product, "id = ?", productID).Error
+	if err != nil {
 		return product, err
 	}
 	return product, nil
@@ -100,4 +101,3 @@ func (r *productRepository) Delete(ID int) (models.Product, error) {
 
 	return product, nil
 }
-
diff --git a/repository/stock.go b/repository/stock.go
index 18fe55d..3346db3 100644
--- a/repository/stock.go
+++ b/repository/stock.go
@@ -3,6 +3,7 @@ package repository
 
 import (
 	"api-kasirapp/models"
+	"fmt"
 
 	"gorm.io/gorm"
 )
@@ -23,20 +24,38 @@ func NewStockRepository(db *gorm.DB) *stockRepository {
 }
 
 func (r *stockRepository) Create(stock models.Stock) (models.Stock, error) {
+	// Create the stock record
 	err := r.db.Create(&stock).Error
-	return stock, err
+	if err != nil {
+		return stock, err
+	}
+
+	// Preload and debug
+	err = r.db.Preload("Product").First(&stock, stock.ID).Error
+	if err != nil {
+		return stock, err
+	}
+
+	fmt.Printf("Debug: Stock with Product: %+v\n", stock)
+	return stock, nil
 }
 
 func (r *stockRepository) FindStocks(limit int, offset int) ([]models.Stock, error) {
 	var stocks []models.Stock
 	err := r.db.Preload("Product").Limit(limit).Offset(offset).Find(&stocks).Error
-	return stocks, err
+	if err != nil {
+		return nil, err
+	}
+	return stocks, nil
 }
 
 func (r *stockRepository) GetByProductID(productID int) ([]models.Stock, error) {
 	var stocks []models.Stock
 	err := r.db.Where("product_id = ?", productID).Preload("Product").Find(&stocks).Error
-	return stocks, err
+	if err != nil {
+		return nil, err
+	}
+	return stocks, nil
 }
 
 func (r *stockRepository) CountStocks() (int64, error) {
diff --git a/service/stock.go b/service/stock.go
index a27acfb..3469e82 100644
--- a/service/stock.go
+++ b/service/stock.go
@@ -6,6 +6,7 @@ import (
 	"api-kasirapp/models"
 	"api-kasirapp/repository"
 	"errors"
+	"fmt"
 )
 
 type StockService interface {
@@ -16,13 +17,16 @@ type StockService interface {
 }
 
 type stockService struct {
-	repository repository.StockRepository
+	stockrepository   repository.StockRepository
+	productRepository repository.ProductRepository
 }
 
-func NewStockService(repository repository.StockRepository) *stockService {
-	return &stockService{repository}
+func NewStockService(stockRepo repository.StockRepository, productRepo repository.ProductRepository) *stockService {
+	return &stockService{
+		stockrepository:   stockRepo,
+		productRepository: productRepo,
+	}
 }
-
 func (s *stockService) AddStock(input input.CreateStockInput) (models.Stock, error) {
 	stock := models.Stock{
 		ProductID:    input.ProductID,
@@ -33,20 +37,36 @@ func (s *stockService) AddStock(input input.CreateStockInput) (models.Stock, err
 		Description:  input.Description,
 	}
 
-	newStock, err := s.repository.Create(stock)
+	// Fetch the product
+	product, err := s.productRepository.FindByID(input.ProductID)
+	if err != nil {
+		return models.Stock{}, fmt.Errorf("product not found: %w", err)
+	}
+
+	// Update product stock
+	product.Stock += input.Quantity
+	if _, err := s.productRepository.Update(product); err != nil {
+		return models.Stock{}, fmt.Errorf("failed to update product stock: %w", err)
+	}
+
+	// Create the stock record
+	newStock, err := s.stockrepository.Create(stock)
 	if err != nil {
-		return models.Stock{}, err
+		return models.Stock{}, fmt.Errorf("failed to create stock record: %w", err)
 	}
 
+	// Ensure the Product is preloaded
+	newStock.Product = product
+
 	return newStock, nil
 }
 
 func (s *stockService) GetStocks(limit int, offset int) ([]models.Stock, error) {
-	return s.repository.FindStocks(limit, offset)
+	return s.stockrepository.FindStocks(limit, offset)
 }
 
 func (s *stockService) GetStocksByProductID(productID int) ([]models.Stock, error) {
-	stocks, err := s.repository.GetByProductID(productID)
+	stocks, err := s.stockrepository.GetByProductID(productID)
 	if err != nil {
 		return []models.Stock{}, err
 	}
@@ -57,5 +77,5 @@ func (s *stockService) GetStocksByProductID(productID int) ([]models.Stock, erro
 }
 
 func (s *stockService) CountStocks() (int64, error) {
-	return s.repository.CountStocks()
+	return s.stockrepository.CountStocks()
 }
----------------------------------------------------


----------------------------------------------------
Commit: 39110a0
Author: unknown
Date: 2024-11-27
Message: error handling
Changes:
commit 39110a020b3d958ec84db45fd6812fcaeed14331
Author: unknown <yasidalmubarok@gmail.com>
Date:   Wed Nov 27 22:26:55 2024 +0700

    error handling

 handler/product.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

Full Diff:
commit 39110a020b3d958ec84db45fd6812fcaeed14331
Author: unknown <yasidalmubarok@gmail.com>
Date:   Wed Nov 27 22:26:55 2024 +0700

    error handling

diff --git a/handler/product.go b/handler/product.go
index 1fca320..50f399e 100644
--- a/handler/product.go
+++ b/handler/product.go
@@ -41,7 +41,7 @@ func (h *productHandler) CreateProduct(c *gin.Context) {
 			c.JSON(http.StatusConflict, response)
 			return
 		}
-		response := helper.APIResponse("Create product failed", http.StatusBadRequest, "error", nil)
+		response := helper.APIResponse("Create product failed", http.StatusBadRequest, "error", err.Error())
 		c.JSON(http.StatusBadRequest, response)
 		return
 	}
----------------------------------------------------


----------------------------------------------------
Commit: 231b4e3
Author: unknown
Date: 2024-11-27
Message: add pagination in stocks
Changes:
commit 231b4e34dbf7258547fc6c543480d06786774b1a
Author: unknown <yasidalmubarok@gmail.com>
Date:   Wed Nov 27 21:22:41 2024 +0700

    add pagination in stocks

 handler/stock.go    | 47 ++++++++++++++++++++++++++++++++++++++++++++---
 repository/stock.go | 13 ++++++++++---
 service/stock.go    | 10 +++++++---
 3 files changed, 61 insertions(+), 9 deletions(-)

Full Diff:
commit 231b4e34dbf7258547fc6c543480d06786774b1a
Author: unknown <yasidalmubarok@gmail.com>
Date:   Wed Nov 27 21:22:41 2024 +0700

    add pagination in stocks

diff --git a/handler/stock.go b/handler/stock.go
index 52402be..b9826ac 100644
--- a/handler/stock.go
+++ b/handler/stock.go
@@ -2,8 +2,10 @@
 package handler
 
 import (
+	"api-kasirapp/helper"
 	"api-kasirapp/input"
 	"api-kasirapp/service"
+	"math"
 	"net/http"
 	"strconv"
 
@@ -35,13 +37,47 @@ func (h *StockHandler) AddStock(c *gin.Context) {
 }
 
 func (h *StockHandler) GetStocks(c *gin.Context) {
-	stocks, err := h.stockService.GetStocks()
+	limitStr := c.Query("limit")
+	offsetStr := c.Query("offset")
+
+	limit, err := strconv.Atoi(limitStr)
+	if err != nil || limit <= 0 {
+		limit = 5
+	}
+
+	offset, err := strconv.Atoi(offsetStr)
+	if err != nil || offset < 0 {
+		offset = 0
+	}
+
+	stocks, err := h.stockService.GetStocks(limit, offset)
 	if err != nil {
-		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
+		response := helper.APIResponse("Get stocks failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
 		return
 	}
 
-	c.JSON(http.StatusOK, gin.H{"data": stocks})
+	totalCount, err := h.stockService.CountStocks()
+	if err != nil {
+		response := helper.APIResponse("Get stocks failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	totalPages := int(math.Ceil(float64(totalCount) / float64(limit)))
+
+	paginationMeta := gin.H{
+		"total_data":   totalCount,
+		"total_pages":  totalPages,
+		"current_page": offset/limit + 1,
+		"per_page":     limit,
+	}
+
+	response := helper.APIResponse("Success get stocks", http.StatusOK, "success", gin.H{
+		"data":       stocks, // Format if needed using a formatter
+		"pagination": paginationMeta,
+	})
+	c.JSON(http.StatusOK, response)
 }
 
 func (h *StockHandler) GetStocksByProductID(c *gin.Context) {
@@ -49,6 +85,11 @@ func (h *StockHandler) GetStocksByProductID(c *gin.Context) {
 
 	productIDInt, err := strconv.Atoi(productID)
 
+	if err != nil {
+		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
+		return
+	}
+
 	stocks, err := h.stockService.GetStocksByProductID(productIDInt)
 	if err != nil {
 		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
diff --git a/repository/stock.go b/repository/stock.go
index 89ffabf..18fe55d 100644
--- a/repository/stock.go
+++ b/repository/stock.go
@@ -9,8 +9,9 @@ import (
 
 type StockRepository interface {
 	Create(stock models.Stock) (models.Stock, error)
-	GetAll() ([]models.Stock, error)
+	FindStocks(limit int, offset int) ([]models.Stock, error)
 	GetByProductID(productID int) ([]models.Stock, error)
+	CountStocks() (int64, error)
 }
 
 type stockRepository struct {
@@ -26,9 +27,9 @@ func (r *stockRepository) Create(stock models.Stock) (models.Stock, error) {
 	return stock, err
 }
 
-func (r *stockRepository) GetAll() ([]models.Stock, error) {
+func (r *stockRepository) FindStocks(limit int, offset int) ([]models.Stock, error) {
 	var stocks []models.Stock
-	err := r.db.Preload("Product").Find(&stocks).Error
+	err := r.db.Preload("Product").Limit(limit).Offset(offset).Find(&stocks).Error
 	return stocks, err
 }
 
@@ -37,3 +38,9 @@ func (r *stockRepository) GetByProductID(productID int) ([]models.Stock, error)
 	err := r.db.Where("product_id = ?", productID).Preload("Product").Find(&stocks).Error
 	return stocks, err
 }
+
+func (r *stockRepository) CountStocks() (int64, error) {
+	var total int64
+	err := r.db.Model(&models.Stock{}).Count(&total).Error
+	return total, err
+}
diff --git a/service/stock.go b/service/stock.go
index d554c10..a27acfb 100644
--- a/service/stock.go
+++ b/service/stock.go
@@ -10,8 +10,9 @@ import (
 
 type StockService interface {
 	AddStock(input input.CreateStockInput) (models.Stock, error)
-	GetStocks() ([]models.Stock, error)
+	GetStocks(limit int, offset int) ([]models.Stock, error)
 	GetStocksByProductID(productID int) ([]models.Stock, error)
+	CountStocks() (int64, error)
 }
 
 type stockService struct {
@@ -40,8 +41,8 @@ func (s *stockService) AddStock(input input.CreateStockInput) (models.Stock, err
 	return newStock, nil
 }
 
-func (s *stockService) GetStocks() ([]models.Stock, error) {
-	return s.repository.GetAll()
+func (s *stockService) GetStocks(limit int, offset int) ([]models.Stock, error) {
+	return s.repository.FindStocks(limit, offset)
 }
 
 func (s *stockService) GetStocksByProductID(productID int) ([]models.Stock, error) {
@@ -55,3 +56,6 @@ func (s *stockService) GetStocksByProductID(productID int) ([]models.Stock, erro
 	return stocks, nil
 }
 
+func (s *stockService) CountStocks() (int64, error) {
+	return s.repository.CountStocks()
+}
----------------------------------------------------


----------------------------------------------------
Commit: 73ee031
Author: argadhana
Date: 2024-11-26
Message: export import
Changes:
commit 73ee031374905212bba63544133e793f41e02ca2
Author: argadhana <yoshspecta333@gmail.com>
Date:   Tue Nov 26 00:45:47 2024 +0700

    export import

 handler/customer.go |  51 ++++++++++++++++++++++++++
 handler/supplier.go |  45 +++++++++++++++++++++++
 main.go             |   6 +++
 service/customer.go |  98 +++++++++++++++++++++++++++++++++++++++++++++++++
 service/supplier.go | 103 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 303 insertions(+)

Full Diff:
commit 73ee031374905212bba63544133e793f41e02ca2
Author: argadhana <yoshspecta333@gmail.com>
Date:   Tue Nov 26 00:45:47 2024 +0700

    export import

diff --git a/handler/customer.go b/handler/customer.go
index 0a794db..72c9749 100644
--- a/handler/customer.go
+++ b/handler/customer.go
@@ -7,6 +7,7 @@ import (
 	"api-kasirapp/service"
 	"math"
 	"net/http"
+	"os"
 	"strconv"
 
 	"github.com/gin-gonic/gin"
@@ -162,3 +163,53 @@ func (h *customerHandler) DeleteCustomer(c *gin.Context) {
 	response := helper.APIResponse("Success delete customer", http.StatusOK, "success", formatter.FormatCustomer(deleteCustomer))
 	c.JSON(http.StatusOK, response)
 }
+
+func (h *customerHandler) ExportCustomers(c *gin.Context) {
+	// Panggil fungsi service untuk mengekspor data pelanggan ke file Excel
+	file, err := h.customerService.ExportCustomersToXLS()
+	if err != nil {
+		// Jika terjadi error, kirimkan respons HTTP dengan status 500
+		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
+		return
+	}
+
+	// Set header untuk file download
+	c.Header("Content-Disposition", `attachment; filename="customers.xlsx"`)
+	c.Header("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
+
+	// Tulis file Excel langsung ke response writer
+	if err := file.Write(c.Writer); err != nil {
+		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to write Excel file"})
+	}
+}
+
+func (h *customerHandler) ImportCustomers(c *gin.Context) {
+	// Get the uploaded file
+	file, err := c.FormFile("file")
+	if err != nil {
+		response := helper.APIResponse("Failed to process file", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	// Save the file temporarily
+	tempFilePath := "./tmp/" + file.Filename
+	if err := c.SaveUploadedFile(file, tempFilePath); err != nil {
+		response := helper.APIResponse("Failed to save file", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusInternalServerError, response)
+		return
+	}
+	defer os.Remove(tempFilePath) // Clean up the temporary file
+
+	// Import customers from the file
+	customers, err := h.customerService.ImportCustomersFromXLS(tempFilePath)
+	if err != nil {
+		response := helper.APIResponse("Failed to import customers", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusInternalServerError, response)
+		return
+	}
+
+	response := helper.APIResponse("Successfully imported customers", http.StatusOK, "success", customers)
+	c.JSON(http.StatusOK, response)
+}
+
diff --git a/handler/supplier.go b/handler/supplier.go
index d03d154..1b56d57 100644
--- a/handler/supplier.go
+++ b/handler/supplier.go
@@ -6,6 +6,7 @@ import (
 	"api-kasirapp/input"
 	"api-kasirapp/service"
 	"net/http"
+	"os"
 	"strconv"
 
 	"github.com/gin-gonic/gin"
@@ -139,3 +140,47 @@ func (h *supplierHandler) DeleteSupplier(c *gin.Context) {
 	response := helper.APIResponse("Success delete supplier", http.StatusOK, "success", formatter.FormatSupplier(deleteSupplier))
 	c.JSON(http.StatusOK, response)
 }
+
+func (h *supplierHandler) ExportSuppliers(c *gin.Context) {
+	file, err := h.supplierService.ExportSuppliersToXLS()
+	if err != nil {
+		response := helper.APIResponse("Export suppliers failed", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusInternalServerError, response)
+		return
+	}
+
+	c.Header("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
+	c.Header("Content-Disposition", `attachment; filename="suppliers.xlsx"`)
+	c.Header("File-Name", "suppliers.xlsx")
+	file.Write(c.Writer)
+}
+
+func (h *supplierHandler) ImportSuppliers(c *gin.Context) {
+	// Get the uploaded file
+	file, err := c.FormFile("file")
+	if err != nil {
+		response := helper.APIResponse("Failed to get file", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	// Save the file to a temporary location
+	filePath := "./tmp/%s" + file.Filename
+	if err := c.SaveUploadedFile(file, filePath); err != nil {
+		response := helper.APIResponse("Failed to save file", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusInternalServerError, response)
+		return
+	}
+	defer os.Remove(filePath) // Cleanup temporary file
+
+	// Import suppliers from the file
+	importedSuppliers, err := h.supplierService.ImportSuppliersFromXLS(filePath)
+	if err != nil {
+		response := helper.APIResponse("Failed to import suppliers", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusInternalServerError, response)
+		return
+	}
+
+	response := helper.APIResponse("Successfully imported suppliers", http.StatusOK, "success", importedSuppliers)
+	c.JSON(http.StatusOK, response)
+}
diff --git a/main.go b/main.go
index f6a10a0..e4f25e0 100644
--- a/main.go
+++ b/main.go
@@ -119,6 +119,12 @@ func main() {
 	api.GET("/export/products", productHandler.ExportProducts)
 	api.POST("/import/products", productHandler.ImportProducts)
 
+	api.GET("/export/customers", customerHandler.ExportCustomers)
+	api.POST("/import/customers", customerHandler.ImportCustomers)
+
+	api.GET("/export/suppliers", supplierHandler.ExportSuppliers)
+	api.POST("/import/suppliers", supplierHandler.ImportSuppliers)
+
 	router.Run()
 }
 
diff --git a/service/customer.go b/service/customer.go
index 34da8d6..7872abf 100644
--- a/service/customer.go
+++ b/service/customer.go
@@ -6,6 +6,10 @@ import (
 	"api-kasirapp/models"
 	repository2 "api-kasirapp/repository"
 	"errors"
+	"fmt"
+	"github.com/xuri/excelize/v2"
+	"strconv"
+	"time"
 
 	"gorm.io/gorm"
 )
@@ -17,6 +21,8 @@ type CustomerService interface {
 	UpdateCustomer(ID int, input input.CustomerInput) (models.Customer, error)
 	DeleteCustomer(ID int) (models.Customer, error)
 	CountCustomers() (int64, error)
+	ExportCustomersToXLS() (*excelize.File, error)
+	ImportCustomersFromXLS(filePath string) ([]models.Customer, error)
 }
 
 type customerService struct {
@@ -113,3 +119,95 @@ func (s *customerService) CountCustomers() (int64, error) {
 	return s.repository.CountCustomers()
 }
 
+func (s *customerService) ExportCustomersToXLS() (*excelize.File, error) {
+	// Fetch customers from the database
+	customers, err := s.repository.FindCustomers(6, 0)
+	if err != nil {
+		return nil, err
+	}
+
+	fmt.Printf("Number of customers retrieved: %d\n", len(customers))
+
+	if len(customers) == 0 {
+		return nil, errors.New("no customers found to export")
+	}
+
+	// Create a new Excel file
+	f := excelize.NewFile()
+	sheet := "Customers"
+	index, err := f.NewSheet(sheet)
+	if err != nil {
+		return nil, err
+	}
+
+	// Write headers
+	headers := []string{"ID", "Name", "Address", "Phone", "Email", "Created At", "Updated At"}
+	for i, header := range headers {
+		cell := string(rune('A'+i)) + "1"
+		f.SetCellValue(sheet, cell, header)
+	}
+
+	// Write customer data
+	for i, customer := range customers {
+		row := i + 2
+		fmt.Printf("Writing customer %d to row %d\n", customer.ID, row) // Debugging output
+
+		f.SetCellValue(sheet, "A"+strconv.Itoa(row), customer.ID)
+		f.SetCellValue(sheet, "B"+strconv.Itoa(row), customer.Name)
+		f.SetCellValue(sheet, "C"+strconv.Itoa(row), customer.Address)
+		f.SetCellValue(sheet, "D"+strconv.Itoa(row), customer.Phone)
+		f.SetCellValue(sheet, "E"+strconv.Itoa(row), customer.Email)
+		f.SetCellValue(sheet, "F"+strconv.Itoa(row), customer.CreatedAt.Format(time.RFC3339))
+		f.SetCellValue(sheet, "G"+strconv.Itoa(row), customer.UpdatedAt.Format(time.RFC3339))
+	}
+
+	// Set active sheet and delete the default sheet
+	f.SetActiveSheet(index)
+	f.DeleteSheet("Sheet1")
+
+	return f, nil
+}
+
+func (s *customerService) ImportCustomersFromXLS(filePath string) ([]models.Customer, error) {
+	// Open the Excel file
+	f, err := excelize.OpenFile(filePath)
+	if err != nil {
+		return nil, err
+	}
+	defer f.Close()
+
+	// Read data from the first sheet
+	sheet := "Customers"
+	rows, err := f.GetRows(sheet)
+	if err != nil {
+		return nil, err
+	}
+
+	var importedCustomers []models.Customer
+
+	// Skip the header row
+	for i, row := range rows {
+		if i == 0 {
+			continue
+		}
+
+		// Parse each column into customer fields
+		customer := models.Customer{
+			Name:    row[1],
+			Address: row[2],
+			Phone:   row[3],
+			Email:   row[4],
+		}
+
+		// Insert customer into the database
+		savedCustomer, err := s.repository.SaveCustomer(customer)
+		if err != nil {
+			return nil, err
+		}
+
+		// Add the saved customer to the list
+		importedCustomers = append(importedCustomers, savedCustomer)
+	}
+
+	return importedCustomers, nil
+}
diff --git a/service/supplier.go b/service/supplier.go
index 79dd483..8b753bf 100644
--- a/service/supplier.go
+++ b/service/supplier.go
@@ -5,6 +5,10 @@ import (
 	"api-kasirapp/input"
 	"api-kasirapp/models"
 	"api-kasirapp/repository"
+	"errors"
+	"fmt"
+	"github.com/xuri/excelize/v2"
+	"strconv"
 	"time"
 
 	"golang.org/x/exp/rand"
@@ -17,6 +21,8 @@ type SupplierService interface {
 	GetAll(limit int, offset int) ([]models.Supplier, error)
 	Update(ID int, Input input.SupplierInput) (models.Supplier, error)
 	Delete(ID int) (models.Supplier, error)
+	ExportSuppliersToXLS() (*excelize.File, error)
+	ImportSuppliersFromXLS(filePath string) ([]models.Supplier, error)
 }
 
 type supplierService struct {
@@ -107,3 +113,100 @@ func (s *supplierService) Delete(ID int) (models.Supplier, error) {
 	}
 	return deletedSupplier, nil
 }
+
+func (s *supplierService) ExportSuppliersToXLS() (*excelize.File, error) {
+	// Fetch suppliers from the database
+	suppliers, err := s.repository.FindAll(0, 0)
+	if err != nil {
+		return nil, err
+	}
+
+	fmt.Printf("Number of suppliers retrieved: %d\n", len(suppliers))
+
+	if len(suppliers) == 0 {
+		return nil, errors.New("no suppliers found to export")
+	}
+
+	// Create a new Excel file
+	f := excelize.NewFile()
+	sheet := "Suppliers"
+	index, err := f.NewSheet(sheet)
+	if err != nil {
+		return nil, err
+	}
+
+	// Write headers
+	headers := []string{"ID", "Name", "Address", "Email", "Phone", "Code", "Created At", "Updated At"}
+	for i, header := range headers {
+		cell := string(rune('A'+i)) + "1"
+		f.SetCellValue(sheet, cell, header)
+	}
+
+	// Write supplier data
+	for i, supplier := range suppliers {
+		row := i + 2
+		fmt.Printf("Writing supplier %d to row %d\n", supplier.ID, row) // Debugging output
+
+		f.SetCellValue(sheet, "A"+strconv.Itoa(row), supplier.ID)
+		f.SetCellValue(sheet, "B"+strconv.Itoa(row), supplier.Name)
+		f.SetCellValue(sheet, "C"+strconv.Itoa(row), supplier.Address)
+		f.SetCellValue(sheet, "D"+strconv.Itoa(row), supplier.Email)
+		f.SetCellValue(sheet, "E"+strconv.Itoa(row), supplier.Phone)
+		f.SetCellValue(sheet, "F"+strconv.Itoa(row), supplier.Code)
+		f.SetCellValue(sheet, "G"+strconv.Itoa(row), supplier.CreatedAt.Format(time.RFC3339))
+		f.SetCellValue(sheet, "H"+strconv.Itoa(row), supplier.UpdatedAt.Format(time.RFC3339))
+	}
+
+	// Set active sheet and delete the default sheet
+	f.SetActiveSheet(index)
+	f.DeleteSheet("Sheet1")
+
+	return f, nil
+}
+
+func (s *supplierService) ImportSuppliersFromXLS(filePath string) ([]models.Supplier, error) {
+	// Open the Excel file
+	f, err := excelize.OpenFile(filePath)
+	if err != nil {
+		return nil, err
+	}
+	defer f.Close()
+
+	// Read data from the first sheet
+	sheet := "Suppliers"
+	rows, err := f.GetRows(sheet)
+	if err != nil {
+		return nil, err
+	}
+
+	var importedSuppliers []models.Supplier
+
+	// Skip the header row
+	for i, row := range rows {
+		if i == 0 {
+			continue
+		}
+
+		// Parse each column into supplier fields
+		code, _ := strconv.Atoi(row[5])
+
+		supplier := models.Supplier{
+			Name:    row[1],
+			Address: row[2],
+			Email:   row[3],
+			Phone:   row[4],
+			Code:    code,
+		}
+
+		// Insert supplier into the database
+		savedSupplier, err := s.repository.Save(supplier)
+		if err != nil {
+			return nil, err
+		}
+
+		// Add the saved supplier to the list
+		importedSuppliers = append(importedSuppliers, savedSupplier)
+	}
+
+	return importedSuppliers, nil
+}
----------------------------------------------------


----------------------------------------------------
Commit: 01c5d77
Author: argadhana
Date: 2024-11-25
Message: modified pagination
Changes:
commit 01c5d779aa8fe5390a0f025e9f006136b2b0032b
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 25 23:13:58 2024 +0700

    modified pagination

 handler/category.go    | 31 +++++++++++++++++++++++++++++++
 handler/customer.go    | 24 +++++++++++++++++++++++-
 handler/product.go     | 41 +++++++++++++++--------------------------
 main.go                |  2 +-
 repository/category.go | 11 +++++++++++
 repository/customer.go | 11 +++++++++++
 repository/product.go  | 11 -----------
 service/category.go    | 22 ++++++++++++++++++++++
 service/customer.go    |  6 ++++++
 service/product.go     | 14 ++------------
 10 files changed, 122 insertions(+), 51 deletions(-)

Full Diff:
commit 01c5d779aa8fe5390a0f025e9f006136b2b0032b
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 25 23:13:58 2024 +0700

    modified pagination

diff --git a/handler/category.go b/handler/category.go
index 07756cf..d85c227 100644
--- a/handler/category.go
+++ b/handler/category.go
@@ -161,3 +161,34 @@ func (h *categoryHandler) GetCategoryProducts(c *gin.Context) {
 	response := helper.APIResponse("Success get category products", http.StatusOK, "success", formatedProducts)
 	c.JSON(http.StatusOK, response)
 }
+
+func (h *categoryHandler) GetProductsByCategoryName(c *gin.Context) {
+	// Ambil parameter kategori dari request
+	categoryName := c.Param("category_name")
+	if categoryName == "" {
+		response := helper.APIResponse("Category name is required", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	products, err := h.categoryService.GetProductsWithCategoryName(categoryName)
+	if err != nil {
+		response := helper.APIResponse("Get category products failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	// Panggil service
+	category, err := h.categoryService.GetCategoryByName(categoryName)
+	if err != nil {
+		response := helper.APIResponse("Failed to get products by category", http.StatusBadRequest, "error", err.Error())
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	formattedCategory := formatter.FormatCategoryProducts(category, products)
+
+	// Format dan kembalikan response
+	response := helper.APIResponse("Success get products by category", http.StatusOK, "success", formattedCategory)
+	c.JSON(http.StatusOK, response)
+}
diff --git a/handler/customer.go b/handler/customer.go
index 0e73931..0a794db 100644
--- a/handler/customer.go
+++ b/handler/customer.go
@@ -5,6 +5,7 @@ import (
 	"api-kasirapp/helper"
 	"api-kasirapp/input"
 	"api-kasirapp/service"
+	"math"
 	"net/http"
 	"strconv"
 
@@ -62,7 +63,28 @@ func (h *customerHandler) GetCustomers(c *gin.Context) {
 		return
 	}
 
-	response := helper.APIResponse("Success get customers", http.StatusOK, "success", customers)
+	totalCount, err := h.customerService.CountCustomers()
+	if err != nil {
+		response := helper.APIResponse("Get customers failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	totalPages := int(math.Ceil(float64(totalCount) / float64(limit)))
+
+	formattedCustomers := formatter.FormatCustomers(customers)
+
+	paginationMeta := gin.H{
+		"total_data":   totalCount,
+		"total_pages":  totalPages,
+		"current_page": offset/limit + 1,
+		"per_page":     limit,
+	}
+
+	response := helper.APIResponse("Success get customers", http.StatusOK, "success", gin.H{
+		"data":       formattedCustomers,
+		"pagination": paginationMeta,
+	})
 	c.JSON(http.StatusOK, response)
 }
 
diff --git a/handler/product.go b/handler/product.go
index 184d69b..1fca320 100644
--- a/handler/product.go
+++ b/handler/product.go
@@ -62,26 +62,6 @@ func (h *productHandler) GetProducts(c *gin.Context) {
 	c.JSON(http.StatusOK, response)
 }
 
-func (h *productHandler) GetCategoryName(c *gin.Context) {
-	var input input.CategoryInput
-
-	if err := c.ShouldBindJSON(&input); err != nil {
-		response := helper.APIResponse("Invalid request body", http.StatusBadRequest, "error", err.Error())
-		c.JSON(http.StatusBadRequest, response)
-		return
-	}
-
-	category, err := h.productService.FindCategoryName(input)
-	if err != nil {
-		response := helper.APIResponse("Get category name failed", http.StatusBadRequest, "error", err.Error())
-		c.JSON(http.StatusBadRequest, response)
-		return
-	}
-
-	response := helper.APIResponse("Success get category name", http.StatusOK, "success", formatter.FormatCategory(category))
-	c.JSON(http.StatusOK, response)
-}
-
 func (h *productHandler) GetProductById(c *gin.Context) {
 	idParam := c.Param("id")
 	id, err := strconv.Atoi(idParam)
@@ -198,7 +178,6 @@ func (h *productHandler) ImportProducts(c *gin.Context) {
 	response := helper.APIResponse("Success import products", http.StatusOK, "success", gin.H{"products": importedProducts})
 	c.JSON(http.StatusOK, response)
 }
-
 func (h *productHandler) UploadProductImage(c *gin.Context) {
 	idParam := c.Param("id")
 	id, err := strconv.Atoi(idParam)
@@ -216,9 +195,12 @@ func (h *productHandler) UploadProductImage(c *gin.Context) {
 		return
 	}
 
+	// Define the target directory
+	imageDir := "/var/www/images-product"
+
 	// Ensure the directory exists
-	if _, err := os.Stat("./images-product"); os.IsNotExist(err) {
-		if err := os.Mkdir("./images-product", os.ModePerm); err != nil {
+	if _, err := os.Stat(imageDir); os.IsNotExist(err) {
+		if err := os.MkdirAll(imageDir, os.ModePerm); err != nil {
 			response := helper.APIResponse("Failed to create image directory", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
 			c.JSON(http.StatusInternalServerError, response)
 			return
@@ -226,21 +208,28 @@ func (h *productHandler) UploadProductImage(c *gin.Context) {
 	}
 
 	// Save the file to the directory
-	filePath := fmt.Sprintf("./images-product/%s", file.Filename)
+	filePath := fmt.Sprintf("%s/%s", imageDir, file.Filename)
 	if err := c.SaveUploadedFile(file, filePath); err != nil {
 		response := helper.APIResponse("Upload image failed", http.StatusInternalServerError, "error", gin.H{"message": "failed to save file"})
 		c.JSON(http.StatusInternalServerError, response)
 		return
 	}
 
+	// Generate the public image URL
+	publicURL := fmt.Sprintf("/images/%s", file.Filename)
+
 	// Call the service to update the product with the image URL
-	updatedProduct, err := h.productService.SaveProductImage(id, filePath)
+	updatedProduct, err := h.productService.SaveProductImage(id, publicURL)
 	if err != nil {
 		response := helper.APIResponse("Upload image failed", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
 		c.JSON(http.StatusInternalServerError, response)
 		return
 	}
 
-	response := helper.APIResponse("Success upload image", http.StatusOK, "success", formatter.FormatProduct(updatedProduct))
+	// Respond with the public image URL
+	response := helper.APIResponse("Success upload image", http.StatusOK, "success", gin.H{
+		"image_url": publicURL,
+		"product":   formatter.FormatProduct(updatedProduct),
+	})
 	c.JSON(http.StatusOK, response)
 }
diff --git a/main.go b/main.go
index 1597393..f6a10a0 100644
--- a/main.go
+++ b/main.go
@@ -98,7 +98,7 @@ func main() {
 	api.GET("/discounts", discountHandler.GetDiscounts)
 	api.GET("/discounts/:id", discountHandler.GetDiscountById)
 	api.GET("/category-products/:id", categoryHandler.GetCategoryProducts)
-	api.GET("/category-name", productHandler.GetCategoryName)
+	api.GET("/category-name/:category_name", categoryHandler.GetProductsByCategoryName)
 
 	api.PUT("/categories/:id", categoryHandler.UpdateCategory)
 	api.PUT("/products/:id", productHandler.UpdateProduct)
diff --git a/repository/category.go b/repository/category.go
index 592ccb3..cbfba51 100644
--- a/repository/category.go
+++ b/repository/category.go
@@ -13,6 +13,7 @@ type CategoryRepository interface {
 	UpdateCategory(category models.Category) (models.Category, error)
 	DeleteCategory(ID int) (models.Category, error)
 	FindCategoryProducts(ID int) ([]models.Product, error)
+	FindProductsWithCategoryName(categoryName string) ([]models.Product, error)
 }
 
 type categoryRepository struct {
@@ -93,3 +94,13 @@ func (r *categoryRepository) DeleteCategory(ID int) (models.Category, error) {
 	}
 	return category, nil
 }
+
+func (r *categoryRepository) FindProductsWithCategoryName(categoryName string) ([]models.Product, error) {
+	var category []models.Product
+
+	err := r.db.Preload("Product").Where("name = ?", categoryName).First(&category).Error
+	if err != nil {
+		return category, err
+	}
+	return category, nil
+}
\ No newline at end of file
diff --git a/repository/customer.go b/repository/customer.go
index 5ce22a7..f46bd1c 100644
--- a/repository/customer.go
+++ b/repository/customer.go
@@ -13,6 +13,7 @@ type CustomerRepository interface {
 	FindCustomerByID(ID int) (models.Customer, error)
 	UpdateCustomer(customer models.Customer) (models.Customer, error)
 	DeleteCustomer(ID int) (models.Customer, error)
+	CountCustomers() (int64, error)
 }
 
 type customerRepository struct {
@@ -78,3 +79,13 @@ func (r *customerRepository) DeleteCustomer(ID int) (models.Customer, error) {
 
 	return customer, nil
 }
+
+func (r *customerRepository) CountCustomers() (int64, error) {
+	var count int64
+	err := r.db.Model(&models.Customer{}).Count(&count).Error
+	if err != nil {
+		return 0, err
+	}
+	return count, nil
+}
+
diff --git a/repository/product.go b/repository/product.go
index f562da1..d7115e0 100644
--- a/repository/product.go
+++ b/repository/product.go
@@ -12,7 +12,6 @@ type ProductRepository interface {
 	FindByID(ID int) (models.Product, error)
 	FindByName(name string) (models.Product, error)
 	FindAll() ([]models.Product, error)
-	FindCategoryName(categoryName string) (models.Category, error)
 	FindByCategoryID(categoryID int) ([]models.Product, error)
 	Update(product models.Product) (models.Product, error)
 	Delete(ID int) (models.Product, error)
@@ -102,13 +101,3 @@ func (r *productRepository) Delete(ID int) (models.Product, error) {
 	return product, nil
 }
 
-func (r *productRepository) FindCategoryName(categoryName string) (models.Category, error) {
-	var category models.Category
-	err := r.db.Where("name ILIKE ?", categoryName).Find(&category).Error
-	if err != nil {
-		if errors.Is(err, gorm.ErrRecordNotFound) {
-			return category, errors.New("category not found")
-		}
-	}
-	return category, nil
-}
diff --git a/service/category.go b/service/category.go
index 8141fbe..77cee10 100644
--- a/service/category.go
+++ b/service/category.go
@@ -16,6 +16,8 @@ type CategoryService interface {
 	UpdateCategory(ID int, input input.CategoryInput) (models.Category, error)
 	DeleteCategory(ID int) (models.Category, error)
 	GetCategoryProducts(ID int) ([]models.Product, error)
+	GetProductsWithCategoryName(categoryName string) ([]models.Product, error)
+	GetCategoryByName(name string) (models.Category, error)
 }
 
 type categoryService struct {
@@ -34,6 +36,16 @@ func (s *categoryService)GetCategoryProducts(ID int) ([]models.Product, error){
 
 	return products, nil
 }
+
+func (s *categoryService)GetProductsWithCategoryName(categoryName string) ([]models.Product, error){
+	products, err := s.repository.FindProductsWithCategoryName(categoryName)
+	if err != nil {
+		return products, err
+	}
+
+	return products, nil
+}
+
 func (s *categoryService) SaveCategory(input input.CategoryInput) (models.Category, error) {
 	category := models.Category{}
 
@@ -70,6 +82,16 @@ func (s *categoryService) FindCategories() ([]models.Category, error) {
 	return categories, nil
 }
 
+func (s *categoryService) GetCategoryByName(name string) (models.Category, error) {
+	category, err := s.repository.FindCategoryByName(name)
+	if err != nil {
+		return category, err
+	}
+
+	return category, nil
+
+}
+
 func (s *categoryService) UpdateCategory(ID int, input input.CategoryInput) (models.Category, error) {
 	category, err := s.repository.FindCategoryByID(ID)
 	if err != nil {
diff --git a/service/customer.go b/service/customer.go
index be75fcc..34da8d6 100644
--- a/service/customer.go
+++ b/service/customer.go
@@ -16,6 +16,7 @@ type CustomerService interface {
 	GetCustomerByID(ID int) (models.Customer, error)
 	UpdateCustomer(ID int, input input.CustomerInput) (models.Customer, error)
 	DeleteCustomer(ID int) (models.Customer, error)
+	CountCustomers() (int64, error)
 }
 
 type customerService struct {
@@ -107,3 +108,8 @@ func (s *customerService) DeleteCustomer(ID int) (models.Customer, error) {
 
 	return deletedCustomer, nil
 }
+
+func (s *customerService) CountCustomers() (int64, error) {
+	return s.repository.CountCustomers()
+}
+
diff --git a/service/product.go b/service/product.go
index 0e9ab1f..191ad9f 100644
--- a/service/product.go
+++ b/service/product.go
@@ -16,7 +16,6 @@ type ProductService interface {
 	FindProductByID(ID int) (models.Product, error)
 	FindByName(name string) (models.Product, error)
 	FindAll() ([]models.Product, error)
-	FindCategoryName(categoryName input.CategoryInput) (models.Category, error)
 	UpdateProduct(ID int, input input.ProductInput) (models.Product, error)
 	DeleteProduct(ID int) (models.Product, error)
 	ExportProductsToXLS() (*excelize.File, error)
@@ -25,8 +24,8 @@ type ProductService interface {
 }
 
 type productService struct {
-	productRepository repository.ProductRepository
-	catgoryRepository repository.CategoryRepository
+	productRepository  repository.ProductRepository
+	categoryRepository repository.CategoryRepository
 }
 
 func NewProductService(productRepository repository.ProductRepository, categoryRepository repository.CategoryRepository) *productService {
@@ -66,15 +65,6 @@ func (s *productService) FindProductByID(ID int) (models.Product, error) {
 	return product, nil
 }
 
-func (s *productService) FindCategoryName(categoryName input.CategoryInput) (models.Category, error) {
-	getCategory, err := s.productRepository.FindCategoryName(categoryName.Name)
-	if err != nil {
-		return getCategory, err
-	}
-
-	return getCategory, nil
-}
-
 func (s *productService) FindByName(name string) (models.Product, error) {
 	product, err := s.productRepository.FindByName(name)
 	if err != nil {
----------------------------------------------------


----------------------------------------------------
Commit: 3e27b84
Author: argadhana
Date: 2024-11-25
Message: modified get category name
Changes:
commit 3e27b84a87f0f27c7f2b3d364700a98877917655
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 25 21:36:20 2024 +0700

    modified get category name

 handler/product.go    | 20 ++++++++++++++++++++
 main.go               |  3 ++-
 repository/product.go | 12 ++++++++++++
 service/product.go    | 15 +++++++++++++--
 4 files changed, 47 insertions(+), 3 deletions(-)

Full Diff:
commit 3e27b84a87f0f27c7f2b3d364700a98877917655
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 25 21:36:20 2024 +0700

    modified get category name

diff --git a/handler/product.go b/handler/product.go
index a36d3fe..184d69b 100644
--- a/handler/product.go
+++ b/handler/product.go
@@ -62,6 +62,26 @@ func (h *productHandler) GetProducts(c *gin.Context) {
 	c.JSON(http.StatusOK, response)
 }
 
+func (h *productHandler) GetCategoryName(c *gin.Context) {
+	var input input.CategoryInput
+
+	if err := c.ShouldBindJSON(&input); err != nil {
+		response := helper.APIResponse("Invalid request body", http.StatusBadRequest, "error", err.Error())
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	category, err := h.productService.FindCategoryName(input)
+	if err != nil {
+		response := helper.APIResponse("Get category name failed", http.StatusBadRequest, "error", err.Error())
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get category name", http.StatusOK, "success", formatter.FormatCategory(category))
+	c.JSON(http.StatusOK, response)
+}
+
 func (h *productHandler) GetProductById(c *gin.Context) {
 	idParam := c.Param("id")
 	id, err := strconv.Atoi(idParam)
diff --git a/main.go b/main.go
index 7f420c1..1597393 100644
--- a/main.go
+++ b/main.go
@@ -50,7 +50,7 @@ func main() {
 
 	userService := service.NewService(userRepository)
 	categoryService := service.NewCategoryService(categoryRepository)
-	productService := service.NewProductService(productRepository)
+	productService := service.NewProductService(productRepository, categoryRepository)
 	customersService := service.NewCustomerService(customerRepository)
 	supplierService := service.NewSupplierService(supplierRepository)
 	discountService := service.NewDiscountService(discountRepository)
@@ -98,6 +98,7 @@ func main() {
 	api.GET("/discounts", discountHandler.GetDiscounts)
 	api.GET("/discounts/:id", discountHandler.GetDiscountById)
 	api.GET("/category-products/:id", categoryHandler.GetCategoryProducts)
+	api.GET("/category-name", productHandler.GetCategoryName)
 
 	api.PUT("/categories/:id", categoryHandler.UpdateCategory)
 	api.PUT("/products/:id", productHandler.UpdateProduct)
diff --git a/repository/product.go b/repository/product.go
index 87af34f..f562da1 100644
--- a/repository/product.go
+++ b/repository/product.go
@@ -12,6 +12,7 @@ type ProductRepository interface {
 	FindByID(ID int) (models.Product, error)
 	FindByName(name string) (models.Product, error)
 	FindAll() ([]models.Product, error)
+	FindCategoryName(categoryName string) (models.Category, error)
 	FindByCategoryID(categoryID int) ([]models.Product, error)
 	Update(product models.Product) (models.Product, error)
 	Delete(ID int) (models.Product, error)
@@ -100,3 +101,14 @@ func (r *productRepository) Delete(ID int) (models.Product, error) {
 
 	return product, nil
 }
+
+func (r *productRepository) FindCategoryName(categoryName string) (models.Category, error) {
+	var category models.Category
+	err := r.db.Where("name ILIKE ?", categoryName).Find(&category).Error
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return category, errors.New("category not found")
+		}
+	}
+	return category, nil
+}
diff --git a/service/product.go b/service/product.go
index 384e565..0e9ab1f 100644
--- a/service/product.go
+++ b/service/product.go
@@ -16,6 +16,7 @@ type ProductService interface {
 	FindProductByID(ID int) (models.Product, error)
 	FindByName(name string) (models.Product, error)
 	FindAll() ([]models.Product, error)
+	FindCategoryName(categoryName input.CategoryInput) (models.Category, error)
 	UpdateProduct(ID int, input input.ProductInput) (models.Product, error)
 	DeleteProduct(ID int) (models.Product, error)
 	ExportProductsToXLS() (*excelize.File, error)
@@ -25,10 +26,11 @@ type ProductService interface {
 
 type productService struct {
 	productRepository repository.ProductRepository
+	catgoryRepository repository.CategoryRepository
 }
 
-func NewProductService(productRepository repository.ProductRepository) *productService {
-	return &productService{productRepository}
+func NewProductService(productRepository repository.ProductRepository, categoryRepository repository.CategoryRepository) *productService {
+	return &productService{productRepository, categoryRepository}
 }
 
 func (s *productService) CreateProduct(input input.ProductInput) (models.Product, error) {
@@ -64,6 +66,15 @@ func (s *productService) FindProductByID(ID int) (models.Product, error) {
 	return product, nil
 }
 
+func (s *productService) FindCategoryName(categoryName input.CategoryInput) (models.Category, error) {
+	getCategory, err := s.productRepository.FindCategoryName(categoryName.Name)
+	if err != nil {
+		return getCategory, err
+	}
+
+	return getCategory, nil
+}
+
 func (s *productService) FindByName(name string) (models.Product, error) {
 	product, err := s.productRepository.FindByName(name)
 	if err != nil {
----------------------------------------------------


----------------------------------------------------
Commit: 47414d8
Author: argadhana
Date: 2024-11-25
Message: modifie delete at repository
Changes:
commit 47414d84bdb1ec95e01badff5297b2781178b134
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 25 20:30:02 2024 +0700

    modifie delete at repository

 repository/category.go | 2 +-
 repository/customer.go | 2 +-
 repository/discount.go | 2 +-
 repository/product.go  | 2 +-
 4 files changed, 4 insertions(+), 4 deletions(-)

Full Diff:
commit 47414d84bdb1ec95e01badff5297b2781178b134
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 25 20:30:02 2024 +0700

    modifie delete at repository

diff --git a/repository/category.go b/repository/category.go
index 26a8c01..592ccb3 100644
--- a/repository/category.go
+++ b/repository/category.go
@@ -87,7 +87,7 @@ func (r *categoryRepository) UpdateCategory(category models.Category) (models.Ca
 func (r *categoryRepository) DeleteCategory(ID int) (models.Category, error) {
 	var category models.Category
 
-	err := r.db.Where("id = ?", ID).First(&category).Error
+	err := r.db.Where("id = ?", ID).Delete(&category).Error
 	if err != nil {
 		return category, err
 	}
diff --git a/repository/customer.go b/repository/customer.go
index 39ba1d6..5ce22a7 100644
--- a/repository/customer.go
+++ b/repository/customer.go
@@ -68,7 +68,7 @@ func (r *customerRepository) UpdateCustomer(customer models.Customer) (models.Cu
 func (r *customerRepository) DeleteCustomer(ID int) (models.Customer, error) {
 	var customer models.Customer
 
-	err := r.db.Where("id = ?", ID).First(&customer).Error
+	err := r.db.Where("id = ?", ID).Delete(&customer).Error
 	if err != nil {
 		if errors.Is(err, gorm.ErrRecordNotFound) {
 			return customer, errors.New("customer not found")
diff --git a/repository/discount.go b/repository/discount.go
index 582b49b..295279a 100644
--- a/repository/discount.go
+++ b/repository/discount.go
@@ -65,7 +65,7 @@ func (r *discountRepository) UpdateDiscount(ID int, input models.Discount) (mode
 func (r *discountRepository) DeleteDiscount(ID int) (models.Discount, error) {
 	var discount models.Discount
 
-	err := r.db.Where("id = ?", ID).First(&discount).Error
+	err := r.db.Where("id = ?", ID).Delete(&discount).Error
 	if err != nil {
 		return discount, err
 	}
diff --git a/repository/product.go b/repository/product.go
index a6e05a3..87af34f 100644
--- a/repository/product.go
+++ b/repository/product.go
@@ -90,7 +90,7 @@ func (r *productRepository) Update(product models.Product) (models.Product, erro
 func (r *productRepository) Delete(ID int) (models.Product, error) {
 	var product models.Product
 
-	err := r.db.Where("id = ?", ID).First(&product).Error
+	err := r.db.Where("id = ?", ID).Delete(&product).Error
 	if err != nil {
 		if errors.Is(err, gorm.ErrRecordNotFound) {
 			return product, errors.New("product not found")
----------------------------------------------------


----------------------------------------------------
Commit: 04dc2bf
Author: argadhana
Date: 2024-11-25
Message: minor update
Changes:
commit 04dc2bfd81f7d4c53e376a72f7a25a0392a419f6
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 25 20:27:07 2024 +0700

    minor update

 handler/discount.go    |  2 +-
 handler/product.go     | 16 ++++++++--------
 repository/discount.go | 19 -------------------
 repository/product.go  |  6 ++++--
 service/product.go     | 21 +++++++++++++--------
 5 files changed, 26 insertions(+), 38 deletions(-)

Full Diff:
commit 04dc2bfd81f7d4c53e376a72f7a25a0392a419f6
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 25 20:27:07 2024 +0700

    minor update

diff --git a/handler/discount.go b/handler/discount.go
index 9fe5879..672a14a 100644
--- a/handler/discount.go
+++ b/handler/discount.go
@@ -34,7 +34,7 @@ func (h *discountHandler) CreateDiscount(c *gin.Context) {
 
 	newDiscount, err := h.discountService.Create(input)
 	if err != nil {
-		response := helper.APIResponse("Create discount failed", http.StatusBadRequest, "error", nil)
+		response := helper.APIResponse("Create discount failed", http.StatusBadRequest, "error", err.Error())
 		c.JSON(http.StatusBadRequest, response)
 		return
 	}
diff --git a/handler/product.go b/handler/product.go
index 1c81ed0..a36d3fe 100644
--- a/handler/product.go
+++ b/handler/product.go
@@ -154,6 +154,7 @@ func (h *productHandler) ImportProducts(c *gin.Context) {
 	if err != nil {
 		response := helper.APIResponse("Import products failed", http.StatusBadRequest, "error", gin.H{"message": "file not found"})
 		c.JSON(http.StatusBadRequest, response)
+		return
 	}
 
 	// Save the file to a temporary location
@@ -166,13 +167,15 @@ func (h *productHandler) ImportProducts(c *gin.Context) {
 	defer os.Remove(filePath) // Remove the file after processing
 
 	// Call the import service
-	if err := h.productService.ImportProductsFromXLS(filePath); err != nil {
+	importedProducts, err := h.productService.ImportProductsFromXLS(filePath)
+	if err != nil {
 		response := helper.APIResponse("Import products failed", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
 		c.JSON(http.StatusInternalServerError, response)
 		return
 	}
 
-	response := helper.APIResponse("Success import products", http.StatusOK, "success", nil)
+	// Respond with the list of imported products
+	response := helper.APIResponse("Success import products", http.StatusOK, "success", gin.H{"products": importedProducts})
 	c.JSON(http.StatusOK, response)
 }
 
@@ -193,12 +196,9 @@ func (h *productHandler) UploadProductImage(c *gin.Context) {
 		return
 	}
 
-	// Define the target directory
-	imageDir := "/var/www/images-product"
-
 	// Ensure the directory exists
-	if _, err := os.Stat(imageDir); os.IsNotExist(err) {
-		if err := os.MkdirAll(imageDir, os.ModePerm); err != nil {
+	if _, err := os.Stat("./images-product"); os.IsNotExist(err) {
+		if err := os.Mkdir("./images-product", os.ModePerm); err != nil {
 			response := helper.APIResponse("Failed to create image directory", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
 			c.JSON(http.StatusInternalServerError, response)
 			return
@@ -206,7 +206,7 @@ func (h *productHandler) UploadProductImage(c *gin.Context) {
 	}
 
 	// Save the file to the directory
-	filePath := fmt.Sprintf("%s/%s", imageDir, file.Filename)
+	filePath := fmt.Sprintf("./images-product/%s", file.Filename)
 	if err := c.SaveUploadedFile(file, filePath); err != nil {
 		response := helper.APIResponse("Upload image failed", http.StatusInternalServerError, "error", gin.H{"message": "failed to save file"})
 		c.JSON(http.StatusInternalServerError, response)
diff --git a/repository/discount.go b/repository/discount.go
index f9c3416..582b49b 100644
--- a/repository/discount.go
+++ b/repository/discount.go
@@ -22,25 +22,6 @@ func NewDiscountRepository(db *gorm.DB) *discountRepository {
 }
 
 func (r *discountRepository) SaveDiscount(discount models.Discount) (models.Discount, error) {
-	var availableID *int
-
-	if err := r.db.Raw("SELECT MIN(id) FROM discounts WHERE id NOT IN (SELECT id FROM discounts)").Scan(&availableID).Error; err != nil {
-		return discount, err
-	}
-
-	if availableID != nil {
-		discount.ID = *availableID
-	} else {
-		var maxID *int
-		if err := r.db.Model(&models.Discount{}).Select("MAX(id)").Scan(&maxID).Error; err != nil {
-			return discount, err
-		}
-		if maxID != nil {
-			discount.ID = *maxID + 1
-		} else {
-			discount.ID = 1
-		}
-	}
 	err := r.db.Create(&discount).Error
 	if err != nil {
 		return discount, err
diff --git a/repository/product.go b/repository/product.go
index 59b94a9..a6e05a3 100644
--- a/repository/product.go
+++ b/repository/product.go
@@ -38,17 +38,19 @@ func NewProductRepository(db *gorm.DB) *productRepository {
 func (r *productRepository) Save(product models.Product) (models.Product, error) {
 	var existingProduct models.Product
 
+	// Check if the product code already exists
 	if err := r.db.Where("code_product = ?", product.CodeProduct).First(&existingProduct).Error; err == nil {
 		return product, errors.New("product code already exists") // Return error if product code exists
 	}
 
-	err := r.db.Create(&product).Error
-	if err != nil {
+	// Insert new product
+	if err := r.db.Create(&product).Error; err != nil {
 		return product, err
 	}
 
 	return product, nil
 }
+
 func (r *productRepository) FindByID(productID int) (models.Product, error) {
 	var product models.Product
 	if err := r.db.First(&product, productID).Error; err != nil {
diff --git a/service/product.go b/service/product.go
index efd9bd7..384e565 100644
--- a/service/product.go
+++ b/service/product.go
@@ -19,7 +19,7 @@ type ProductService interface {
 	UpdateProduct(ID int, input input.ProductInput) (models.Product, error)
 	DeleteProduct(ID int) (models.Product, error)
 	ExportProductsToXLS() (*excelize.File, error)
-	ImportProductsFromXLS(filePath string) error
+	ImportProductsFromXLS(filePath string) ([]models.Product, error)
 	SaveProductImage(ID int, fileLocation string) (models.Product, error)
 }
 
@@ -180,11 +180,11 @@ func (s *productService) ExportProductsToXLS() (*excelize.File, error) {
 	return f, nil
 }
 
-func (s *productService) ImportProductsFromXLS(filePath string) error {
+func (s *productService) ImportProductsFromXLS(filePath string) ([]models.Product, error) {
 	// Open the Excel file
 	f, err := excelize.OpenFile(filePath)
 	if err != nil {
-		return err
+		return nil, err
 	}
 	defer f.Close()
 
@@ -192,9 +192,11 @@ func (s *productService) ImportProductsFromXLS(filePath string) error {
 	sheet := "Products"
 	rows, err := f.GetRows(sheet)
 	if err != nil {
-		return err
+		return nil, err
 	}
 
+	var importedProducts []models.Product
+
 	// Skip the header row
 	for i, row := range rows {
 		if i == 0 {
@@ -225,14 +227,17 @@ func (s *productService) ImportProductsFromXLS(filePath string) error {
 			Information:  row[12],
 		}
 
-		// Insert product into database
-		_, err := s.productRepository.Save(product)
+		// Insert product into the database
+		savedProduct, err := s.productRepository.Save(product)
 		if err != nil {
-			return err
+			return nil, err
 		}
+
+		// Add the saved product to the list
+		importedProducts = append(importedProducts, savedProduct)
 	}
 
-	return nil
+	return importedProducts, nil
 }
 
 func (s *productService) SaveProductImage(productID int, filePath string) (models.Product, error) {
----------------------------------------------------


----------------------------------------------------
Commit: 8ece371
Author: argadhana
Date: 2024-11-21
Message: image for development /var/www
Changes:
commit 8ece3715bd76ba7f6db6449f69f9c70452989a6f
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 21 14:39:42 2024 +0700

    image for development /var/www

 handler/product.go | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

Full Diff:
commit 8ece3715bd76ba7f6db6449f69f9c70452989a6f
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 21 14:39:42 2024 +0700

    image for development /var/www

diff --git a/handler/product.go b/handler/product.go
index 2061090..1c81ed0 100644
--- a/handler/product.go
+++ b/handler/product.go
@@ -193,9 +193,12 @@ func (h *productHandler) UploadProductImage(c *gin.Context) {
 		return
 	}
 
+	// Define the target directory
+	imageDir := "/var/www/images-product"
+
 	// Ensure the directory exists
-	if _, err := os.Stat("./images-product"); os.IsNotExist(err) {
-		if err := os.Mkdir("./images-product", os.ModePerm); err != nil {
+	if _, err := os.Stat(imageDir); os.IsNotExist(err) {
+		if err := os.MkdirAll(imageDir, os.ModePerm); err != nil {
 			response := helper.APIResponse("Failed to create image directory", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
 			c.JSON(http.StatusInternalServerError, response)
 			return
@@ -203,7 +206,7 @@ func (h *productHandler) UploadProductImage(c *gin.Context) {
 	}
 
 	// Save the file to the directory
-	filePath := fmt.Sprintf("./images-product/%s", file.Filename)
+	filePath := fmt.Sprintf("%s/%s", imageDir, file.Filename)
 	if err := c.SaveUploadedFile(file, filePath); err != nil {
 		response := helper.APIResponse("Upload image failed", http.StatusInternalServerError, "error", gin.H{"message": "failed to save file"})
 		c.JSON(http.StatusInternalServerError, response)
----------------------------------------------------


----------------------------------------------------
Commit: 0b935c0
Author: argadhana
Date: 2024-11-21
Message: user formatter input
Changes:
commit 0b935c09bc1c99a65b02cd4502aaffe9468306a3
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 21 13:29:45 2024 +0700

    user formatter input

 input/user.go   | 1 -
 service/user.go | 1 -
 2 files changed, 2 deletions(-)

Full Diff:
commit 0b935c09bc1c99a65b02cd4502aaffe9468306a3
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 21 13:29:45 2024 +0700

    user formatter input

diff --git a/input/user.go b/input/user.go
index 43c8e68..8da3d08 100644
--- a/input/user.go
+++ b/input/user.go
@@ -1,7 +1,6 @@
 package input
 
 type RegisterUserInput struct {
-	Name     string `json:"name" binding:"required"`
 	Email    string `json:"email" binding:"required,email"`
 	Password string `json:"password" binding:"required"`
 	Phone    string `json:"phone" binding:"required"`
diff --git a/service/user.go b/service/user.go
index 39d85ff..da08ac0 100644
--- a/service/user.go
+++ b/service/user.go
@@ -30,7 +30,6 @@ func NewService(repository repository2.UserRepository) *userService {
 func (s *userService) RegisterUser(input input.RegisterUserInput) (models.User, error) {
 	user := models.User{}
 
-	user.Name = input.Name
 	user.Email = input.Email
 	passwordHash, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.MinCost)
 	if err != nil {
----------------------------------------------------


----------------------------------------------------
Commit: e0114d5
Author: argadhana
Date: 2024-11-21
Message: Cors
Changes:
commit e0114d5db250110954b47e0cf2b5863b6fdd8fed
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 21 10:32:41 2024 +0700

    Cors

 go.mod  | 1 +
 go.sum  | 2 ++
 main.go | 9 +++++++++
 3 files changed, 12 insertions(+)

Full Diff:
commit e0114d5db250110954b47e0cf2b5863b6fdd8fed
Author: argadhana <yoshspecta333@gmail.com>
Date:   Thu Nov 21 10:32:41 2024 +0700

    Cors

diff --git a/go.mod b/go.mod
index 81912e0..65d00e7 100644
--- a/go.mod
+++ b/go.mod
@@ -17,6 +17,7 @@ require (
 	github.com/cloudwego/base64x v0.1.4 // indirect
 	github.com/cloudwego/iasm v0.2.0 // indirect
 	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
+	github.com/gin-contrib/cors v1.7.2 // indirect
 	github.com/gin-contrib/sse v0.1.0 // indirect
 	github.com/gin-gonic/gin v1.10.0 // indirect
 	github.com/go-playground/locales v0.14.1 // indirect
diff --git a/go.sum b/go.sum
index dbde206..80c452c 100644
--- a/go.sum
+++ b/go.sum
@@ -12,6 +12,8 @@ github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
 github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
+github.com/gin-contrib/cors v1.7.2 h1:oLDHxdg8W/XDoN/8zamqk/Drgt4oVZDvaV0YmvVICQw=
+github.com/gin-contrib/cors v1.7.2/go.mod h1:SUJVARKgQ40dmrzgXEVxj2m7Ig1v1qIboQkPDTQ9t2E=
 github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
 github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
 github.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=
diff --git a/main.go b/main.go
index 9af6d33..7f420c1 100644
--- a/main.go
+++ b/main.go
@@ -7,6 +7,7 @@ import (
 	"api-kasirapp/repository"
 	"api-kasirapp/service"
 	"fmt"
+	"github.com/gin-contrib/cors"
 	"log"
 	"net/http"
 	"os"
@@ -66,6 +67,14 @@ func main() {
 	transactionHandler := handler.NewTransactionHandler(transactionService)
 	router := gin.Default()
 
+	router.Use(cors.New(cors.Config{
+		AllowOrigins:     []string{"*"}, // Allow all origins
+		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
+		AllowHeaders:     []string{"Origin", "Authorization", "Content-Type"},
+		ExposeHeaders:    []string{"Content-Length"},
+		AllowCredentials: true,
+	}))
+
 	api := router.Group("/api/v1")
 	api.POST("/users", userHandler.RegisterUser)
 	api.POST("/sessions", userHandler.Login)
----------------------------------------------------


----------------------------------------------------
Commit: 57c683b
Author: argadhana
Date: 2024-11-20
Message: Service AUth
Changes:
commit 57c683b81936b04385afee9bced3241baa326e81
Author: argadhana <yoshspecta333@gmail.com>
Date:   Wed Nov 20 23:41:40 2024 +0700

    Service AUth

 auth/service.go  | 40 ++++++++++++++++++++++------------------
 helper/helper.go | 30 ++++++++++++++++++++++++++----
 main.go          |  5 ++++-
 3 files changed, 52 insertions(+), 23 deletions(-)

Full Diff:
commit 57c683b81936b04385afee9bced3241baa326e81
Author: argadhana <yoshspecta333@gmail.com>
Date:   Wed Nov 20 23:41:40 2024 +0700

    Service AUth

diff --git a/auth/service.go b/auth/service.go
index de6e547..eea3160 100644
--- a/auth/service.go
+++ b/auth/service.go
@@ -2,7 +2,7 @@ package auth
 
 import (
 	"errors"
-	"os"
+	"time"
 
 	"github.com/golang-jwt/jwt/v5"
 )
@@ -13,41 +13,45 @@ type Service interface {
 }
 
 type jwtService struct {
+	secretKey string
 }
 
-var SECRET_KEY = os.Getenv("SECRET_KEY")
-
-func NewService() *jwtService {
-	return &jwtService{}
+// Constructor for AuthService
+func NewService(secretKey string) *jwtService {
+	return &jwtService{secretKey: secretKey}
 }
 
+// GenerateToken creates a JWT token for the given userID
 func (s *jwtService) GenerateToken(userID int) (string, error) {
-	claim := jwt.MapClaims{}
-	claim["user_id"] = userID
+	claims := jwt.MapClaims{}
+	claims["user_id"] = userID
+	claims["exp"] = time.Now().Add(time.Hour * 24).Unix()
+
+	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
 
-	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claim)
-	signedToken, err := token.SignedString(SECRET_KEY)
+	// Convert the secret key to []byte
+	tokenString, err := token.SignedString([]byte(s.secretKey))
 	if err != nil {
-		return signedToken, err
+		return "", err
 	}
 
-	return signedToken, nil
+	return tokenString, nil
 }
 
+// ValidateToken parses and validates the JWT token
 func (s *jwtService) ValidateToken(encodedToken string) (*jwt.Token, error) {
 	token, err := jwt.Parse(encodedToken, func(token *jwt.Token) (interface{}, error) {
-
-		_, ok := token.Method.(*jwt.SigningMethodHMAC)
-
-		if !ok {
-			return nil, errors.New("invalid Token")
+		// Validate the signing method
+		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
+			return nil, errors.New("invalid token signing method")
 		}
 
-		return []byte(SECRET_KEY), nil
+		// Return the secret key for validation
+		return []byte(s.secretKey), nil
 	})
 
 	if err != nil {
-		return token, err
+		return nil, err
 	}
 
 	return token, nil
diff --git a/helper/helper.go b/helper/helper.go
index 70aad85..a70854a 100644
--- a/helper/helper.go
+++ b/helper/helper.go
@@ -1,7 +1,9 @@
 package helper
 
 import (
+	"encoding/json"
 	"errors"
+	"fmt"
 	"regexp"
 
 	"github.com/go-playground/validator/v10"
@@ -34,13 +36,33 @@ func APIResponse(message string, code int, status string, data interface{}) Resp
 }
 
 func FormatValidationError(err error) []string {
-	var errors []string
+	var errorsList []string
 
-	for _, e := range err.(validator.ValidationErrors) {
-		errors = append(errors, e.Error())
+	// Check if the error is of type ValidationErrors
+	if validationErrors, ok := err.(validator.ValidationErrors); ok {
+		for _, e := range validationErrors {
+			errorsList = append(errorsList, e.Error())
+		}
+		return errorsList
 	}
 
-	return errors
+	// Check if the error is a JSON UnmarshalTypeError
+	var unmarshalTypeError *json.UnmarshalTypeError
+	if errors.As(err, &unmarshalTypeError) {
+		errorsList = append(errorsList, fmt.Sprintf("Field '%s' has an invalid type", unmarshalTypeError.Field))
+		return errorsList
+	}
+
+	// Check if the error is a JSON SyntaxError
+	var syntaxError *json.SyntaxError
+	if errors.As(err, &syntaxError) {
+		errorsList = append(errorsList, "Invalid JSON syntax")
+		return errorsList
+	}
+
+	// Handle general errors
+	errorsList = append(errorsList, err.Error())
+	return errorsList
 }
 
 func ValidatePhoneNumber(phone string) error {
diff --git a/main.go b/main.go
index 7dd6017..9af6d33 100644
--- a/main.go
+++ b/main.go
@@ -27,6 +27,10 @@ func main() {
 	password := os.Getenv("DB_PASSWORD")
 	databaseName := os.Getenv("DB_NAME")
 	port := os.Getenv("DB_PORT")
+	secretKey := os.Getenv("SECRET_KEY")
+
+	// Initialize the auth service
+	authService := auth.NewService(secretKey)
 
 	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Africa/Lagos", host, username, password, databaseName, port)
 	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
@@ -51,7 +55,6 @@ func main() {
 	discountService := service.NewDiscountService(discountRepository)
 	stockService := service.NewStockService(stockRepository)
 	transactionService := service.NewOrderService(transactionRepository, productRepository)
-	authService := auth.NewService()
 
 	userHandler := handler.NewUserHandler(userService, authService)
 	categoryHandler := handler.NewCategoryHandler(categoryService)
----------------------------------------------------


----------------------------------------------------
Commit: 395e79c
Author: argadhana
Date: 2024-11-20
Message: transaction & image url product
Changes:
commit 395e79c2a9c2480d8c36649ba466ea299095288f
Author: argadhana <yoshspecta333@gmail.com>
Date:   Wed Nov 20 03:39:41 2024 +0700

    transaction & image url product

 formatter/category.go                              |   6 --
 formatter/product.go                               |   5 +-
 formatter/transaction.go                           |  67 +++++++----------
 handler/product.go                                 |  47 ++++++++++++
 handler/transaction.go                             |  33 +++------
 .../Screenshot 2024-10-22 at 14.37.08.png          | Bin 0 -> 119664 bytes
 input/product.go                                   |  25 +++----
 input/transaction.go                               |  11 +--
 main.go                                            |   2 +-
 models/product_entity.go                           |   1 +
 models/transaction.go                              |  21 ++++--
 repository/product.go                              |  19 ++---
 repository/transaction.go                          |  37 +++++-----
 service/product.go                                 |  22 +++++-
 service/transaction.go                             |  80 ++++++++++++---------
 15 files changed, 213 insertions(+), 163 deletions(-)

Full Diff:
commit 395e79c2a9c2480d8c36649ba466ea299095288f
Author: argadhana <yoshspecta333@gmail.com>
Date:   Wed Nov 20 03:39:41 2024 +0700

    transaction & image url product

diff --git a/formatter/category.go b/formatter/category.go
index 4cf9649..becb886 100644
--- a/formatter/category.go
+++ b/formatter/category.go
@@ -40,12 +40,6 @@ func FormatCategories(categories []models.Category) []CategoryFormatter {
 	return categoriesFormatter
 }
 
-func FormatProductWithCategory(product models.Product) ProductFormatter {
-	return ProductFormatter{
-		Name: product.Name,
-	}
-}
-
 func FormatCategoryProducts(category models.Category, products []models.Product) CategoryProductFormatter {
 	var productList []ProductFormatter
 	for _, product := range products {
diff --git a/formatter/product.go b/formatter/product.go
index d69920c..b33cd86 100644
--- a/formatter/product.go
+++ b/formatter/product.go
@@ -6,6 +6,7 @@ type ProductFormatter struct {
 	ID           int     `json:"id"`
 	Name         string  `json:"name"`
 	ProductType  string  `json:"product_type"`
+	ImageURL     string  `json:"image_url"`
 	BasePrice    float64 `json:"base_price"`
 	SellingPrice float64 `json:"selling_price"`
 	Stock        int     `json:"stock"`
@@ -21,10 +22,11 @@ type ProductFormatter struct {
 }
 
 func FormatProduct(product models.Product) ProductFormatter {
-	formatter := ProductFormatter{
+	return ProductFormatter{
 		ID:           product.ID,
 		Name:         product.Name,
 		ProductType:  product.ProductType,
+		ImageURL:     product.ProductFileName, // Correctly include the image URL
 		BasePrice:    product.BasePrice,
 		SellingPrice: product.SellingPrice,
 		Stock:        product.Stock,
@@ -38,7 +40,6 @@ func FormatProduct(product models.Product) ProductFormatter {
 		CreatedAt:    product.CreatedAt.Format("2006-01-02 15:04:05"),
 		UpdatedAt:    product.UpdatedAt.Format("2006-01-02 15:04:05"),
 	}
-	return formatter
 }
 
 func FormatProducts(products []models.Product) []ProductFormatter {
diff --git a/formatter/transaction.go b/formatter/transaction.go
index d970544..712a36f 100644
--- a/formatter/transaction.go
+++ b/formatter/transaction.go
@@ -2,53 +2,36 @@ package formatter
 
 import "api-kasirapp/models"
 
-type TransactionFormatter struct {
-	ID        int     `json:"id"`
-	ProductID int     `json:"product_id"`
-	Qty       int     `json:"qty"`
-	Amount    float32 `json:"amount"`
-	CreatedAt string  `json:"created_at"`
-	UpdatedAt string  `json:"updated_at"`
+type TransactionDetailFormatter struct {
+	ProductID int `json:"product_id"`
+	Qty       int `json:"qty"`
 }
 
-type TransactionFormatterWithProducts struct {
-	ID        int              `json:"id"`
-	ProductID int              `json:"product_id"`
-	Qty       int              `json:"qty"`
-	Amount    float32          `json:"amount"`
-	Product   ProductFormatter `json:"product"`
-	CreatedAt string           `json:"created_at"`
-	UpdatedAt string           `json:"updated_at"`
+type TransactionFormatter struct {
+	ID         int                          `json:"id"`
+	Details    []TransactionDetailFormatter `json:"details"`
+	Amount     float64                      `json:"amount"`
+	CashReturn float64                      `json:"cash_return"`
+	CreatedAt  string                       `json:"created_at"`
+	UpdatedAt  string                       `json:"updated_at"`
 }
 
-func FormatTransaction(transaction *models.Transaction) TransactionFormatter {
-	formatter := TransactionFormatter{
-		ID:        transaction.ID,
-		ProductID: transaction.ProductID,
-		Qty:       transaction.Qty,
-		Amount:    transaction.Amount,
-		CreatedAt: transaction.CreatedAt.String(),
-		UpdatedAt: transaction.UpdatedAt.String(),
+func FormatTransaction(transaction models.Transaction, cashReturn float64) TransactionFormatter {
+	var details []TransactionDetailFormatter
+	for _, detail := range transaction.Details {
+		details = append(details, TransactionDetailFormatter{
+			ProductID: detail.ProductID,
+			Qty:       detail.Qty,
+		})
 	}
-	return formatter
-}
 
-func FormatTransactionsWithProducts(transactions []models.Transaction) []TransactionFormatterWithProducts {
-	formatters := []TransactionFormatterWithProducts{}
-
-	for _, transaction := range transactions {
-		formatter := TransactionFormatterWithProducts{
-			ID:        transaction.ID,
-			ProductID: transaction.ProductID,
-			Qty:       transaction.Qty,
-			Amount:    transaction.Amount,
-			Product:   FormatProduct(transaction.Product),
-			CreatedAt: transaction.CreatedAt.String(),
-			UpdatedAt: transaction.UpdatedAt.String(),
-		}
-
-		formatters = append(formatters, formatter)
+	formatter := TransactionFormatter{
+		ID:         transaction.ID,
+		Details:    details,
+		Amount:     transaction.Amount,
+		CashReturn: cashReturn,
+		CreatedAt:  transaction.CreatedAt.String(),
+		UpdatedAt:  transaction.UpdatedAt.String(),
 	}
-
-	return formatters
+	return formatter
 }
diff --git a/handler/product.go b/handler/product.go
index 436c8f9..2061090 100644
--- a/handler/product.go
+++ b/handler/product.go
@@ -5,6 +5,7 @@ import (
 	"api-kasirapp/helper"
 	"api-kasirapp/input"
 	"api-kasirapp/service"
+	"fmt"
 	"net/http"
 	"os"
 	"strconv"
@@ -174,3 +175,49 @@ func (h *productHandler) ImportProducts(c *gin.Context) {
 	response := helper.APIResponse("Success import products", http.StatusOK, "success", nil)
 	c.JSON(http.StatusOK, response)
 }
+
+func (h *productHandler) UploadProductImage(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	// Get the uploaded file
+	file, err := c.FormFile("image")
+	if err != nil {
+		response := helper.APIResponse("Upload image failed", http.StatusBadRequest, "error", gin.H{"message": "file not found"})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	// Ensure the directory exists
+	if _, err := os.Stat("./images-product"); os.IsNotExist(err) {
+		if err := os.Mkdir("./images-product", os.ModePerm); err != nil {
+			response := helper.APIResponse("Failed to create image directory", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
+			c.JSON(http.StatusInternalServerError, response)
+			return
+		}
+	}
+
+	// Save the file to the directory
+	filePath := fmt.Sprintf("./images-product/%s", file.Filename)
+	if err := c.SaveUploadedFile(file, filePath); err != nil {
+		response := helper.APIResponse("Upload image failed", http.StatusInternalServerError, "error", gin.H{"message": "failed to save file"})
+		c.JSON(http.StatusInternalServerError, response)
+		return
+	}
+
+	// Call the service to update the product with the image URL
+	updatedProduct, err := h.productService.SaveProductImage(id, filePath)
+	if err != nil {
+		response := helper.APIResponse("Upload image failed", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusInternalServerError, response)
+		return
+	}
+
+	response := helper.APIResponse("Success upload image", http.StatusOK, "success", formatter.FormatProduct(updatedProduct))
+	c.JSON(http.StatusOK, response)
+}
diff --git a/handler/transaction.go b/handler/transaction.go
index 828b202..c4117be 100644
--- a/handler/transaction.go
+++ b/handler/transaction.go
@@ -5,10 +5,8 @@ import (
 	"api-kasirapp/helper"
 	"api-kasirapp/input"
 	"api-kasirapp/service"
-	"net/http"
-	"strconv"
-
 	"github.com/gin-gonic/gin"
+	"net/http"
 )
 
 type transactionHandler struct {
@@ -35,33 +33,18 @@ func (h *transactionHandler) CreateTransaction(c *gin.Context) {
 	}
 
 	// create transaction
-	newTransaction, err := h.transactionService.CreateTransaction(input)
+	newTransaction, cashReturn, err := h.transactionService.CreateTransactionWithCash(input)
 	if err != nil {
 		response := helper.APIResponse("Create transaction failed", http.StatusBadRequest, "error", err.Error())
 		c.JSON(http.StatusBadRequest, response)
 		return
 	}
 
-	response := helper.APIResponse("Success create transaction", http.StatusCreated, "success", formatter.FormatTransaction(newTransaction))
+	response := helper.APIResponse(
+		"Success create transaction",
+		http.StatusCreated,
+		"success",
+		formatter.FormatTransaction(newTransaction, cashReturn),
+	)
 	c.JSON(http.StatusCreated, response)
 }
-
-func (h *transactionHandler) GetTransaction(c *gin.Context) {
-	idParam := c.Param("id")
-	id, err := strconv.Atoi(idParam)
-	if err != nil {
-		response := helper.APIResponse("Get transaction failed", http.StatusBadRequest, "error", nil)
-		c.JSON(http.StatusBadRequest, response)
-		return
-	}
-
-	transaction, err := h.transactionService.GetTransactions(id)
-	if err != nil {
-		response := helper.APIResponse("Get transaction failed", http.StatusBadRequest, "error", nil)
-		c.JSON(http.StatusBadRequest, response)
-		return
-	}
-
-	response := helper.APIResponse("Success get transaction", http.StatusOK, "success", formatter.FormatTransaction(transaction))
-	c.JSON(http.StatusOK, response)
-}
diff --git a/images-product/Screenshot 2024-10-22 at 14.37.08.png b/images-product/Screenshot 2024-10-22 at 14.37.08.png
new file mode 100644
index 0000000..f4ac881
Binary files /dev/null and b/images-product/Screenshot 2024-10-22 at 14.37.08.png differ
diff --git a/input/product.go b/input/product.go
index ee7a9e1..649cfdc 100644
--- a/input/product.go
+++ b/input/product.go
@@ -1,16 +1,17 @@
 package input
 
 type ProductInput struct {
-	Name         string `json:"name" validate:"required"`
-	ProductType  string `json:"product_type" validate:"required"`
-	BasePrice    float64    `json:"base_price" validate:"required"`
-	SellingPrice float64    `json:"selling_price" validate:"required"`
-	Stock        int    `json:"stock" validate:"required"`
-	CodeProduct  string `json:"code_product" validate:"required"`
-	CategoryID   int    `json:"category_id" validate:"required"`
-	MinimumStock int    `json:"minimum_stock" validate:"required"`
-	Shelf        string `json:"shelf" validate:"required"`
-	Weight       int    `json:"weight" validate:"required"`
-	Discount     int    `json:"discount" validate:"required"`
-	Information  string `json:"information" validate:"required"`
+	Name         string  `json:"name" validate:"required"`
+	ProductType  string  `json:"product_type" validate:"required"`
+	ImageURL     string  `form:"image_product" validate:"required"`
+	BasePrice    float64 `json:"base_price" validate:"required"`
+	SellingPrice float64 `json:"selling_price" validate:"required"`
+	Stock        int     `json:"stock" validate:"required"`
+	CodeProduct  string  `json:"code_product" validate:"required"`
+	CategoryID   int     `json:"category_id" validate:"required"`
+	MinimumStock int     `json:"minimum_stock" validate:"required"`
+	Shelf        string  `json:"shelf" validate:"required"`
+	Weight       int     `json:"weight" validate:"required"`
+	Discount     int     `json:"discount" validate:"required"`
+	Information  string  `json:"information" validate:"required"`
 }
diff --git a/input/transaction.go b/input/transaction.go
index 79d5eb4..48d83f7 100644
--- a/input/transaction.go
+++ b/input/transaction.go
@@ -1,8 +1,11 @@
 package input
 
+type TransactionProductInput struct {
+	ProductID int `json:"product_id"`
+	Qty       int `json:"quantity"`
+}
+
 type TransactionInput struct {
-	ProductID int     `json:"product_id"`
-	Qty       int     `json:"qty"`
-	Amount    float32 `json:"amount"`
-	Balance   float32 `json:"balance"`
+	Products []TransactionProductInput `json:"products"`
+	Balance  float32                   `json:"balance"`
 }
diff --git a/main.go b/main.go
index 88f9d3e..7dd6017 100644
--- a/main.go
+++ b/main.go
@@ -73,6 +73,7 @@ func main() {
 	api.POST("/suppliers", supplierHandler.CreateSupplier)
 	api.POST("/discounts", discountHandler.CreateDiscount)
 	api.POST("/transactions", transactionHandler.CreateTransaction)
+	api.POST("/product-image/:id", productHandler.UploadProductImage)
 
 	api.GET("/categories", categoryHandler.GetCategories)
 	api.GET("/categories/:id", categoryHandler.GetCategoryById)
@@ -85,7 +86,6 @@ func main() {
 	api.GET("/discounts", discountHandler.GetDiscounts)
 	api.GET("/discounts/:id", discountHandler.GetDiscountById)
 	api.GET("/category-products/:id", categoryHandler.GetCategoryProducts)
-	api.GET("/transactions/:id", transactionHandler.GetTransaction)
 
 	api.PUT("/categories/:id", categoryHandler.UpdateCategory)
 	api.PUT("/products/:id", productHandler.UpdateProduct)
diff --git a/models/product_entity.go b/models/product_entity.go
index b039089..5c83b7b 100644
--- a/models/product_entity.go
+++ b/models/product_entity.go
@@ -8,6 +8,7 @@ type Product struct {
 	ID           int
 	Name         string
 	ProductType  string
+	ProductFileName	 string
 	BasePrice    float64
 	SellingPrice float64
 	Stock        int
diff --git a/models/transaction.go b/models/transaction.go
index 4efa069..2997ab4 100644
--- a/models/transaction.go
+++ b/models/transaction.go
@@ -3,11 +3,18 @@ package models
 import "time"
 
 type Transaction struct {
-	ID        int `gorm:"primaryKey;autoIncrement"`
-	ProductID int `gorm:"index;column:id_product"`
-	Qty       int
-	Amount    float32
-	CreatedAt time.Time
-	UpdatedAt time.Time `gorm:"autoUpdateTime"`
-	Product   Product   `gorm:"foreignKey:ProductID;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`
+	ID        int                 `gorm:"primaryKey;autoIncrement" json:"id"`
+	Qty       int                 `gorm:"not null" json:"quantity"`                                            // Total number of items in the transaction
+	Amount    float64             `gorm:"not null" json:"amount"`                                              // Total amount for the transaction
+	Details   []TransactionDetail `gorm:"foreignKey:TransactionID;constraint:OnDelete:CASCADE" json:"details"` // Associated transaction details
+	CreatedAt time.Time           `gorm:"autoCreateTime" json:"created_at"`                                    // Automatically set on creation
+	UpdatedAt time.Time           `gorm:"autoUpdateTime" json:"updated_at"`                                    // Automatically updated on modification
 }
+
+type TransactionDetail struct {
+	ID            int       `gorm:"primaryKey;autoIncrement" json:"id"`
+	TransactionID int       `gorm:"not null;index" json:"transaction_id"`  // Foreign key to transactions
+	ProductID     int       `gorm:"not null;index" json:"product_id"`      // Foreign key to products
+	Qty           int       `gorm:"not null" json:"quantity"`              // Quantity of the product in the transaction
+	Product       Product   `gorm:"foreignKey:ProductID;constraint:OnDelete:CASCADE" json:"product"` // Associated product
+}
\ No newline at end of file
diff --git a/repository/product.go b/repository/product.go
index e3fddd2..59b94a9 100644
--- a/repository/product.go
+++ b/repository/product.go
@@ -13,7 +13,7 @@ type ProductRepository interface {
 	FindByName(name string) (models.Product, error)
 	FindAll() ([]models.Product, error)
 	FindByCategoryID(categoryID int) ([]models.Product, error)
-	Update(ID int, product models.Product) (models.Product, error)
+	Update(product models.Product) (models.Product, error)
 	Delete(ID int) (models.Product, error)
 }
 
@@ -49,17 +49,10 @@ func (r *productRepository) Save(product models.Product) (models.Product, error)
 
 	return product, nil
 }
-
-func (r *productRepository) FindByID(ID int) (models.Product, error) {
+func (r *productRepository) FindByID(productID int) (models.Product, error) {
 	var product models.Product
-
-	err := r.db.Where("id = ?", ID).Find(&product).Error
-	if err != nil {
-		if errors.Is(err, gorm.ErrRecordNotFound) {
-			return product, errors.New("product not found")
-		}
+	if err := r.db.First(&product, productID).Error; err != nil {
 		return product, err
-
 	}
 	return product, nil
 }
@@ -85,10 +78,8 @@ func (r *productRepository) FindAll() ([]models.Product, error) {
 	}
 	return products, nil
 }
-
-func (r *productRepository) Update(ID int, product models.Product) (models.Product, error) {
-	err := r.db.Save(&product).Error
-	if err != nil {
+func (r *productRepository) Update(product models.Product) (models.Product, error) {
+	if err := r.db.Save(&product).Error; err != nil {
 		return product, err
 	}
 	return product, nil
diff --git a/repository/transaction.go b/repository/transaction.go
index 5dfb639..f218d30 100644
--- a/repository/transaction.go
+++ b/repository/transaction.go
@@ -7,9 +7,9 @@ import (
 )
 
 type OrderRepository interface {
-	Create(data *models.Transaction) (*models.Transaction, error)
-	GetByID(ID int) (*models.Transaction, error)
-	GetTransactionWithProducts(ID int) ([]models.Product, error)
+	Create(data models.Transaction, details []models.TransactionDetail) (models.Transaction, error)
+	GetByIDWithDetails(id int, transaction *models.Transaction) error
+	GetByID(ID int) (models.Transaction, error)
 	GetTotalSalesByShiftID(ID int) (float64, error)
 }
 
@@ -21,7 +21,7 @@ func NewOrderRepository(db *gorm.DB) *orderRepository {
 	return &orderRepository{db}
 }
 
-func (r *orderRepository) Create(data *models.Transaction) (*models.Transaction, error) {
+func (r *orderRepository) Create(data models.Transaction, details []models.TransactionDetail) (models.Transaction, error) {
 	tx := r.db.Begin()
 	defer func() {
 		if r := recover(); r != nil {
@@ -31,31 +31,34 @@ func (r *orderRepository) Create(data *models.Transaction) (*models.Transaction,
 		}
 	}()
 
-	if err := tx.Create(data).Error; err != nil {
+	if err := tx.Create(&data).Error; err != nil {
 		tx.Rollback()
 		return data, err
 	}
 
+	for _, detail := range details {
+		detail.TransactionID = data.ID
+		if err := tx.Create(&detail).Error; err != nil {
+			tx.Rollback()
+			return data, err
+		}
+	}
+
 	tx.Commit()
 
 	return data, nil
 }
 
-func (r *orderRepository) GetByID(ID int) (*models.Transaction, error) {
-	var data models.Transaction
-
-	if err := r.db.Debug().Preload("Product").Model(&models.Transaction{}).Where("id = ?", ID).Find(&data).Error; err != nil {
-		return nil, err
-	}
-
-	return &data, nil
+func (r *orderRepository) GetByIDWithDetails(id int, transaction *models.Transaction) error {
+	return r.db.Preload("Details.Product").First(transaction, id).Error
 }
 
-func (r *orderRepository) GetTransactionWithProducts(ID int) ([]models.Product, error) {
-	var data []models.Product
 
-	if err := r.db.Debug().Preload("Product").Find(&data).Error; err != nil {
-		return nil, err
+func (r *orderRepository) GetByID(ID int) (models.Transaction, error) {
+	var data models.Transaction
+
+	if err := r.db.Debug().Preload("Product").First(&data, ID).Error; err != nil {
+		return data, err
 	}
 
 	return data, nil
diff --git a/service/product.go b/service/product.go
index 7933fa5..efd9bd7 100644
--- a/service/product.go
+++ b/service/product.go
@@ -20,6 +20,7 @@ type ProductService interface {
 	DeleteProduct(ID int) (models.Product, error)
 	ExportProductsToXLS() (*excelize.File, error)
 	ImportProductsFromXLS(filePath string) error
+	SaveProductImage(ID int, fileLocation string) (models.Product, error)
 }
 
 type productService struct {
@@ -100,7 +101,7 @@ func (s *productService) UpdateProduct(ID int, input input.ProductInput) (models
 	product.Discount = input.Discount
 	product.Information = input.Information
 
-	updatedProduct, err := s.productRepository.Update(ID, product)
+	updatedProduct, err := s.productRepository.Update(product)
 	if err != nil {
 		return updatedProduct, err
 	}
@@ -233,3 +234,22 @@ func (s *productService) ImportProductsFromXLS(filePath string) error {
 
 	return nil
 }
+
+func (s *productService) SaveProductImage(productID int, filePath string) (models.Product, error) {
+	// Find the product by ID
+	product, err := s.productRepository.FindByID(productID)
+	if err != nil {
+		return product, fmt.Errorf("product not found: %w", err)
+	}
+
+	// Update the product's image URL
+	product.ProductFileName = filePath
+
+	// Save the updated product in the database
+	updatedProduct, err := s.productRepository.Update(product)
+	if err != nil {
+		return updatedProduct, fmt.Errorf("failed to update product: %w", err)
+	}
+
+	return updatedProduct, nil
+}
diff --git a/service/transaction.go b/service/transaction.go
index 1c7d758..ab0ff04 100644
--- a/service/transaction.go
+++ b/service/transaction.go
@@ -5,17 +5,14 @@ import (
 	"api-kasirapp/models"
 	"api-kasirapp/repository"
 	"errors"
+	"strconv"
 
 	"gorm.io/gorm"
 )
 
 type OrderServices interface {
-	CreateTransaction(input input.TransactionInput) (*models.Transaction, error)
-	GetTransactions(ID int) (*models.Transaction, error)
-	GetTransactionWithProducts(ID int) (*[]models.Product, error)
-	// HandleSentEmail(data []byte) error
-	// HandleLogging(data []byte) error
-	// HandleCallback(notificationPayload map[string]interface{}) error
+	CreateTransactionWithCash(input input.TransactionInput) (models.Transaction, float64, error)
+	GetTransactions(ID int) (models.Transaction, error)
 }
 
 type orderService struct {
@@ -27,37 +24,65 @@ func NewOrderService(orderRepository repository.OrderRepository, productReposito
 	return &orderService{orderRepository, productRepository}
 }
 
-func (s *orderService) CreateTransaction(input input.TransactionInput) (*models.Transaction, error) {
-	trx := &models.Transaction{}
+func (s *orderService) CreateTransactionWithCash(input input.TransactionInput) (models.Transaction, float64, error) {
+	trx := models.Transaction{}
+	var details []models.TransactionDetail
+	totalCost := 0.0
 
-	trx.ProductID = input.ProductID
-	trx.Qty = input.Qty
-	trx.Amount = input.Amount
+	for _, productInput := range input.Products {
+		product, err := s.productRepository.FindByID(productInput.ProductID)
+		if err != nil {
+			return trx, 0, err
+		}
 
-	product, err := s.productRepository.FindByID(input.ProductID)
-	if err != nil {
-		return nil, err
-	}
+		if product.Stock < productInput.Qty {
+			return trx, 0, errors.New("stock not enough for product ID " + strconv.Itoa(productInput.ProductID))
+		}
+
+		// Calculate cost for this product
+		productCost := product.SellingPrice * float64(productInput.Qty)
+		totalCost += productCost
 
-	if product.Stock < input.Qty {
-		return nil, errors.New("stock not enough")
+		// Deduct stock
+		product.Stock -= productInput.Qty
+		_, err = s.productRepository.Update(product)
+		if err != nil {
+			return trx, 0, err
+		}
+
+		// Add to transaction details
+		details = append(details, models.TransactionDetail{
+			ProductID: productInput.ProductID,
+			Qty:       productInput.Qty,
+		})
 	}
 
-	totalCost := product.SellingPrice * float64(input.Qty)
+	// Check if balance is sufficient
 	if float64(input.Balance) < totalCost {
-		return nil, errors.New("balance not enough")
+		return trx, 0, errors.New("balance not enough")
 	}
+	cashReturn := float64(input.Balance) - totalCost
 
-	data, err := s.orderRepository.Create(trx)
+	// Save transaction and details
+	trx.Amount = totalCost
+	trx.Qty = len(input.Products)
+
+	savedTransaction, err := s.orderRepository.Create(trx, details)
 	if err != nil {
-		return nil, err
+		return savedTransaction, 0, err
 	}
 
-	return data, nil
+	// Fetch transaction with details
+	err = s.orderRepository.GetByIDWithDetails(savedTransaction.ID, &savedTransaction)
+	if err != nil {
+		return savedTransaction, 0, err
+	}
+
+	return savedTransaction, cashReturn, nil
 
 }
 
-func (s *orderService) GetTransactions(ID int) (*models.Transaction, error) {
+func (s *orderService) GetTransactions(ID int) (models.Transaction, error) {
 	data, err := s.orderRepository.GetByID(ID)
 	if err != nil {
 		if errors.Is(err, gorm.ErrRecordNotFound) {
@@ -68,12 +93,3 @@ func (s *orderService) GetTransactions(ID int) (*models.Transaction, error) {
 
 	return data, nil
 }
-
-func (s *orderService) GetTransactionWithProducts(ID int) (*[]models.Product, error) {
-	products, err := s.orderRepository.GetTransactionWithProducts(ID)
-	if err != nil {
-		return nil, err
-	}
-
-	return &products, nil
-}
----------------------------------------------------


----------------------------------------------------
Commit: 669dff5
Author: unknown
Date: 2024-11-19
Message: constraint between transaction and shift
Changes:
commit 669dff5fce427df31e6a3b41068622ccc8474f15
Author: unknown <yasidalmubarok@gmail.com>
Date:   Tue Nov 19 21:47:20 2024 +0700

    constraint between transaction and shift

 repository/transaction.go | 11 +++++++++++
 service/shift.go          | 38 ++++++++++++++++++++++++++++++++------
 2 files changed, 43 insertions(+), 6 deletions(-)

Full Diff:
commit 669dff5fce427df31e6a3b41068622ccc8474f15
Author: unknown <yasidalmubarok@gmail.com>
Date:   Tue Nov 19 21:47:20 2024 +0700

    constraint between transaction and shift

diff --git a/repository/transaction.go b/repository/transaction.go
index beb63b1..5dfb639 100644
--- a/repository/transaction.go
+++ b/repository/transaction.go
@@ -10,6 +10,7 @@ type OrderRepository interface {
 	Create(data *models.Transaction) (*models.Transaction, error)
 	GetByID(ID int) (*models.Transaction, error)
 	GetTransactionWithProducts(ID int) ([]models.Product, error)
+	GetTotalSalesByShiftID(ID int) (float64, error)
 }
 
 type orderRepository struct {
@@ -59,3 +60,13 @@ func (r *orderRepository) GetTransactionWithProducts(ID int) ([]models.Product,
 
 	return data, nil
 }
+
+func (r *orderRepository) GetTotalSalesByShiftID(ID int) (float64, error) {
+	var total float64
+
+	if err := r.db.Debug().Model(&models.Transaction{}).Where("shift_id = ?", ID).Select("COALESCE(SUM(total), 0)").Scan(&total).Error; err != nil {
+		return 0, err
+	}
+
+	return total, nil
+}
diff --git a/service/shift.go b/service/shift.go
index d6afc95..d7112b0 100644
--- a/service/shift.go
+++ b/service/shift.go
@@ -4,24 +4,31 @@ import (
 	"api-kasirapp/input"
 	"api-kasirapp/models"
 	"api-kasirapp/repository"
+	"errors"
+	"time"
 )
 
 type ShiftService interface {
 	StartShift(input input.ShiftInput) (*models.Shift, error)
-	EndShift(input input.ShiftInput) (*models.Shift, error)
+	EndShift(ID int) (*models.Shift, error)
 }
 
 type shiftService struct {
 	shiftRepository repository.ShiftRepository
+	orderRepository repository.OrderRepository
 }
 
-func NewShiftService(shiftRepository repository.ShiftRepository) *shiftService {
-	return &shiftService{shiftRepository}
+func NewShiftService(shiftRepository repository.ShiftRepository, orderRepository repository.OrderRepository) ShiftService {
+	return &shiftService{
+		shiftRepository: shiftRepository,
+		orderRepository: orderRepository,
+	}
 }
 
 func (s *shiftService) StartShift(input input.ShiftInput) (*models.Shift, error) {
 	shift := models.Shift{}
 	shift.StartBalance = input.StartBalance
+	shift.StartTime = time.Now()
 
 	shift, err := s.shiftRepository.Save(shift)
 	if err != nil {
@@ -31,11 +38,30 @@ func (s *shiftService) StartShift(input input.ShiftInput) (*models.Shift, error)
 	return &shift, nil
 }
 
-func (s *shiftService) EndShift(id int) (*models.Shift, error) {
-	shift, err := s.shiftRepository.FindByID(id)
+func (s *shiftService) EndShift(ID int) (*models.Shift, error) {
+	shift, err := s.shiftRepository.FindByID(ID)
 	if err != nil {
 		return nil, err
 	}
-	return &shift, nil
 
+	if shift.Status != "berjalan" {
+		return nil, errors.New("shift is not running")
+	}
+
+	totalSales, err := s.orderRepository.GetTotalSalesByShiftID(ID)
+	if err != nil {
+		return nil, err
+	}
+	endTime := time.Now()
+
+	shift.Status = "selesai"
+	shift.TotalSales = totalSales
+	shift.EndTime = &endTime
+
+	shift, err = s.shiftRepository.Update(ID, shift)
+	if err != nil {
+		return nil, err
+	}
+
+	return &shift, nil
 }
----------------------------------------------------


----------------------------------------------------
Commit: 9a452f5
Author: unknown
Date: 2024-11-19
Message: modified transaction
Changes:
commit 9a452f5321c992143ae2e5948e045a2230de409a
Author: unknown <yasidalmubarok@gmail.com>
Date:   Tue Nov 19 21:16:33 2024 +0700

    modified transaction

 formatter/transaction.go  | 34 +++++++++++++++++++++++++++--
 handler/transaction.go    |  5 +++--
 input/transaction.go      |  1 +
 main.go                   |  2 +-
 repository/transaction.go | 14 +++++++++++-
 service/transaction.go    | 54 +++++++++++++++++++++++++++++++++++------------
 6 files changed, 91 insertions(+), 19 deletions(-)

Full Diff:
commit 9a452f5321c992143ae2e5948e045a2230de409a
Author: unknown <yasidalmubarok@gmail.com>
Date:   Tue Nov 19 21:16:33 2024 +0700

    modified transaction

diff --git a/formatter/transaction.go b/formatter/transaction.go
index dd34cd2..d970544 100644
--- a/formatter/transaction.go
+++ b/formatter/transaction.go
@@ -3,14 +3,24 @@ package formatter
 import "api-kasirapp/models"
 
 type TransactionFormatter struct {
-	ID        int    `json:"id"`
-	ProductID int    `json:"product_id"`
+	ID        int     `json:"id"`
+	ProductID int     `json:"product_id"`
 	Qty       int     `json:"qty"`
 	Amount    float32 `json:"amount"`
 	CreatedAt string  `json:"created_at"`
 	UpdatedAt string  `json:"updated_at"`
 }
 
+type TransactionFormatterWithProducts struct {
+	ID        int              `json:"id"`
+	ProductID int              `json:"product_id"`
+	Qty       int              `json:"qty"`
+	Amount    float32          `json:"amount"`
+	Product   ProductFormatter `json:"product"`
+	CreatedAt string           `json:"created_at"`
+	UpdatedAt string           `json:"updated_at"`
+}
+
 func FormatTransaction(transaction *models.Transaction) TransactionFormatter {
 	formatter := TransactionFormatter{
 		ID:        transaction.ID,
@@ -22,3 +32,23 @@ func FormatTransaction(transaction *models.Transaction) TransactionFormatter {
 	}
 	return formatter
 }
+
+func FormatTransactionsWithProducts(transactions []models.Transaction) []TransactionFormatterWithProducts {
+	formatters := []TransactionFormatterWithProducts{}
+
+	for _, transaction := range transactions {
+		formatter := TransactionFormatterWithProducts{
+			ID:        transaction.ID,
+			ProductID: transaction.ProductID,
+			Qty:       transaction.Qty,
+			Amount:    transaction.Amount,
+			Product:   FormatProduct(transaction.Product),
+			CreatedAt: transaction.CreatedAt.String(),
+			UpdatedAt: transaction.UpdatedAt.String(),
+		}
+
+		formatters = append(formatters, formatter)
+	}
+
+	return formatters
+}
diff --git a/handler/transaction.go b/handler/transaction.go
index 8e6901f..828b202 100644
--- a/handler/transaction.go
+++ b/handler/transaction.go
@@ -5,9 +5,10 @@ import (
 	"api-kasirapp/helper"
 	"api-kasirapp/input"
 	"api-kasirapp/service"
-	"github.com/gin-gonic/gin"
 	"net/http"
 	"strconv"
+
+	"github.com/gin-gonic/gin"
 )
 
 type transactionHandler struct {
@@ -54,7 +55,7 @@ func (h *transactionHandler) GetTransaction(c *gin.Context) {
 		return
 	}
 
-	transaction, err := h.transactionService.GetTransaction(id)
+	transaction, err := h.transactionService.GetTransactions(id)
 	if err != nil {
 		response := helper.APIResponse("Get transaction failed", http.StatusBadRequest, "error", nil)
 		c.JSON(http.StatusBadRequest, response)
diff --git a/input/transaction.go b/input/transaction.go
index fa3a877..79d5eb4 100644
--- a/input/transaction.go
+++ b/input/transaction.go
@@ -4,4 +4,5 @@ type TransactionInput struct {
 	ProductID int     `json:"product_id"`
 	Qty       int     `json:"qty"`
 	Amount    float32 `json:"amount"`
+	Balance   float32 `json:"balance"`
 }
diff --git a/main.go b/main.go
index d0b7389..88f9d3e 100644
--- a/main.go
+++ b/main.go
@@ -50,7 +50,7 @@ func main() {
 	supplierService := service.NewSupplierService(supplierRepository)
 	discountService := service.NewDiscountService(discountRepository)
 	stockService := service.NewStockService(stockRepository)
-	transactionService := service.NewOrderService(transactionRepository)
+	transactionService := service.NewOrderService(transactionRepository, productRepository)
 	authService := auth.NewService()
 
 	userHandler := handler.NewUserHandler(userService, authService)
diff --git a/repository/transaction.go b/repository/transaction.go
index 0eae970..beb63b1 100644
--- a/repository/transaction.go
+++ b/repository/transaction.go
@@ -2,12 +2,14 @@ package repository
 
 import (
 	"api-kasirapp/models"
+
 	"gorm.io/gorm"
 )
 
 type OrderRepository interface {
 	Create(data *models.Transaction) (*models.Transaction, error)
 	GetByID(ID int) (*models.Transaction, error)
+	GetTransactionWithProducts(ID int) ([]models.Product, error)
 }
 
 type orderRepository struct {
@@ -18,7 +20,7 @@ func NewOrderRepository(db *gorm.DB) *orderRepository {
 	return &orderRepository{db}
 }
 
-func (r *orderRepository) Create(data *models.Transaction) (*models.Transaction, error){
+func (r *orderRepository) Create(data *models.Transaction) (*models.Transaction, error) {
 	tx := r.db.Begin()
 	defer func() {
 		if r := recover(); r != nil {
@@ -47,3 +49,13 @@ func (r *orderRepository) GetByID(ID int) (*models.Transaction, error) {
 
 	return &data, nil
 }
+
+func (r *orderRepository) GetTransactionWithProducts(ID int) ([]models.Product, error) {
+	var data []models.Product
+
+	if err := r.db.Debug().Preload("Product").Find(&data).Error; err != nil {
+		return nil, err
+	}
+
+	return data, nil
+}
diff --git a/service/transaction.go b/service/transaction.go
index ef0b572..1c7d758 100644
--- a/service/transaction.go
+++ b/service/transaction.go
@@ -5,47 +5,75 @@ import (
 	"api-kasirapp/models"
 	"api-kasirapp/repository"
 	"errors"
+
 	"gorm.io/gorm"
 )
 
 type OrderServices interface {
 	CreateTransaction(input input.TransactionInput) (*models.Transaction, error)
-	GetTransaction(ID int) (*models.Transaction, error)
+	GetTransactions(ID int) (*models.Transaction, error)
+	GetTransactionWithProducts(ID int) (*[]models.Product, error)
 	// HandleSentEmail(data []byte) error
 	// HandleLogging(data []byte) error
 	// HandleCallback(notificationPayload map[string]interface{}) error
 }
 
 type orderService struct {
-	orderRepository repository.OrderRepository
+	orderRepository   repository.OrderRepository
+	productRepository repository.ProductRepository
 }
 
-func NewOrderService(orderRepository repository.OrderRepository) *orderService {
-	return &orderService{orderRepository}
+func NewOrderService(orderRepository repository.OrderRepository, productRepository repository.ProductRepository) *orderService {
+	return &orderService{orderRepository, productRepository}
 }
 
 func (s *orderService) CreateTransaction(input input.TransactionInput) (*models.Transaction, error) {
-	data := models.Transaction{}
-	data.ProductID = input.ProductID
-	data.Qty = input.Qty
-	data.Amount = input.Amount
+	trx := &models.Transaction{}
+
+	trx.ProductID = input.ProductID
+	trx.Qty = input.Qty
+	trx.Amount = input.Amount
+
+	product, err := s.productRepository.FindByID(input.ProductID)
+	if err != nil {
+		return nil, err
+	}
+
+	if product.Stock < input.Qty {
+		return nil, errors.New("stock not enough")
+	}
+
+	totalCost := product.SellingPrice * float64(input.Qty)
+	if float64(input.Balance) < totalCost {
+		return nil, errors.New("balance not enough")
+	}
 
-	newData, err := s.orderRepository.Create(&data)
+	data, err := s.orderRepository.Create(trx)
 	if err != nil {
-		return newData, err
+		return nil, err
 	}
 
-	return newData, nil
+	return data, nil
+
 }
 
-func (s *orderService) GetTransaction(ID int) (*models.Transaction, error) {
+func (s *orderService) GetTransactions(ID int) (*models.Transaction, error) {
 	data, err := s.orderRepository.GetByID(ID)
 	if err != nil {
 		if errors.Is(err, gorm.ErrRecordNotFound) {
-			return data, errors.New("category not found")
+			return data, errors.New("transaction not found")
 		}
 		return data, err
 	}
 
 	return data, nil
 }
+
+func (s *orderService) GetTransactionWithProducts(ID int) (*[]models.Product, error) {
+	products, err := s.orderRepository.GetTransactionWithProducts(ID)
+	if err != nil {
+		return nil, err
+	}
+
+	return &products, nil
+}
----------------------------------------------------


----------------------------------------------------
Commit: 9c51cb1
Author: unknown
Date: 2024-11-19
Message: add: management shift
Changes:
commit 9c51cb1372aa8af09213d3a84604c6a56b769997
Author: unknown <yasidalmubarok@gmail.com>
Date:   Tue Nov 19 21:15:54 2024 +0700

    add: management shift

 formatter/shift.go     | 40 ++++++++++++++++++++++++++++++++++++
 input/shift.go         |  5 +++++
 models/shift_entity.go | 16 +++++++++++++++
 repository/shift.go    | 56 ++++++++++++++++++++++++++++++++++++++++++++++++++
 service/shift.go       | 41 ++++++++++++++++++++++++++++++++++++
 5 files changed, 158 insertions(+)

Full Diff:
commit 9c51cb1372aa8af09213d3a84604c6a56b769997
Author: unknown <yasidalmubarok@gmail.com>
Date:   Tue Nov 19 21:15:54 2024 +0700

    add: management shift

diff --git a/formatter/shift.go b/formatter/shift.go
new file mode 100644
index 0000000..64ba0f0
--- /dev/null
+++ b/formatter/shift.go
@@ -0,0 +1,40 @@
+package formatter
+
+import "api-kasirapp/models"
+
+type ShiftFormatter struct {
+	ID           int     `json:"id"`
+	UserID       int     `json:"name"`
+	StartBalance float64 `json:"start_balance"`
+	StartTime    string  `json:"start_time"`
+	EndTime      string  `json:"end_time"`
+	Status       string  `json:"status"`
+	TotalSales   float64 `json:"total_sales"`
+	Expenses     float64 `json:"expenses"`
+	CreatedAt    string  `json:"created_at"`
+	UpdatedAt    string  `json:"updated_at"`
+}
+
+func FormatShift(shift models.Shift) ShiftFormatter {
+	formatter := ShiftFormatter{
+		ID:           shift.ID,
+		UserID:       shift.UserID.ID,
+		StartBalance: shift.StartBalance,
+		StartTime:    shift.StartTime.Format("2006-01-02 15:04:05"),
+		EndTime:      shift.EndTime.Format("2006-01-02 15:04:05"),
+		Status:       shift.Status,
+		TotalSales:   shift.TotalSales,
+		Expenses:     shift.Expenses,
+		CreatedAt:    shift.CreatedAt,
+		UpdatedAt:    shift.UpdatedAt,
+	}
+	return formatter
+}
+
+func FormatShifts(shifts []models.Shift) []ShiftFormatter {
+	var formatter []ShiftFormatter
+	for _, shift := range shifts {
+		formatter = append(formatter, FormatShift(shift))
+	}
+	return formatter
+}
diff --git a/input/shift.go b/input/shift.go
new file mode 100644
index 0000000..74bbdd1
--- /dev/null
+++ b/input/shift.go
@@ -0,0 +1,5 @@
+package input
+
+type ShiftInput struct {
+	StartBalance float64 `json:"start_balance"`
+}
diff --git a/models/shift_entity.go b/models/shift_entity.go
new file mode 100644
index 0000000..3444f1b
--- /dev/null
+++ b/models/shift_entity.go
@@ -0,0 +1,16 @@
+package models
+
+import "time"
+
+type Shift struct {
+	ID           int       `gorm:"primaryKey;autoIncrement"`
+	UserID       User      `gorm:"foreignKey:ShiftName;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;not null"`
+	StartBalance float64   `gorm:"not null"`
+	StartTime    time.Time `gorm:"not null"`
+	EndTime      *time.Time
+	Status       string `gorm:"default:berjalan"`
+	TotalSales   float64
+	Expenses     float64
+	CreatedAt    string
+	UpdatedAt    string
+}
diff --git a/repository/shift.go b/repository/shift.go
new file mode 100644
index 0000000..2e4ea05
--- /dev/null
+++ b/repository/shift.go
@@ -0,0 +1,56 @@
+package repository
+
+import (
+	"api-kasirapp/models"
+
+	"gorm.io/gorm"
+)
+
+type ShiftRepository interface {
+	Save(shift models.Shift) (models.Shift, error)
+	FindByID(ID int) (models.Shift, error)
+	FindAll() ([]models.Shift, error)
+	Update(ID int, shift models.Shift) (models.Shift, error)
+}
+
+type shiftRepository struct {
+	db *gorm.DB
+}
+
+func NewShiftRepository(db *gorm.DB) *shiftRepository {
+	return &shiftRepository{db}
+}
+
+func (r *shiftRepository) Save(shift models.Shift) (models.Shift, error) {
+	if err := r.db.Create(&shift).Error; err != nil {
+		return shift, err
+	}
+
+	return shift, nil
+}
+
+func (r *shiftRepository) FindByID(ID int) (models.Shift, error) {
+	var shift models.Shift
+	if err := r.db.First(&shift, ID).Error; err != nil {
+		return shift, err
+	}
+
+	return shift, nil
+}
+
+func (r *shiftRepository) FindAll() ([]models.Shift, error) {
+	var shifts []models.Shift
+	if err := r.db.Find(&shifts).Error; err != nil {
+		return nil, err
+	}
+
+	return shifts, nil
+}
+
+func (r *shiftRepository) Update(ID int, shift models.Shift) (models.Shift, error) {
+	if err := r.db.Save(&shift).Error; err != nil {
+		return shift, err
+	}
+
+	return shift, nil
+}
diff --git a/service/shift.go b/service/shift.go
new file mode 100644
index 0000000..d6afc95
--- /dev/null
+++ b/service/shift.go
@@ -0,0 +1,41 @@
+package service
+
+import (
+	"api-kasirapp/input"
+	"api-kasirapp/models"
+	"api-kasirapp/repository"
+)
+
+type ShiftService interface {
+	StartShift(input input.ShiftInput) (*models.Shift, error)
+	EndShift(input input.ShiftInput) (*models.Shift, error)
+}
+
+type shiftService struct {
+	shiftRepository repository.ShiftRepository
+}
+
+func NewShiftService(shiftRepository repository.ShiftRepository) *shiftService {
+	return &shiftService{shiftRepository}
+}
+
+func (s *shiftService) StartShift(input input.ShiftInput) (*models.Shift, error) {
+	shift := models.Shift{}
+	shift.StartBalance = input.StartBalance
+
+	shift, err := s.shiftRepository.Save(shift)
+	if err != nil {
+		return nil, err
+	}
+
+	return &shift, nil
+}
+
+func (s *shiftService) EndShift(id int) (*models.Shift, error) {
+	shift, err := s.shiftRepository.FindByID(id)
+	if err != nil {
+		return nil, err
+	}
+	return &shift, nil
+
+}
----------------------------------------------------


----------------------------------------------------
Commit: 1eec6a4
Author: argadhana
Date: 2024-11-04
Message: API Transaction tapi belom fix
Changes:
commit 1eec6a4e8f34b16c050283b60414c9461e8ad213
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 4 00:13:14 2024 +0700

    API Transaction tapi belom fix

 formatter/transaction.go  | 24 +++++++++++++++++
 handler/transaction.go    | 66 +++++++++++++++++++++++++++++++++++++++++++++++
 input/transaction.go      |  7 +++++
 main.go                   |  5 ++++
 models/transaction.go     | 13 ++++++++++
 repository/transaction.go | 49 +++++++++++++++++++++++++++++++++++
 service/transaction.go    | 51 ++++++++++++++++++++++++++++++++++++
 7 files changed, 215 insertions(+)

Full Diff:
commit 1eec6a4e8f34b16c050283b60414c9461e8ad213
Author: argadhana <yoshspecta333@gmail.com>
Date:   Mon Nov 4 00:13:14 2024 +0700

    API Transaction tapi belom fix

diff --git a/formatter/transaction.go b/formatter/transaction.go
new file mode 100644
index 0000000..dd34cd2
--- /dev/null
+++ b/formatter/transaction.go
@@ -0,0 +1,24 @@
+package formatter
+
+import "api-kasirapp/models"
+
+type TransactionFormatter struct {
+	ID        int    `json:"id"`
+	ProductID int    `json:"product_id"`
+	Qty       int     `json:"qty"`
+	Amount    float32 `json:"amount"`
+	CreatedAt string  `json:"created_at"`
+	UpdatedAt string  `json:"updated_at"`
+}
+
+func FormatTransaction(transaction *models.Transaction) TransactionFormatter {
+	formatter := TransactionFormatter{
+		ID:        transaction.ID,
+		ProductID: transaction.ProductID,
+		Qty:       transaction.Qty,
+		Amount:    transaction.Amount,
+		CreatedAt: transaction.CreatedAt.String(),
+		UpdatedAt: transaction.UpdatedAt.String(),
+	}
+	return formatter
+}
diff --git a/handler/transaction.go b/handler/transaction.go
new file mode 100644
index 0000000..8e6901f
--- /dev/null
+++ b/handler/transaction.go
@@ -0,0 +1,66 @@
+package handler
+
+import (
+	"api-kasirapp/formatter"
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/service"
+	"github.com/gin-gonic/gin"
+	"net/http"
+	"strconv"
+)
+
+type transactionHandler struct {
+	transactionService service.OrderServices
+}
+
+func NewTransactionHandler(transactionService service.OrderServices) *transactionHandler {
+	return &transactionHandler{transactionService}
+}
+
+func (h *transactionHandler) CreateTransaction(c *gin.Context) {
+	// input from user
+	var input input.TransactionInput
+
+	// binding input
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Create transaction failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	// create transaction
+	newTransaction, err := h.transactionService.CreateTransaction(input)
+	if err != nil {
+		response := helper.APIResponse("Create transaction failed", http.StatusBadRequest, "error", err.Error())
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success create transaction", http.StatusCreated, "success", formatter.FormatTransaction(newTransaction))
+	c.JSON(http.StatusCreated, response)
+}
+
+func (h *transactionHandler) GetTransaction(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Get transaction failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	transaction, err := h.transactionService.GetTransaction(id)
+	if err != nil {
+		response := helper.APIResponse("Get transaction failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get transaction", http.StatusOK, "success", formatter.FormatTransaction(transaction))
+	c.JSON(http.StatusOK, response)
+}
diff --git a/input/transaction.go b/input/transaction.go
new file mode 100644
index 0000000..fa3a877
--- /dev/null
+++ b/input/transaction.go
@@ -0,0 +1,7 @@
+package input
+
+type TransactionInput struct {
+	ProductID int     `json:"product_id"`
+	Qty       int     `json:"qty"`
+	Amount    float32 `json:"amount"`
+}
diff --git a/main.go b/main.go
index 374d7b5..d0b7389 100644
--- a/main.go
+++ b/main.go
@@ -41,6 +41,7 @@ func main() {
 	supplierRepository := repository.NewSupplierRepository(db)
 	discountRepository := repository.NewDiscountRepository(db)
 	stockRepository := repository.NewStockRepository(db)
+	transactionRepository := repository.NewOrderRepository(db)
 
 	userService := service.NewService(userRepository)
 	categoryService := service.NewCategoryService(categoryRepository)
@@ -49,6 +50,7 @@ func main() {
 	supplierService := service.NewSupplierService(supplierRepository)
 	discountService := service.NewDiscountService(discountRepository)
 	stockService := service.NewStockService(stockRepository)
+	transactionService := service.NewOrderService(transactionRepository)
 	authService := auth.NewService()
 
 	userHandler := handler.NewUserHandler(userService, authService)
@@ -58,6 +60,7 @@ func main() {
 	supplierHandler := handler.NewSupplierHandler(supplierService)
 	discountHandler := handler.NewDiscountHandler(discountService)
 	stockHandler := handler.NewStockHandler(stockService)
+	transactionHandler := handler.NewTransactionHandler(transactionService)
 	router := gin.Default()
 
 	api := router.Group("/api/v1")
@@ -69,6 +72,7 @@ func main() {
 	api.POST("/customers", customerHandler.CreateCustomer)
 	api.POST("/suppliers", supplierHandler.CreateSupplier)
 	api.POST("/discounts", discountHandler.CreateDiscount)
+	api.POST("/transactions", transactionHandler.CreateTransaction)
 
 	api.GET("/categories", categoryHandler.GetCategories)
 	api.GET("/categories/:id", categoryHandler.GetCategoryById)
@@ -81,6 +85,7 @@ func main() {
 	api.GET("/discounts", discountHandler.GetDiscounts)
 	api.GET("/discounts/:id", discountHandler.GetDiscountById)
 	api.GET("/category-products/:id", categoryHandler.GetCategoryProducts)
+	api.GET("/transactions/:id", transactionHandler.GetTransaction)
 
 	api.PUT("/categories/:id", categoryHandler.UpdateCategory)
 	api.PUT("/products/:id", productHandler.UpdateProduct)
diff --git a/models/transaction.go b/models/transaction.go
new file mode 100644
index 0000000..4efa069
--- /dev/null
+++ b/models/transaction.go
@@ -0,0 +1,13 @@
+package models
+
+import "time"
+
+type Transaction struct {
+	ID        int `gorm:"primaryKey;autoIncrement"`
+	ProductID int `gorm:"index;column:id_product"`
+	Qty       int
+	Amount    float32
+	CreatedAt time.Time
+	UpdatedAt time.Time `gorm:"autoUpdateTime"`
+	Product   Product   `gorm:"foreignKey:ProductID;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`
+}
diff --git a/repository/transaction.go b/repository/transaction.go
new file mode 100644
index 0000000..0eae970
--- /dev/null
+++ b/repository/transaction.go
@@ -0,0 +1,49 @@
+package repository
+
+import (
+	"api-kasirapp/models"
+	"gorm.io/gorm"
+)
+
+type OrderRepository interface {
+	Create(data *models.Transaction) (*models.Transaction, error)
+	GetByID(ID int) (*models.Transaction, error)
+}
+
+type orderRepository struct {
+	db *gorm.DB
+}
+
+func NewOrderRepository(db *gorm.DB) *orderRepository {
+	return &orderRepository{db}
+}
+
+func (r *orderRepository) Create(data *models.Transaction) (*models.Transaction, error){
+	tx := r.db.Begin()
+	defer func() {
+		if r := recover(); r != nil {
+			tx.Rollback()
+		} else if tx.Error != nil {
+			tx.Rollback()
+		}
+	}()
+
+	if err := tx.Create(data).Error; err != nil {
+		tx.Rollback()
+		return data, err
+	}
+
+	tx.Commit()
+
+	return data, nil
+}
+
+func (r *orderRepository) GetByID(ID int) (*models.Transaction, error) {
+	var data models.Transaction
+
+	if err := r.db.Debug().Preload("Product").Model(&models.Transaction{}).Where("id = ?", ID).Find(&data).Error; err != nil {
+		return nil, err
+	}
+
+	return &data, nil
+}
diff --git a/service/transaction.go b/service/transaction.go
new file mode 100644
index 0000000..ef0b572
--- /dev/null
+++ b/service/transaction.go
@@ -0,0 +1,51 @@
+package service
+
+import (
+	"api-kasirapp/input"
+	"api-kasirapp/models"
+	"api-kasirapp/repository"
+	"errors"
+	"gorm.io/gorm"
+)
+
+type OrderServices interface {
+	CreateTransaction(input input.TransactionInput) (*models.Transaction, error)
+	GetTransaction(ID int) (*models.Transaction, error)
+	// HandleSentEmail(data []byte) error
+	// HandleLogging(data []byte) error
+	// HandleCallback(notificationPayload map[string]interface{}) error
+}
+
+type orderService struct {
+	orderRepository repository.OrderRepository
+}
+
+func NewOrderService(orderRepository repository.OrderRepository) *orderService {
+	return &orderService{orderRepository}
+}
+
+func (s *orderService) CreateTransaction(input input.TransactionInput) (*models.Transaction, error) {
+	data := models.Transaction{}
+	data.ProductID = input.ProductID
+	data.Qty = input.Qty
+	data.Amount = input.Amount
+
+	newData, err := s.orderRepository.Create(&data)
+	if err != nil {
+		return newData, err
+	}
+
+	return newData, nil
+}
+
+func (s *orderService) GetTransaction(ID int) (*models.Transaction, error) {
+	data, err := s.orderRepository.GetByID(ID)
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return data, errors.New("category not found")
+		}
+		return data, err
+	}
+
+	return data, nil
+}
----------------------------------------------------


----------------------------------------------------
Commit: bdf1faf
Author: argadhana
Date: 2024-11-03
Message: change env secret key
Changes:
commit bdf1faf6e04f1d193ca4b233ca0dfebd4ddac09c
Author: argadhana <yoshspecta333@gmail.com>
Date:   Sun Nov 3 11:56:43 2024 +0700

    change env secret key

 auth/service.go | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

Full Diff:
commit bdf1faf6e04f1d193ca4b233ca0dfebd4ddac09c
Author: argadhana <yoshspecta333@gmail.com>
Date:   Sun Nov 3 11:56:43 2024 +0700

    change env secret key

diff --git a/auth/service.go b/auth/service.go
index 30546de..de6e547 100644
--- a/auth/service.go
+++ b/auth/service.go
@@ -2,6 +2,7 @@ package auth
 
 import (
 	"errors"
+	"os"
 
 	"github.com/golang-jwt/jwt/v5"
 )
@@ -14,7 +15,7 @@ type Service interface {
 type jwtService struct {
 }
 
-var SECRET_KEY = []byte("BWASTARTUP_s3cr3T_k3Y")
+var SECRET_KEY = os.Getenv("SECRET_KEY")
 
 func NewService() *jwtService {
 	return &jwtService{}
----------------------------------------------------


----------------------------------------------------
Commit: 141728e
Author: argadhana
Date: 2024-11-03
Message: api stock, import export product
Changes:
commit 141728e375cb545bb53a3787f7953d8731e6da6c
Author: argadhana <yoshspecta333@gmail.com>
Date:   Sun Nov 3 11:54:18 2024 +0700

    api stock, import export product

 formatter/stock.go     |  52 +++++++++------------
 go.mod                 |   6 +++
 go.sum                 |  13 ++++++
 handler/product.go     |  44 ++++++++++++++++++
 handler/stock.go       |  58 ++++++++++++++++++++++++
 input/stock.go         |  14 +++---
 main.go                |  10 +++++
 models/stock_entity.go |  13 +++---
 repository/product.go  |   3 +-
 repository/stock.go    |  38 ++++++++++++++++
 service/product.go     | 119 +++++++++++++++++++++++++++++++++++++++++++++++++
 service/stock.go       |  56 +++++++++++++++++++++++
 12 files changed, 383 insertions(+), 43 deletions(-)

Full Diff:
commit 141728e375cb545bb53a3787f7953d8731e6da6c
Author: argadhana <yoshspecta333@gmail.com>
Date:   Sun Nov 3 11:54:18 2024 +0700

    api stock, import export product

diff --git a/formatter/stock.go b/formatter/stock.go
index dbf9c86..818dabd 100644
--- a/formatter/stock.go
+++ b/formatter/stock.go
@@ -1,38 +1,30 @@
 package formatter
 
-import "api-kasirapp/models"
+import (
+	"api-kasirapp/models"
+	"fmt"
+)
 
-type StockFormatter struct {
-	ID           int     `json:"id"`
-	ProductName  string  `json:"product_name"`
-	CodeProduct  string  `json:"code_product"`
-	CategoryName string  `json:"category"`
-	Stock        int     `json:"stock"`
-	SellingPrice float64 `json:"selling_price"`
-	BasePrice    float64 `json:"base_price"`
-	Date         string  `json:"date"`
-	BuyingPrice  float64 `json:"buying_price"`
-	Amount       int     `json:"amount"`
-	Information  string  `json:"information"`
-	CreatedAt    string  `json:"created_at"`
-	UpdatedAt    string  `json:"updated_at"`
+type StockResponse struct {
+	ID           int    `json:"id"`
+	ProductID    int    `json:"product_id"`
+	ProductName  string `json:"product_name"`
+	Quantity     int    `json:"quantity"`
+	BasePrice    string `json:"base_price"`
+	SellingPrice string `json:"selling_price"`
+	Date         string `json:"date"`
+	Description  string `json:"description"`
 }
 
-func FormatStock(stock models.Stock) StockFormatter {
-	formatter := StockFormatter{
+func FormatStockResponse(stock models.Stock) StockResponse {
+	return StockResponse{
 		ID:           stock.ID,
-		ProductName:  stock.ProductName,
-		CodeProduct:  stock.CodeProduct,
-		CategoryName: stock.CategoryName,
-		Stock:        stock.Stock,
-		SellingPrice: stock.SellingPrice,
-		BasePrice:    stock.BasePrice,
-		Date:         stock.Date,
-		BuyingPrice:  stock.BuyingPrice,
-		Amount:       stock.Amount,
-		Information:  stock.Information,
-		CreatedAt:    stock.CreatedAt.String(),
-		UpdatedAt:    stock.UpdatedAt.String(),
+		ProductID:    stock.ProductID,
+		ProductName:  stock.Product.Name,
+		Quantity:     stock.Quantity,
+		BasePrice:    fmt.Sprintf("%.2f", stock.BasePrice),
+		SellingPrice: fmt.Sprintf("%.2f", stock.SellingPrice),
+		Date:         stock.Date.Format("2006-01-02"),
+		Description:  stock.Description,
 	}
-	return formatter
 }
diff --git a/go.mod b/go.mod
index fa33241..81912e0 100644
--- a/go.mod
+++ b/go.mod
@@ -36,9 +36,15 @@ require (
 	github.com/mattn/go-isatty v0.0.20 // indirect
 	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
 	github.com/modern-go/reflect2 v1.0.2 // indirect
+	github.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 // indirect
 	github.com/pelletier/go-toml/v2 v2.2.3 // indirect
+	github.com/richardlehane/mscfb v1.0.4 // indirect
+	github.com/richardlehane/msoleps v1.0.4 // indirect
 	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
 	github.com/ugorji/go/codec v1.2.12 // indirect
+	github.com/xuri/efp v0.0.0-20240408161823-9ad904a10d6d // indirect
+	github.com/xuri/excelize/v2 v2.9.0 // indirect
+	github.com/xuri/nfp v0.0.0-20240318013403-ab9948c2c4a7 // indirect
 	golang.org/x/arch v0.11.0 // indirect
 	golang.org/x/exp v0.0.0-20241009180824-f66d83c29e7c // indirect
 	golang.org/x/net v0.30.0 // indirect
diff --git a/go.sum b/go.sum
index b539fe6..dbde206 100644
--- a/go.sum
+++ b/go.sum
@@ -56,10 +56,17 @@ github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w
 github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
 github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
 github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
+github.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 h1:RWengNIwukTxcDr9M+97sNutRR1RKhG96O6jWumTTnw=
+github.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826/go.mod h1:TaXosZuwdSHYgviHp1DAtfrULt5eUgsSMsZf+YrPgl8=
 github.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=
 github.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=
 github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/richardlehane/mscfb v1.0.4 h1:WULscsljNPConisD5hR0+OyZjwK46Pfyr6mPu5ZawpM=
+github.com/richardlehane/mscfb v1.0.4/go.mod h1:YzVpcZg9czvAuhk9T+a3avCpcFPMUWm7gK3DypaEsUk=
+github.com/richardlehane/msoleps v1.0.1/go.mod h1:BWev5JBpU9Ko2WAgmZEuiz4/u3ZYTKbjLycmwiWUfWg=
+github.com/richardlehane/msoleps v1.0.4 h1:WuESlvhX3gH2IHcd8UqyCuFY5yiq/GR/yqaSM/9/g00=
+github.com/richardlehane/msoleps v1.0.4/go.mod h1:BWev5JBpU9Ko2WAgmZEuiz4/u3ZYTKbjLycmwiWUfWg=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
 github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
@@ -75,6 +82,12 @@ github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS
 github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
 github.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=
 github.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
+github.com/xuri/efp v0.0.0-20240408161823-9ad904a10d6d h1:llb0neMWDQe87IzJLS4Ci7psK/lVsjIS2otl+1WyRyY=
+github.com/xuri/efp v0.0.0-20240408161823-9ad904a10d6d/go.mod h1:ybY/Jr0T0GTCnYjKqmdwxyxn2BQf2RcQIIvex5QldPI=
+github.com/xuri/excelize/v2 v2.9.0 h1:1tgOaEq92IOEumR1/JfYS/eR0KHOCsRv/rYXXh6YJQE=
+github.com/xuri/excelize/v2 v2.9.0/go.mod h1:uqey4QBZ9gdMeWApPLdhm9x+9o2lq4iVmjiLfBS5hdE=
+github.com/xuri/nfp v0.0.0-20240318013403-ab9948c2c4a7 h1:hPVCafDV85blFTabnqKgNhDCkJX25eik94Si9cTER4A=
+github.com/xuri/nfp v0.0.0-20240318013403-ab9948c2c4a7/go.mod h1:WwHg+CVyzlv/TX9xqBFXEZAuxOPxn2k1GNHwG41IIUQ=
 golang.org/x/arch v0.11.0 h1:KXV8WWKCXm6tRpLirl2szsO5j/oOODwZf4hATmGVNs4=
 golang.org/x/arch v0.11.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=
 golang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=
diff --git a/handler/product.go b/handler/product.go
index b1fe39b..436c8f9 100644
--- a/handler/product.go
+++ b/handler/product.go
@@ -6,6 +6,7 @@ import (
 	"api-kasirapp/input"
 	"api-kasirapp/service"
 	"net/http"
+	"os"
 	"strconv"
 
 	"github.com/gin-gonic/gin"
@@ -130,3 +131,46 @@ func (h *productHandler) DeleteProduct(c *gin.Context) {
 	response := helper.APIResponse("Success delete product", http.StatusOK, "success", formatter.FormatProduct(deleteProduct))
 	c.JSON(http.StatusOK, response)
 }
+
+func (h *productHandler) ExportProducts(c *gin.Context) {
+	file, err := h.productService.ExportProductsToXLS()
+	if err != nil {
+		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
+		return
+	}
+
+	// Set headers for file download
+	c.Header("Content-Disposition", `attachment; filename="products.xlsx"`)
+	c.Header("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
+
+	// Stream file to response
+	file.Write(c.Writer)
+}
+
+func (h *productHandler) ImportProducts(c *gin.Context) {
+	// Get the uploaded file
+	file, err := c.FormFile("file")
+	if err != nil {
+		response := helper.APIResponse("Import products failed", http.StatusBadRequest, "error", gin.H{"message": "file not found"})
+		c.JSON(http.StatusBadRequest, response)
+	}
+
+	// Save the file to a temporary location
+	filePath := "./temp_" + file.Filename
+	if err := c.SaveUploadedFile(file, filePath); err != nil {
+		response := helper.APIResponse("Import products failed", http.StatusInternalServerError, "error", gin.H{"message": "failed to save file"})
+		c.JSON(http.StatusInternalServerError, response)
+		return
+	}
+	defer os.Remove(filePath) // Remove the file after processing
+
+	// Call the import service
+	if err := h.productService.ImportProductsFromXLS(filePath); err != nil {
+		response := helper.APIResponse("Import products failed", http.StatusInternalServerError, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusInternalServerError, response)
+		return
+	}
+
+	response := helper.APIResponse("Success import products", http.StatusOK, "success", nil)
+	c.JSON(http.StatusOK, response)
+}
diff --git a/handler/stock.go b/handler/stock.go
index abeebd1..52402be 100644
--- a/handler/stock.go
+++ b/handler/stock.go
@@ -1 +1,59 @@
+// handler/stock_handler.go
 package handler
+
+import (
+	"api-kasirapp/input"
+	"api-kasirapp/service"
+	"net/http"
+	"strconv"
+
+	"github.com/gin-gonic/gin"
+)
+
+type StockHandler struct {
+	stockService service.StockService
+}
+
+func NewStockHandler(stockService service.StockService) *StockHandler {
+	return &StockHandler{stockService}
+}
+
+func (h *StockHandler) AddStock(c *gin.Context) {
+	var input input.CreateStockInput
+	if err := c.ShouldBindJSON(&input); err != nil {
+		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
+		return
+	}
+
+	newStock, err := h.stockService.AddStock(input)
+	if err != nil {
+		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
+		return
+	}
+
+	c.JSON(http.StatusOK, gin.H{"data": newStock})
+}
+
+func (h *StockHandler) GetStocks(c *gin.Context) {
+	stocks, err := h.stockService.GetStocks()
+	if err != nil {
+		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
+		return
+	}
+
+	c.JSON(http.StatusOK, gin.H{"data": stocks})
+}
+
+func (h *StockHandler) GetStocksByProductID(c *gin.Context) {
+	productID := c.Param("productID")
+
+	productIDInt, err := strconv.Atoi(productID)
+
+	stocks, err := h.stockService.GetStocksByProductID(productIDInt)
+	if err != nil {
+		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
+		return
+	}
+
+	c.JSON(http.StatusOK, gin.H{"data": stocks})
+}
diff --git a/input/stock.go b/input/stock.go
index 3bc1786..fb2566d 100644
--- a/input/stock.go
+++ b/input/stock.go
@@ -1,8 +1,12 @@
 package input
 
-type StockInput struct {
-	Date        string  `json:"date"`
-	BuyingPrice float64 `json:"buying_price"`
-	Amount      int     `json:"amount"`
-	Information string  `json:"information"`
+import "time"
+
+type CreateStockInput struct {
+	ProductID    int       `json:"product_id" binding:"required"`
+	Quantity     int       `json:"quantity" binding:"required"`
+	BasePrice    float64   `json:"base_price" binding:"required"`
+	SellingPrice float64   `json:"selling_price" binding:"required"`
+	Date         time.Time `json:"date" binding:"required"`
+	Description  string    `json:"description"`
 }
diff --git a/main.go b/main.go
index c0d3f2e..374d7b5 100644
--- a/main.go
+++ b/main.go
@@ -40,6 +40,7 @@ func main() {
 	customerRepository := repository.NewCustomerRepository(db)
 	supplierRepository := repository.NewSupplierRepository(db)
 	discountRepository := repository.NewDiscountRepository(db)
+	stockRepository := repository.NewStockRepository(db)
 
 	userService := service.NewService(userRepository)
 	categoryService := service.NewCategoryService(categoryRepository)
@@ -47,6 +48,7 @@ func main() {
 	customersService := service.NewCustomerService(customerRepository)
 	supplierService := service.NewSupplierService(supplierRepository)
 	discountService := service.NewDiscountService(discountRepository)
+	stockService := service.NewStockService(stockRepository)
 	authService := auth.NewService()
 
 	userHandler := handler.NewUserHandler(userService, authService)
@@ -55,6 +57,7 @@ func main() {
 	customerHandler := handler.NewCustomerHandler(customersService)
 	supplierHandler := handler.NewSupplierHandler(supplierService)
 	discountHandler := handler.NewDiscountHandler(discountService)
+	stockHandler := handler.NewStockHandler(stockService)
 	router := gin.Default()
 
 	api := router.Group("/api/v1")
@@ -91,6 +94,13 @@ func main() {
 	api.DELETE("/suppliers/:id", supplierHandler.DeleteSupplier)
 	api.DELETE("/discounts/:id", discountHandler.DeleteDiscount)
 
+	api.POST("/stocks", stockHandler.AddStock)
+	api.GET("/stocks", stockHandler.GetStocks)
+	api.GET("/stocks/:productID", stockHandler.GetStocksByProductID)
+
+	api.GET("/export/products", productHandler.ExportProducts)
+	api.POST("/import/products", productHandler.ImportProducts)
+
 	router.Run()
 }
 
diff --git a/models/stock_entity.go b/models/stock_entity.go
index f0f7257..ceacc8f 100644
--- a/models/stock_entity.go
+++ b/models/stock_entity.go
@@ -4,10 +4,11 @@ import "time"
 
 type Stock struct {
 	ID           int       `json:"id"`
-	Date         string    `json:"date"`
-	BuyingPrice  float64   `json:"buying_price"`
-	Amount       int       `json:"amount"`
-	Information  string    `json:"information"`
-	CreatedAt    time.Time `json:"created_at"`
-	UpdatedAt    time.Time `json:"updated_at"`
+	ProductID    int       `json:"product_id"`
+	Quantity     int       `json:"quantity"`
+	BasePrice    float64   `json:"base_price"`
+	SellingPrice float64   `json:"selling_price"`
+	Date         time.Time `json:"date"`
+	Description  string    `json:"description"`
+	Product      Product   `json:"product" gorm:"foreignKey:ProductID"`
 }
diff --git a/repository/product.go b/repository/product.go
index 12a6f6d..e3fddd2 100644
--- a/repository/product.go
+++ b/repository/product.go
@@ -79,10 +79,9 @@ func (r *productRepository) FindByName(name string) (models.Product, error) {
 
 func (r *productRepository) FindAll() ([]models.Product, error) {
 	var products []models.Product
-
 	err := r.db.Find(&products).Error
 	if err != nil {
-		return products, err
+		return nil, err
 	}
 	return products, nil
 }
diff --git a/repository/stock.go b/repository/stock.go
index 50a4378..89ffabf 100644
--- a/repository/stock.go
+++ b/repository/stock.go
@@ -1 +1,39 @@
+// repository/stock_repository.go
 package repository
+
+import (
+	"api-kasirapp/models"
+
+	"gorm.io/gorm"
+)
+
+type StockRepository interface {
+	Create(stock models.Stock) (models.Stock, error)
+	GetAll() ([]models.Stock, error)
+	GetByProductID(productID int) ([]models.Stock, error)
+}
+
+type stockRepository struct {
+	db *gorm.DB
+}
+
+func NewStockRepository(db *gorm.DB) *stockRepository {
+	return &stockRepository{db}
+}
+
+func (r *stockRepository) Create(stock models.Stock) (models.Stock, error) {
+	err := r.db.Create(&stock).Error
+	return stock, err
+}
+
+func (r *stockRepository) GetAll() ([]models.Stock, error) {
+	var stocks []models.Stock
+	err := r.db.Preload("Product").Find(&stocks).Error
+	return stocks, err
+}
+
+func (r *stockRepository) GetByProductID(productID int) ([]models.Stock, error) {
+	var stocks []models.Stock
+	err := r.db.Where("product_id = ?", productID).Preload("Product").Find(&stocks).Error
+	return stocks, err
+}
diff --git a/service/product.go b/service/product.go
index 355d21f..7933fa5 100644
--- a/service/product.go
+++ b/service/product.go
@@ -4,6 +4,11 @@ import (
 	"api-kasirapp/input"
 	"api-kasirapp/models"
 	"api-kasirapp/repository"
+	"errors"
+	"fmt"
+	"github.com/xuri/excelize/v2"
+	"strconv"
+	"time"
 )
 
 type ProductService interface {
@@ -13,6 +18,8 @@ type ProductService interface {
 	FindAll() ([]models.Product, error)
 	UpdateProduct(ID int, input input.ProductInput) (models.Product, error)
 	DeleteProduct(ID int) (models.Product, error)
+	ExportProductsToXLS() (*excelize.File, error)
+	ImportProductsFromXLS(filePath string) error
 }
 
 type productService struct {
@@ -114,3 +121,115 @@ func (s *productService) DeleteProduct(ID int) (models.Product, error) {
 
 	return deletedProduct, nil
 }
+
+func (s *productService) ExportProductsToXLS() (*excelize.File, error) {
+	// Fetch products from the database
+	products, err := s.productRepository.FindAll()
+	if err != nil {
+		return nil, err
+	}
+
+	fmt.Printf("Number of products retrieved: %d\n", len(products))
+
+	if len(products) == 0 {
+		return nil, errors.New("no products found to export")
+	}
+
+	// Create a new Excel file
+	f := excelize.NewFile()
+	sheet := "Products"
+	index, err := f.NewSheet(sheet)
+	if err != nil {
+		return nil, err
+	}
+
+	// Write headers
+	headers := []string{"ID", "Name", "Product Type", "Base Price", "Selling Price", "Stock", "Code Product", "Category ID", "Minimum Stock", "Shelf", "Weight", "Discount", "Information", "Created At", "Updated At"}
+	for i, header := range headers {
+		cell := string(rune('A'+i)) + "1"
+		f.SetCellValue(sheet, cell, header)
+	}
+
+	// Write product data
+	for i, product := range products {
+		row := i + 2
+		fmt.Printf("Writing product %d to row %d\n", product.ID, row) // Debugging output
+
+		f.SetCellValue(sheet, "A"+strconv.Itoa(row), product.ID)
+		f.SetCellValue(sheet, "B"+strconv.Itoa(row), product.Name)
+		f.SetCellValue(sheet, "C"+strconv.Itoa(row), product.ProductType)
+		f.SetCellValue(sheet, "D"+strconv.Itoa(row), product.BasePrice)
+		f.SetCellValue(sheet, "E"+strconv.Itoa(row), product.SellingPrice)
+		f.SetCellValue(sheet, "F"+strconv.Itoa(row), product.Stock)
+		f.SetCellValue(sheet, "G"+strconv.Itoa(row), product.CodeProduct)
+		f.SetCellValue(sheet, "H"+strconv.Itoa(row), product.CategoryID)
+		f.SetCellValue(sheet, "I"+strconv.Itoa(row), product.MinimumStock)
+		f.SetCellValue(sheet, "J"+strconv.Itoa(row), product.Shelf)
+		f.SetCellValue(sheet, "K"+strconv.Itoa(row), product.Weight)
+		f.SetCellValue(sheet, "L"+strconv.Itoa(row), product.Discount)
+		f.SetCellValue(sheet, "M"+strconv.Itoa(row), product.Information)
+		f.SetCellValue(sheet, "N"+strconv.Itoa(row), product.CreatedAt.Format(time.RFC3339))
+		f.SetCellValue(sheet, "O"+strconv.Itoa(row), product.UpdatedAt.Format(time.RFC3339))
+	}
+
+	// Set active sheet and delete the default sheet
+	f.SetActiveSheet(index)
+	f.DeleteSheet("Sheet1")
+
+	return f, nil
+}
+
+func (s *productService) ImportProductsFromXLS(filePath string) error {
+	// Open the Excel file
+	f, err := excelize.OpenFile(filePath)
+	if err != nil {
+		return err
+	}
+	defer f.Close()
+
+	// Read data from the first sheet
+	sheet := "Products"
+	rows, err := f.GetRows(sheet)
+	if err != nil {
+		return err
+	}
+
+	// Skip the header row
+	for i, row := range rows {
+		if i == 0 {
+			continue
+		}
+
+		// Parse each column into product fields
+		basePrice, _ := strconv.ParseFloat(row[3], 64)
+		sellingPrice, _ := strconv.ParseFloat(row[4], 64)
+		stock, _ := strconv.Atoi(row[5])
+		categoryID, _ := strconv.Atoi(row[7])
+		minimumStock, _ := strconv.Atoi(row[8])
+		weight, _ := strconv.Atoi(row[10])
+		discount, _ := strconv.Atoi(row[11])
+
+		product := models.Product{
+			Name:         row[1],
+			ProductType:  row[2],
+			BasePrice:    basePrice,
+			SellingPrice: sellingPrice,
+			Stock:        stock,
+			CodeProduct:  row[6],
+			CategoryID:   categoryID,
+			MinimumStock: minimumStock,
+			Shelf:        row[9],
+			Weight:       weight,
+			Discount:     discount,
+			Information:  row[12],
+		}
+
+		// Insert product into database
+		_, err := s.productRepository.Save(product)
+		if err != nil {
+			return err
+		}
+	}
+
+	return nil
+}
diff --git a/service/stock.go b/service/stock.go
index 6d43c33..d554c10 100644
--- a/service/stock.go
+++ b/service/stock.go
@@ -1 +1,57 @@
+// service/stock_service.go
 package service
+
+import (
+	"api-kasirapp/input"
+	"api-kasirapp/models"
+	"api-kasirapp/repository"
+	"errors"
+)
+
+type StockService interface {
+	AddStock(input input.CreateStockInput) (models.Stock, error)
+	GetStocks() ([]models.Stock, error)
+	GetStocksByProductID(productID int) ([]models.Stock, error)
+}
+
+type stockService struct {
+	repository repository.StockRepository
+}
+
+func NewStockService(repository repository.StockRepository) *stockService {
+	return &stockService{repository}
+}
+
+func (s *stockService) AddStock(input input.CreateStockInput) (models.Stock, error) {
+	stock := models.Stock{
+		ProductID:    input.ProductID,
+		Quantity:     input.Quantity,
+		BasePrice:    input.BasePrice,
+		SellingPrice: input.SellingPrice,
+		Date:         input.Date,
+		Description:  input.Description,
+	}
+
+	newStock, err := s.repository.Create(stock)
+	if err != nil {
+		return models.Stock{}, err
+	}
+
+	return newStock, nil
+}
+
+func (s *stockService) GetStocks() ([]models.Stock, error) {
+	return s.repository.GetAll()
+}
+
+func (s *stockService) GetStocksByProductID(productID int) ([]models.Stock, error) {
+	stocks, err := s.repository.GetByProductID(productID)
+	if err != nil {
+		return []models.Stock{}, err
+	}
+	if len(stocks) == 0 {
+		return []models.Stock{}, errors.New("no stock found for the given product")
+	}
+	return stocks, nil
+}
+
----------------------------------------------------


----------------------------------------------------
Commit: 56da62e
Author: argadhana
Date: 2024-11-03
Message: Api Setup
Changes:
commit 56da62e9756a0b38acb54fadc800e3c659b8e70c
Author: argadhana <yoshspecta333@gmail.com>
Date:   Sun Nov 3 02:12:38 2024 +0700

    Api Setup

 .gitignore                |    1 +
 .idea/.gitignore          |    8 +
 .idea/api-kasirapp.iml    |    9 +
 .idea/aws.xml             |   11 +
 .idea/modules.xml         |    8 +
 .idea/vcs.xml             |    7 +
 Database/database.go      |   31 +
 auth/service.go           |   53 ++
 docs/apispecs.json        | 2141 +++++++++++++++++++++++++++++++++++++++++++++
 formatter/category.go     |   62 ++
 formatter/customer.go     |   35 +
 formatter/discount.go     |   32 +
 formatter/product.go      |   53 ++
 formatter/stock.go        |   38 +
 formatter/supplier.go     |   36 +
 formatter/user.go         |   22 +
 go.mod                    |   50 ++
 go.sum                    |  111 +++
 handler/category.go       |  163 ++++
 handler/customer.go       |  142 +++
 handler/discount.go       |  128 +++
 handler/product.go        |  132 +++
 handler/stock.go          |    1 +
 handler/supplier.go       |  141 +++
 handler/user.go           |  129 +++
 helper/helper.go          |   60 ++
 input/category.go         |    5 +
 input/customer.go         |    8 +
 input/discount.go         |    6 +
 input/product.go          |   16 +
 input/stock.go            |    8 +
 input/supplier.go         |    8 +
 input/user.go             |   17 +
 main.go                   |  145 +++
 models/category_entity.go |   11 +
 models/customer_entity.go |   13 +
 models/discount_entity.go |   11 +
 models/product_entity.go  |   23 +
 models/stock_entity.go    |   13 +
 models/supplier_entity.go |   14 +
 models/user_entity.go     |   14 +
 repository/category.go    |   95 ++
 repository/customer.go    |   80 ++
 repository/discount.go    |   93 ++
 repository/product.go     |  110 +++
 repository/stock.go       |    1 +
 repository/supplier.go    |   80 ++
 repository/user.go        |  100 +++
 service/category.go       |  101 +++
 service/customer.go       |  109 +++
 service/discount.go       |   80 ++
 service/product.go        |  116 +++
 service/stock.go          |    1 +
 service/supplier.go       |  109 +++
 service/user.go           |  124 +++
 55 files changed, 5115 insertions(+)

Full Diff:
commit 56da62e9756a0b38acb54fadc800e3c659b8e70c
Author: argadhana <yoshspecta333@gmail.com>
Date:   Sun Nov 3 02:12:38 2024 +0700

    Api Setup

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..2eea525
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+.env
\ No newline at end of file
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000..13566b8
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
diff --git a/.idea/api-kasirapp.iml b/.idea/api-kasirapp.iml
new file mode 100644
index 0000000..5e764c4
--- /dev/null
+++ b/.idea/api-kasirapp.iml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="Go" enabled="true" />
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/aws.xml b/.idea/aws.xml
new file mode 100644
index 0000000..b63b642
--- /dev/null
+++ b/.idea/aws.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="accountSettings">
+    <option name="activeRegion" value="us-east-1" />
+    <option name="recentlyUsedRegions">
+      <list>
+        <option value="us-east-1" />
+      </list>
+    </option>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..58be469
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/api-kasirapp.iml" filepath="$PROJECT_DIR$/.idea/api-kasirapp.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..fdf1fc8
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/Database/database.go b/Database/database.go
new file mode 100644
index 0000000..9209585
--- /dev/null
+++ b/Database/database.go
@@ -0,0 +1,31 @@
+package Database
+
+import (
+	"fmt"
+	"gorm.io/driver/postgres"
+	"gorm.io/gorm"
+	"os"
+)
+
+var Database *gorm.DB
+
+func Connect() {
+
+	var err error
+
+	host := os.Getenv("DB_HOST")
+	username := os.Getenv("DB_USER")
+	password := os.Getenv("DB_PASSWORD")
+	databaseName := os.Getenv("DB_NAME")
+	port := os.Getenv("DB_PORT")
+
+	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Africa/Lagos", host, username, password, databaseName, port)
+	Database, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
+
+	if err != nil {
+		panic("Failed to connect to database!")
+	}
+
+	fmt.Println("Database connection established")
+
+}
diff --git a/auth/service.go b/auth/service.go
new file mode 100644
index 0000000..30546de
--- /dev/null
+++ b/auth/service.go
@@ -0,0 +1,53 @@
+package auth
+
+import (
+	"errors"
+
+	"github.com/golang-jwt/jwt/v5"
+)
+
+type Service interface {
+	GenerateToken(userID int) (string, error)
+	ValidateToken(encodedToken string) (*jwt.Token, error)
+}
+
+type jwtService struct {
+}
+
+var SECRET_KEY = []byte("BWASTARTUP_s3cr3T_k3Y")
+
+func NewService() *jwtService {
+	return &jwtService{}
+}
+
+func (s *jwtService) GenerateToken(userID int) (string, error) {
+	claim := jwt.MapClaims{}
+	claim["user_id"] = userID
+
+	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claim)
+	signedToken, err := token.SignedString(SECRET_KEY)
+	if err != nil {
+		return signedToken, err
+	}
+
+	return signedToken, nil
+}
+
+func (s *jwtService) ValidateToken(encodedToken string) (*jwt.Token, error) {
+	token, err := jwt.Parse(encodedToken, func(token *jwt.Token) (interface{}, error) {
+
+		_, ok := token.Method.(*jwt.SigningMethodHMAC)
+
+		if !ok {
+			return nil, errors.New("invalid Token")
+		}
+
+		return []byte(SECRET_KEY), nil
+	})
+
+	if err != nil {
+		return token, err
+	}
+
+	return token, nil
+}
diff --git a/docs/apispecs.json b/docs/apispecs.json
new file mode 100644
index 0000000..9eac00a
--- /dev/null
+++ b/docs/apispecs.json
@@ -0,0 +1,2141 @@
+{
+    "openapi": "3.0.3",
+    "info": {
+        "title": "Kasir App",
+        "description": "Kasir App API",
+        "version": "1.0.0"
+    },
+    "servers": [
+        {
+            "url": "http://localhost:8080/v1"
+        }
+    ],
+    "paths": {
+        "/user": {
+            "get": {
+                "tags": [
+                    "User API"
+                ],
+                "description": "Get User",
+                "summary": "Get User",
+                "operationId": "getUser",
+                "responses": {
+                    "200": {
+                        "description": "OK",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "id": {
+                                                        "type": "number"
+                                                    },
+                                                    "name": {
+                                                        "type": "string"
+                                                    },
+                                                    "email": {
+                                                        "type": "string"
+                                                    },
+                                                    "phone": {
+                                                        "type": "number"
+                                                    },
+                                                    "created_at": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/user/register": {
+            "post": {
+                "tags": [
+                    "User API"
+                ],
+                "description": "Register User",
+                "summary": "Register User",
+                "operationId": "registerUser",
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "email": {
+                                        "type": "string",
+                                        "format": "email"
+                                    },
+                                    "phone": {
+                                        "type": "number",
+                                        "pattern": "^08[0-9]{9,}$"
+                                    },
+                                    "password": {
+                                        "type": "string"
+                                    },
+                                    "confirm_password": {
+                                        "type": "string"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "201": {
+                        "description": "Created",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "$ref": "#/components/schemas/user_response"
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/user/login": {
+            "post": {
+                "tags": [
+                    "User API"
+                ],
+                "description": "Login User",
+                "summary": "Login User",
+                "operationId": "loginUser",
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "email": {
+                                        "type": "string",
+                                        "format": "email"
+                                    },
+                                    "password": {
+                                        "type": "string"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "200": {
+                        "description": "Logged In",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "token": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/user/send-otp": {
+            "get": {
+                "tags": [
+                    "User API"
+                ],
+                "description": "Send OTP",
+                "summary": "Send OTP",
+                "operationId": "sendOTP",
+                "responses": {
+                    "200": {
+                        "description": "OTP Sent",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "otp": {
+                                                        "type": "number"
+                                                    },
+                                                    "expires_at": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/user/verify-email": {
+            "get": {
+                "tags": [
+                    "User API"
+                ],
+                "description": "Verify Email",
+                "summary": "Verify Email",
+                "operationId": "verifyEmail",
+                "responses": {
+                    "200": {
+                        "description": "Email Verified",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "link": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/user/forgot-password": {
+            "put": {
+                "tags": [
+                    "User API"
+                ],
+                "description": "Forgot Password",
+                "summary": "Forgot Password",
+                "operationId": "forgotPassword",
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "password": {
+                                        "type": "string"
+                                    },
+                                    "confirm_password": {
+                                        "type": "string"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "200": {
+                        "description": "Password Sent",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "message": {
+                                                        "description": "password updated successfully",
+                                                        "type": "string"
+                                                    },
+                                                    "updated_at": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },  
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/category/{category_id}": {
+            "get": {
+                "tags": [
+                    "Category API"
+                ],
+                "description": "Get Category",
+                "summary": "Get Category",
+                "operationId": "getCategory",
+                "parameters": [
+                    {
+                        "name": "category_id",
+                        "in": "path",
+                        "description": "Category ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "Category Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "$ref": "#/components/schemas/categories_response"
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            },
+            "delete": {
+                "tags": [
+                    "Category API"
+                ],
+                "description": "Delete Category",
+                "summary": "Delete Category",
+                "operationId": "deleteCategory",
+                "parameters": [
+                    {
+                        "name": "category_id",
+                        "in": "path",
+                        "description": "Category ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "Category Deleted",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "message": {
+                                                        "description": "category deleted successfully",
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                },
+                "security": [
+                    {
+                        "bearerAuth": []
+                    }
+                ]
+            }
+        },
+        "/category": {
+            "post": {
+                "tags": [
+                    "Category API"
+                ],
+                "description": "Create Category",
+                "summary": "Create Category",
+                "operationId": "createCategory",
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "name": {
+                                        "type": "string"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "200": {
+                        "description": "Category Created",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "id": {
+                                                        "type": "number"
+                                                    },
+                                                    "name": {
+                                                        "type": "string"
+                                                    },
+                                                    "created_at": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            },
+            "get": {
+                "tags": [
+                    "Category API"
+                ],
+                "description": "Get Categories",
+                "summary": "Get Categories",
+                "operationId": "getCategories",
+                "responses": {
+                    "200": {
+                        "description": "Categories Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "id": {
+                                                        "type": "number"
+                                                    },
+                                                    "name": {
+                                                        "type": "string"
+                                                    },
+                                                    "created_at": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/products": {
+            "get": {
+                "tags": [
+                    "Product API"
+                ],
+                "description": "Get Products",
+                "summary": "Get Products",
+                "operationId": "getProducts",
+                "responses": {
+                    "200": {
+                        "description": "Products Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "id": {
+                                                        "type": "number"
+                                                    },
+                                                    "name": {
+                                                        "type": "string"
+                                                    },
+                                                    "product_type": {
+                                                        "type": "string"
+                                                    },
+                                                    "stock": {
+                                                        "type": "number"
+                                                    },
+                                                    "code_product": {
+                                                        "type": "string"
+                                                    },
+                                                    "base_price": {
+                                                        "type": "number"
+                                                    },
+                                                    "selling_price": {
+                                                        "type": "number"
+                                                    },
+                                                    "category_id": {
+                                                        "type": "number"
+                                                    },
+                                                    "minimum_stock": {
+                                                        "type": "number"
+                                                    },
+                                                    "shelf": {
+                                                        "type": "string"
+                                                    },
+                                                    "weight": {
+                                                        "type": "number"
+                                                    },
+                                                    "discount": {
+                                                        "type": "number"
+                                                    },
+                                                    "information": {
+                                                        "type": "string"
+                                                    },
+                                                    "created_at": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            },
+            "post": {
+                "tags": [
+                    "Product API"
+                ],
+                "description": "Create Product",
+                "summary": "Create Product",
+                "operationId": "createProduct",
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "name": {
+                                        "type": "string"
+                                    },
+                                    "product_type": {
+                                        "type": "string"
+                                    },
+                                    "stock": {
+                                        "type": "number"
+                                    },
+                                    "code_product": {
+                                        "type": "string"
+                                    },
+                                    "base_price": {
+                                        "type": "number"
+                                    },
+                                    "selling_price": {
+                                        "type": "number"
+                                    },
+                                    "category_id": {
+                                        "type": "number"
+                                    },
+                                    "minimum_stock": {
+                                        "type": "number"
+                                    },
+                                    "shelf": {
+                                        "type": "string"
+                                    },
+                                    "image": {
+                                        "type": "string"
+                                    },
+                                    "weight": {
+                                        "type": "number"
+                                    },
+                                    "discount": {
+                                        "type": "number"
+                                    },
+                                    "information": {
+                                        "type": "string"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "200": {
+                        "description": "Product Created",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "$ref": "#/components/schemas/products_response"
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/products/{product_id}": {
+            "get": {
+                "tags": [
+                    "Product API"
+                ],
+                "description": "Get Product",
+                "summary": "Get Product",
+                "operationId": "getProduct",
+                "parameters": [
+                    {
+                        "name": "product_id",
+                        "in": "path",
+                        "description": "Product ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "Product Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "$ref": "#/components/schemas/products_response"
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            },
+            "put": {
+                "tags": [
+                    "Product API"
+                ],
+                "description": "Update Product",
+                "summary": "Update Product",
+                "operationId": "updateProduct",
+                "parameters": [
+                    {
+                        "name": "product_id",
+                        "in": "path",
+                        "description": "Product ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "name": {
+                                        "type": "string"
+                                    },
+                                    "product_type": {
+                                        "type": "string"
+                                    },
+                                    "stock": {
+                                        "type": "number"
+                                    },
+                                    "code_product": {
+                                        "type": "string"
+                                    },
+                                    "base_price": {
+                                        "type": "number"
+                                    },
+                                    "weight": {
+                                        "type": "number"
+                                    },
+                                    "discount": {
+                                        "type": "number"
+                                    },
+                                    "information": {
+                                        "type": "string"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "200": {
+                        "description": "Product Updated",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "id": {
+                                                        "type": "number"
+                                                    },
+                                                    "name": {
+                                                        "type": "string"
+                                                    },
+                                                    "product_type": {
+                                                        "type": "string"
+                                                    },
+                                                    "stock": {
+                                                        "type": "number"
+                                                    },
+                                                    "code_product": {
+                                                        "type": "string"
+                                                    },
+                                                    "base_price": {
+                                                        "type": "number"
+                                                    },
+                                                    "selling_price": {
+                                                        "type": "number"
+                                                    },
+                                                    "category_id": {
+                                                        "type": "number"
+                                                    },
+                                                    "minimum_stock": {
+                                                        "type": "number"
+                                                    },
+                                                    "shelf": {
+                                                        "type": "string"
+                                                    },
+                                                    "weight": {
+                                                        "type": "number"
+                                                    },
+                                                    "discount": {
+                                                        "type": "number"
+                                                    },
+                                                    "information": {
+                                                        "type": "string"
+                                                    },
+                                                    "updated_at": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }    
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                },
+                "security": [
+                    {
+                        "bearerAuth": []
+                    }
+                ]
+            },
+            "delete": {
+                "tags": [
+                    "Product API"
+                ],
+                "description": "Delete Product",
+                "summary": "Delete Product",
+                "operationId": "deleteProduct",
+                "parameters": [
+                    {
+                        "name": "product_id",
+                        "in": "path",
+                        "description": "Product ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "Product Deleted",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "message": {
+                                                        "description": "Product Deleted",
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                },
+                "security": [
+                    {
+                        "bearerAuth": []
+                    }
+                ]
+            }
+        },
+        "/customers": {
+            "post": {
+                "tags": [
+                    "Customers API"
+                ],
+                "description": "Create User",
+                "summary": "Create User",
+                "operationId": "createUser",
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "full_name": {
+                                        "type": "string"
+                                    },
+                                    "phone_number": {
+                                        "type": "number",
+                                        "pattern": "^08[0-9]{9,}$"
+                                    },
+                                    "address": {
+                                        "type": "string"
+                                    },
+                                    "email": {
+                                        "type": "string",
+                                        "format": "email"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "200": {
+                        "description": "User Created",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "properties": {
+                                                    "id": {
+                                                        "type": "number"
+                                                    },
+                                                    "full_name": {
+                                                        "type": "string"
+                                                    },
+                                                    "phone": {
+                                                        "type": "number"
+                                                    },
+                                                    "address": {
+                                                        "type": "string"
+                                                    },
+                                                    "email": {
+                                                        "type": "string"
+                                                    },
+                                                    "created_at": {
+                                                        "type": "string"
+                                                    }
+                                                }
+                                             }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            },
+            "get": {
+                "tags": [
+                    "Customers API"
+                ],
+                "description": "Get User",
+                "summary": "Get User",
+                "operationId": "getUser",
+                "responses": {
+                    "200": {
+                        "description": "User Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "number"
+                                        },
+                                        "status": {
+                                            "type": "string"
+                                        },
+                                        "data": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "$ref": "#/components/schemas/customers_response"
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        },
+        "/customers/{customer_id}": {
+            "get": {
+                "tags": [
+                    "Customers API"
+                ],
+                "description": "Get User",
+                "summary": "Get User",
+                "operationId": "getUser",
+                "parameters": [
+                    {
+                        "name": "customer_id",
+                        "in": "path",
+                        "description": "Customer ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "User Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "object",
+                                            "$ref": "#/components/schemas/customers_response"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            },
+            "put": {
+                "tags": [
+                    "Customers API"
+                ],
+                "description": "Update User",
+                "summary": "Update User",
+                "operationId": "updateUser",
+                "parameters": [
+                    {
+                        "name": "customer_id",
+                        "in": "path",
+                        "description": "Customer ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "requestBody":{
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "full_name": {
+                                        "type": "string"
+                                    },
+                                    "phone_number": {
+                                        "type": "number",
+                                        "pattern": "^08[0-9]{9,}$"
+                                    },
+                                    "address": {
+                                        "type": "string"
+                                    },
+                                    "email": {
+                                        "type": "string",
+                                        "format": "email"
+                                    }
+                                }
+                            }
+                        }
+                    }
+                },
+                "responses": {
+                    "200": {
+                        "description": "User Updated",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "object",
+                                            "$ref": "#/components/schemas/customers_response"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                },
+                "security": [
+                    {
+                        "bearerAuth": []
+                    }
+                ]
+            },
+            "delete": {
+                "tags": [
+                    "Customers API"
+                ],
+                "description": "Delete User",
+                "summary": "Delete User",
+                "operationId": "deleteUser",
+                "parameters": [
+                    {
+                        "name": "customer_id",
+                        "in": "path",
+                        "description": "Customer ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "User Deleted",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "string"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                },
+                "security": [
+                    {
+                        "bearerAuth": []
+                    }
+                ]
+            }
+        },
+        "/suppliers": {
+            "post": {
+                "tags": [
+                    "Suppliers API"
+                ],
+                "description": "Create Supplier",
+                "summary": "Create Supplier",
+                "operationId": "createSupplier",
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "name": {
+                                        "type": "string"
+                                    },
+                                    "address": {
+                                        "type": "string"
+                                    },
+                                    "email": {
+                                        "type": "string",
+                                        "format": "email"
+                                    },
+                                    "phone": {
+                                        "type": "number",
+                                        "pattern": "^08[0-9]{9,}$"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "200": {
+                        "description": "Supplier Created",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "object",
+                                            "$ref": "#/components/schemas/suppliers_response"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            },
+            "get": {
+                "tags": [
+                    "Suppliers API"
+                ],
+                "description": "Get Suppliers",
+                "summary": "Get Suppliers",
+                "operationId": "getSuppliers",
+                "responses": {
+                    "200": {
+                        "description": "Suppliers Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "$ref": "#/components/schemas/suppliers_response"
+                                            }
+                                            
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        },
+        "/suppliers/{supplier_id}": {
+            "put": {
+                "tags": [
+                    "Suppliers API"
+                ],
+                "description": "Update Supplier",
+                "summary": "Update Supplier",
+                "operationId": "updateSupplier",
+                "parameters": [
+                    {
+                        "name": "supplier_id",
+                        "in": "path",
+                        "description": "Supplier ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "name": {
+                                        "type": "string"
+                                    },
+                                    "address": {
+                                        "type": "string"
+                                    },
+                                    "email": {
+                                        "type": "string",
+                                        "format": "email"
+                                    },
+                                    "phone": {
+                                        "type": "number",
+                                        "pattern": "^08[0-9]{9,}$"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "200": {
+                        "description": "Supplier Updated",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "object",
+                                            "$ref": "#/components/schemas/suppliers_response"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                },
+                "security": [
+                    {
+                        "bearerAuth": []
+                    }
+                ]
+            },
+            "delete": {
+                "tags": [
+                    "Suppliers API"
+                ],
+                "description": "Delete Supplier",
+                "summary": "Delete Supplier",
+                "operationId": "deleteSupplier",
+                "parameters": [
+                    {
+                        "name": "supplier_id",
+                        "in": "path",
+                        "description": "Supplier ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "Supplier Deleted",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "string"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                },
+                "security": [
+                    {
+                        "bearerAuth": []
+                    }
+                ]
+            }
+        },
+        "/discounts": {
+            "get": {
+                "tags": [
+                    "Discounts API"
+                ],
+                "description": "Get Discounts",
+                "summary": "Get Discounts",
+                "operationId": "getDiscounts",
+                "responses": {
+                    "200": {
+                        "description": "Discounts Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "$ref": "#/components/schemas/discounts_response"
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            },
+            "post": {
+                "tags": [
+                    "Discounts API"
+                ],
+                "description": "Create Discount",
+                "summary": "Create Discount",
+                "operationId": "createDiscount",
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "name": {
+                                        "type": "string"
+                                    },
+                                    "percentage": {
+                                        "type": "number"
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "required": true
+                },
+                "responses": {
+                    "200": {
+                        "description": "Discount Created",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "object",
+                                            "$ref": "#/components/schemas/discounts_response"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/discounts/{discount_id}": {
+            "get": {
+                "tags": [
+                    "Discounts API"
+                ],
+                "description": "Get Discount",
+                "summary": "Get Discount",
+                "operationId": "getDiscount",
+                "parameters": [
+                    {
+                        "name": "discount_id",
+                        "in": "path",
+                        "description": "Discount ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "Discount Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "object",
+                                            "$ref": "#/components/schemas/discounts_response"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            },
+            "delete": {
+                "tags": [
+                    "Discounts API"
+                ],
+                "description": "Delete Discount",
+                "summary": "Delete Discount",
+                "operationId": "deleteDiscount",
+                "parameters": [
+                    {
+                        "name": "discount_id",
+                        "in": "path",
+                        "description": "Discount ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "responses": {
+                    "200": {
+                        "description": "Discount Deleted",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "string"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                },
+                "security": [
+                    {
+                        "bearerAuth": []
+                    }
+                ]
+            },
+            "patch": {
+                "tags": [
+                    "Discounts API"
+                ],
+                "description": "Update Discount",
+                "summary": "Update Discount",
+                "operationId": "updateDiscount",
+                "parameters": [
+                    {
+                        "name": "discount_id",
+                        "in": "path",
+                        "description": "Discount ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "name": {
+                                        "type": "string"
+                                    },
+                                    "percentage": {
+                                        "type": "number"
+                                    }
+                                }
+                            }
+                        }
+                    }
+                },
+                "responses": {
+                    "200": {
+                        "description": "Discount Updated",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "object",
+                                            "$ref": "#/components/schemas/discounts_response"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                },
+                "security": [
+                    {
+                        "bearerAuth": []
+                    }
+                ]
+            }
+        },
+        "/stocks":{
+            "get": {
+                "tags": [
+                    "Stocks API"
+                ],
+                "description": "Get Stocks",
+                "summary": "Get Stocks",
+                "operationId": "getStocks",
+                "responses": {
+                    "200": {
+                        "description": "Stocks Found",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "array",
+                                            "items": {
+                                                "type": "object",
+                                                "$ref": "#/components/schemas/stocks_response"
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        },
+        "/stocks/{stock_id}":{
+            "patch": {
+                "tags": [
+                    "Stocks API"
+                ],
+                "description": "Update Stock",
+                "summary": "Update Stock",
+                "operationId": "updateStock",
+                "parameters": [
+                    {
+                        "name": "stock_id",
+                        "in": "path",
+                        "description": "Stock ID",
+                        "required": true,
+                        "schema": {
+                            "type": "string"
+                        }
+                    }
+                ],
+                "requestBody": {
+                    "content": {
+                        "application/json": {
+                            "schema": {
+                                "type": "object",
+                                "properties": {
+                                    "date": {
+                                        "type": "string"
+                                    },
+                                    "selling_price": {
+                                        "type": "number"
+                                    },
+                                    "amount": {
+                                        "type": "number"
+                                    }
+                                }
+                            }
+                        }
+                    }
+                },
+                "responses": {
+                    "200": {
+                        "description": "Stock Updated",
+                        "content": {
+                            "application/json": {
+                                "schema": {
+                                    "type": "object",
+                                    "properties": {
+                                        "code": {
+                                            "type": "object",
+                                            "$ref": "#/components/schemas/stocks_response"
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    "400": {
+                        "description": "Bad Request"
+                    },
+                    "500": {
+                        "description": "Internal Server Error"
+                    }
+                }
+            }
+        }
+    },
+    "components": {
+            "schemas": {
+                "register_user": {
+                    "type": "object",
+                    "properties": {
+                        "email": {
+                            "type": "string"
+                        },
+                        "phone": {
+                            "type": "number"
+                        },
+                        "password": {
+                            "type": "string"
+                        },
+                        "confirm_password": {
+                            "type": "string"
+                        }
+                    },
+                    "required": ["email", "phone", "password", "confirm_password"]
+                },
+                "login_user": {
+                    "type": "object",
+                    "properties": {
+                        "email": {
+                            "type": "string"
+                        },
+                        "password": {
+                            "type": "string"
+                        }
+                    },
+                    "required": ["email", "password"]
+                },
+                "forgot_password": {
+                    "type": "object",
+                    "properties": {
+                        "email": {
+                            "type": "string"
+                        }
+                    },
+                    "required": ["email"]
+                },
+                "reset_password": {
+                    "type": "object",
+                    "properties": {
+                        "password": {
+                            "type": "string"
+                        },
+                        "confirm_password": {
+                            "type": "string"
+                        }
+                    },
+                    "required": ["password", "confirm_password"]
+                },
+                "user_response": {
+                    "type": "object",
+                    "properties": {
+                        "email": {
+                            "type": "string"
+                        },
+                        "phone": {
+                            "type": "number"
+                        },
+                        "created_at": {
+                            "type": "string"
+                        }
+                    }
+                },
+                "categories_response": {
+                    "type": "object",
+                    "properties": {
+                        "id": {
+                            "type": "number"
+                        },
+                        "name": {
+                            "type": "string"
+                        },
+                        "created_at": {
+                            "type": "string"
+                        }
+                    }
+                },
+                "product_request": {
+                    "type": "object",
+                    "properties": {
+                        "name": {
+                            "type": "string"
+                        },
+                        "product_type": {
+                            "type": "string"
+                        },
+                        "stock": {
+                            "type": "number"
+                        },
+                        "code_product": {
+                            "type": "string"
+                        },
+                        "base_price": {
+                            "type": "number"
+                        },
+                        "selling_price": {
+                            "type": "number"
+                        },
+                        "category_id": {
+                            "type": "number"
+                        },
+                        "minimum_stock": {
+                            "type": "number"
+                        },
+                        "shelf": {
+                            "type": "string"
+                        },
+                        "weight": {
+                            "type": "number"
+                        },
+                        "discount": {
+                            "type": "number"
+                        },
+                        "information": {
+                            "type": "string"
+                        }
+                    },
+                    "required": ["name", "product_type", "stock", "code_product", "base_price", "selling_price", "category_id", "minimum_stock", "shelf", "weight", "discount", "information"]
+                },
+                "products_response": {
+                    "type": "object",
+                    "properties": {
+                        "id": {
+                            "type": "number"
+                        },
+                        "name": {
+                            "type": "string"
+                        },
+                        "product_type": {
+                            "type": "string"
+                        },
+                        "stock": {
+                            "type": "number"
+                        },
+                        "code_product": {
+                            "type": "number"
+                        },
+                        "base_price": {
+                            "type": "number"
+                        },
+                        "selling_price": {
+                            "type": "number"
+                        },
+                        "category_id": {
+                            "type": "number"
+                        },
+                        "minimum_stock": {
+                            "type": "number"
+                        },
+                        "shelf": {
+                            "type": "string"
+                        },
+                        "image": {
+                            "type": "string"
+                        },
+                        "weight": {
+                            "type": "number"
+                        },
+                        "discount": {
+                            "type": "number"
+                        },
+                        "information": {
+                            "type": "string"
+                        },
+                        "created_at": {
+                            "type": "string"
+                        }
+                    }
+                },
+                "customers_response": {
+                    "type": "object",
+                    "properties": {
+                        "id": {
+                            "type": "number"
+                        },
+                        "full_name": {
+                            "type": "string"
+                        },
+                        "email": {
+                            "type": "string"
+                        },
+                        "phone": {
+                            "type": "number"
+                        },
+                        "created_at": {
+                            "type": "string"
+                        }
+                    }
+                },
+                "suppliers_response": {
+                    "type": "object",
+                    "properties": {
+                        "id": {
+                            "type": "number"
+                        },
+                        "full_name": {
+                            "type": "string"
+                        },
+                        "email": {
+                            "type": "string"
+                        },
+                        "phone": {
+                            "type": "number"
+                        },
+                        "created_at": {
+                            "type": "string"
+                        }
+                    }
+                },
+                "discounts_response": {
+                    "type": "object",
+                    "properties": {
+                        "id": {
+                            "type": "number"
+                        },
+                        "name": {
+                            "type": "string"
+                        },
+                        "percentage": {
+                            "type": "number"
+                        },
+                        "created_at": {
+                            "type": "string"
+                        }
+                    }
+                },
+                "stocks_response": {
+                    "type": "object",
+                    "properties": {
+                        "id": {
+                            "type": "number"
+                        },
+                        "product_name": {
+                            "type": "string"
+                        },
+                        "code_product": {
+                            "type": "number"
+                        },
+                        "category": {
+                            "type": "string"
+                        },
+                        "stock": {
+                            "type": "number"
+                        },
+                        "base_price": {
+                            "type": "number"
+                        },
+                        "date": {
+                            "type": "string"
+                        },
+                        "selling_price": {
+                            "type": "number"
+                        },
+                        "amount": {
+                            "type": "number"
+                        },
+                        "information": {
+                            "type": "string"
+                        },
+                        "created_at": {
+                            "type": "string"
+                        }
+                    }
+                },
+                "delete_response": {
+                    "type": "object",
+                    "properties": {
+                        "message": {
+                            "type": "string"
+                        }
+                    }
+                }
+            },
+            "securitySchemes": {
+                    "BearerAuth": {
+                        "type": "http",
+                        "scheme": "bearer",
+                        "bearerFormat": "JWT"
+                    }
+                }
+        }
+}
\ No newline at end of file
diff --git a/formatter/category.go b/formatter/category.go
new file mode 100644
index 0000000..4cf9649
--- /dev/null
+++ b/formatter/category.go
@@ -0,0 +1,62 @@
+package formatter
+
+import "api-kasirapp/models"
+
+type CategoryFormatter struct {
+	ID        int    `json:"id"`
+	Name      string `json:"name"`
+	CreatedAt string `json:"created_at"`
+	UpdatedAt string `json:"updated_at"`
+}
+
+func FormatCategory(category models.Category) CategoryFormatter {
+	formatter := CategoryFormatter{
+		ID:        category.ID,
+		Name:      category.Name,
+		CreatedAt: category.CreatedAt.Format("2006-01-02 15:04:05"),
+		UpdatedAt: category.UpdatedAt.Format("2006-01-02 15:04:05"),
+	}
+	return formatter
+}
+
+type ProductWithTheCategoryFormatter struct {
+	Name string `json:"name"`
+}
+
+type CategoryProductFormatter struct {
+	CategoryID   int                `json:"category_id"`
+	CategoryName string             `json:"category_name"`
+	Products     []ProductFormatter `json:"products"`
+}
+
+func FormatCategories(categories []models.Category) []CategoryFormatter {
+	var categoriesFormatter []CategoryFormatter
+
+	for _, category := range categories {
+		formatter := FormatCategory(category)
+		categoriesFormatter = append(categoriesFormatter, formatter)
+	}
+
+	return categoriesFormatter
+}
+
+func FormatProductWithCategory(product models.Product) ProductFormatter {
+	return ProductFormatter{
+		Name: product.Name,
+	}
+}
+
+func FormatCategoryProducts(category models.Category, products []models.Product) CategoryProductFormatter {
+	var productList []ProductFormatter
+	for _, product := range products {
+		formattedProduct := FormatProduct(product)
+		productList = append(productList, formattedProduct)
+	}
+
+	data := CategoryProductFormatter{
+		CategoryID:   category.ID,
+		CategoryName: category.Name,
+		Products:     productList,
+	}
+	return data
+}
diff --git a/formatter/customer.go b/formatter/customer.go
new file mode 100644
index 0000000..ef40499
--- /dev/null
+++ b/formatter/customer.go
@@ -0,0 +1,35 @@
+package formatter
+
+import "api-kasirapp/models"
+
+type CustomerFormatter struct {
+	ID        int    `json:"id"`
+	Name      string `json:"name"`
+	Address   string `json:"address"`
+	Phone     string `json:"phone"`
+	Email     string `json:"email"`
+	CreatedAt string `json:"created_at"`
+	UpdatedAt string `json:"updated_at"`
+}
+
+func FormatCustomer(customer models.Customer) CustomerFormatter {
+	formatter := CustomerFormatter{
+		ID:        customer.ID,
+		Name:      customer.Name,
+		Address:   customer.Address,
+		Phone:     customer.Phone,
+		Email:     customer.Email,
+		CreatedAt: customer.CreatedAt.Format("2006-01-02 15:04:05"),
+		UpdatedAt: customer.UpdatedAt.Format("2006-01-02 15:04:05"),
+	}
+	return formatter
+}
+
+func FormatCustomers(customers []models.Customer) []CustomerFormatter {
+	var customersFormatter []CustomerFormatter
+	for _, customer := range customers {
+		formatter := FormatCustomer(customer)
+		customersFormatter = append(customersFormatter, formatter)
+	}
+	return customersFormatter
+}
diff --git a/formatter/discount.go b/formatter/discount.go
new file mode 100644
index 0000000..e68bae5
--- /dev/null
+++ b/formatter/discount.go
@@ -0,0 +1,32 @@
+package formatter
+
+import (
+	"api-kasirapp/models"
+)
+
+type DiscountFormatter struct {
+	ID         int     `json:"id"`
+	Name       string  `json:"name"`
+	Percentage float64 `json:"percentage"`
+	CreatedAt  string  `json:"created_at"`
+	UpdatedAt  string  `json:"updated_at"`
+}
+
+func FormatDiscount(discount models.Discount) DiscountFormatter {
+	formatter := DiscountFormatter{
+		ID:         discount.ID,
+		Name:       discount.Name,
+		Percentage: discount.Percentage,
+		CreatedAt:  discount.CreatedAt.String(),
+		UpdatedAt:  discount.UpdatedAt.String(),
+	}
+	return formatter
+}
+
+func FormatDiscounts(discounts []models.Discount) []DiscountFormatter {
+	var formatter []DiscountFormatter
+	for _, discount := range discounts {
+		formatter = append(formatter, FormatDiscount(discount))
+	}
+	return formatter
+}
diff --git a/formatter/product.go b/formatter/product.go
new file mode 100644
index 0000000..d69920c
--- /dev/null
+++ b/formatter/product.go
@@ -0,0 +1,53 @@
+package formatter
+
+import "api-kasirapp/models"
+
+type ProductFormatter struct {
+	ID           int     `json:"id"`
+	Name         string  `json:"name"`
+	ProductType  string  `json:"product_type"`
+	BasePrice    float64 `json:"base_price"`
+	SellingPrice float64 `json:"selling_price"`
+	Stock        int     `json:"stock"`
+	CodeProduct  string  `json:"code_product"`
+	CategoryID   int     `json:"category_id"`
+	MinimumStock int     `json:"minimum_stock"`
+	Shelf        string  `json:"shelf"`
+	Weight       int     `json:"weight"`
+	Discount     int     `json:"discount"`
+	Information  string  `json:"information"`
+	CreatedAt    string  `json:"created_at"`
+	UpdatedAt    string  `json:"updated_at"`
+}
+
+func FormatProduct(product models.Product) ProductFormatter {
+	formatter := ProductFormatter{
+		ID:           product.ID,
+		Name:         product.Name,
+		ProductType:  product.ProductType,
+		BasePrice:    product.BasePrice,
+		SellingPrice: product.SellingPrice,
+		Stock:        product.Stock,
+		CodeProduct:  product.CodeProduct,
+		CategoryID:   product.CategoryID,
+		MinimumStock: product.MinimumStock,
+		Shelf:        product.Shelf,
+		Weight:       product.Weight,
+		Discount:     product.Discount,
+		Information:  product.Information,
+		CreatedAt:    product.CreatedAt.Format("2006-01-02 15:04:05"),
+		UpdatedAt:    product.UpdatedAt.Format("2006-01-02 15:04:05"),
+	}
+	return formatter
+}
+
+func FormatProducts(products []models.Product) []ProductFormatter {
+	var productsFormatter []ProductFormatter
+
+	for _, product := range products {
+		formatter := FormatProduct(product)
+		productsFormatter = append(productsFormatter, formatter)
+	}
+
+	return productsFormatter
+}
diff --git a/formatter/stock.go b/formatter/stock.go
new file mode 100644
index 0000000..dbf9c86
--- /dev/null
+++ b/formatter/stock.go
@@ -0,0 +1,38 @@
+package formatter
+
+import "api-kasirapp/models"
+
+type StockFormatter struct {
+	ID           int     `json:"id"`
+	ProductName  string  `json:"product_name"`
+	CodeProduct  string  `json:"code_product"`
+	CategoryName string  `json:"category"`
+	Stock        int     `json:"stock"`
+	SellingPrice float64 `json:"selling_price"`
+	BasePrice    float64 `json:"base_price"`
+	Date         string  `json:"date"`
+	BuyingPrice  float64 `json:"buying_price"`
+	Amount       int     `json:"amount"`
+	Information  string  `json:"information"`
+	CreatedAt    string  `json:"created_at"`
+	UpdatedAt    string  `json:"updated_at"`
+}
+
+func FormatStock(stock models.Stock) StockFormatter {
+	formatter := StockFormatter{
+		ID:           stock.ID,
+		ProductName:  stock.ProductName,
+		CodeProduct:  stock.CodeProduct,
+		CategoryName: stock.CategoryName,
+		Stock:        stock.Stock,
+		SellingPrice: stock.SellingPrice,
+		BasePrice:    stock.BasePrice,
+		Date:         stock.Date,
+		BuyingPrice:  stock.BuyingPrice,
+		Amount:       stock.Amount,
+		Information:  stock.Information,
+		CreatedAt:    stock.CreatedAt.String(),
+		UpdatedAt:    stock.UpdatedAt.String(),
+	}
+	return formatter
+}
diff --git a/formatter/supplier.go b/formatter/supplier.go
new file mode 100644
index 0000000..1dab470
--- /dev/null
+++ b/formatter/supplier.go
@@ -0,0 +1,36 @@
+package formatter
+
+import "api-kasirapp/models"
+
+type SupplierFormatter struct {
+	ID        int    `json:"id"`
+	Name      string `json:"name"`
+	Address   string `json:"address"`
+	Email     string `json:"email"`
+	Phone     string `json:"phone"`
+	Code      int    `json:"code"`
+	CreatedAt string `json:"created_at"`
+	UpdatedAt string `json:"updated_at"`
+}
+
+func FormatSupplier(supplier models.Supplier) SupplierFormatter {
+	formatter := SupplierFormatter{
+		ID:        supplier.ID,
+		Name:      supplier.Name,
+		Address:   supplier.Address,
+		Email:     supplier.Email,
+		Phone:     supplier.Phone,
+		Code:      supplier.Code,
+		CreatedAt: supplier.CreatedAt.String(),
+		UpdatedAt: supplier.UpdatedAt.String(),
+	}
+	return formatter
+}
+
+func FormatSuppliers(suppliers []models.Supplier) []SupplierFormatter {
+	formatters := []SupplierFormatter{}
+	for _, supplier := range suppliers {
+		formatters = append(formatters, FormatSupplier(supplier))
+	}
+	return formatters
+}
diff --git a/formatter/user.go b/formatter/user.go
new file mode 100644
index 0000000..0a01e68
--- /dev/null
+++ b/formatter/user.go
@@ -0,0 +1,22 @@
+package formatter
+
+import "api-kasirapp/models"
+
+type UserFormatter struct {
+	ID    int    `json:"id"`
+	Name  string `json:"name"`
+	Email string `json:"email"`
+	Phone string `json:"phone"`
+	Token string `json:"token"`
+}
+
+func FormatUser(user models.User, token string) UserFormatter {
+	formatter := UserFormatter{
+		ID:    user.ID,
+		Name:  user.Name,
+		Email: user.Email,
+		Phone: user.Phone,
+		Token: token,
+	}
+	return formatter
+}
diff --git a/go.mod b/go.mod
new file mode 100644
index 0000000..fa33241
--- /dev/null
+++ b/go.mod
@@ -0,0 +1,50 @@
+module api-kasirapp
+
+go 1.22.0
+
+toolchain go1.23.2
+
+require (
+	github.com/joho/godotenv v1.5.1
+	golang.org/x/crypto v0.28.0
+	gorm.io/driver/postgres v1.5.9
+	gorm.io/gorm v1.25.12
+)
+
+require (
+	github.com/bytedance/sonic v1.12.3 // indirect
+	github.com/bytedance/sonic/loader v0.2.0 // indirect
+	github.com/cloudwego/base64x v0.1.4 // indirect
+	github.com/cloudwego/iasm v0.2.0 // indirect
+	github.com/gabriel-vasile/mimetype v1.4.6 // indirect
+	github.com/gin-contrib/sse v0.1.0 // indirect
+	github.com/gin-gonic/gin v1.10.0 // indirect
+	github.com/go-playground/locales v0.14.1 // indirect
+	github.com/go-playground/universal-translator v0.18.1 // indirect
+	github.com/go-playground/validator/v10 v10.22.1 // indirect
+	github.com/goccy/go-json v0.10.3 // indirect
+	github.com/golang-jwt/jwt/v5 v5.2.1 // indirect
+	github.com/jackc/pgpassfile v1.0.0 // indirect
+	github.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a // indirect
+	github.com/jackc/pgx/v5 v5.5.5 // indirect
+	github.com/jackc/puddle/v2 v2.2.1 // indirect
+	github.com/jinzhu/inflection v1.0.0 // indirect
+	github.com/jinzhu/now v1.1.5 // indirect
+	github.com/json-iterator/go v1.1.12 // indirect
+	github.com/klauspost/cpuid/v2 v2.2.8 // indirect
+	github.com/leodido/go-urn v1.4.0 // indirect
+	github.com/mattn/go-isatty v0.0.20 // indirect
+	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
+	github.com/modern-go/reflect2 v1.0.2 // indirect
+	github.com/pelletier/go-toml/v2 v2.2.3 // indirect
+	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
+	github.com/ugorji/go/codec v1.2.12 // indirect
+	golang.org/x/arch v0.11.0 // indirect
+	golang.org/x/exp v0.0.0-20241009180824-f66d83c29e7c // indirect
+	golang.org/x/net v0.30.0 // indirect
+	golang.org/x/sync v0.8.0 // indirect
+	golang.org/x/sys v0.26.0 // indirect
+	golang.org/x/text v0.19.0 // indirect
+	google.golang.org/protobuf v1.35.1 // indirect
+	gopkg.in/yaml.v3 v3.0.1 // indirect
+)
diff --git a/go.sum b/go.sum
new file mode 100644
index 0000000..b539fe6
--- /dev/null
+++ b/go.sum
@@ -0,0 +1,111 @@
+github.com/bytedance/sonic v1.12.3 h1:W2MGa7RCU1QTeYRTPE3+88mVC0yXmsRQRChiyVocVjU=
+github.com/bytedance/sonic v1.12.3/go.mod h1:B8Gt/XvtZ3Fqj+iSKMypzymZxw/FVwgIGKzMzT9r/rk=
+github.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
+github.com/bytedance/sonic/loader v0.2.0 h1:zNprn+lsIP06C/IqCHs3gPQIvnvpKbbxyXQP1iU4kWM=
+github.com/bytedance/sonic/loader v0.2.0/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
+github.com/cloudwego/base64x v0.1.4 h1:jwCgWpFanWmN8xoIUHa2rtzmkd5J2plF/dnLS6Xd/0Y=
+github.com/cloudwego/base64x v0.1.4/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=
+github.com/cloudwego/iasm v0.2.0 h1:1KNIy1I1H9hNNFEEH3DVnI4UujN+1zjpuk6gwHLTssg=
+github.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=
+github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
+github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=
+github.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=
+github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
+github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
+github.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=
+github.com/gin-gonic/gin v1.10.0/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=
+github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
+github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
+github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
+github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
+github.com/go-playground/validator/v10 v10.22.1 h1:40JcKH+bBNGFczGuoBYgX4I6m/i27HYW8P9FDk5PbgA=
+github.com/go-playground/validator/v10 v10.22.1/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
+github.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=
+github.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=
+github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
+github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
+github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
+github.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=
+github.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=
+github.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a h1:bbPeKD0xmW/Y25WS6cokEszi5g+S0QxI/d45PkRi7Nk=
+github.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a/go.mod h1:5TJZWKEWniPve33vlWYSoGYefn3gLQRzjfDlhSJ9ZKM=
+github.com/jackc/pgx/v5 v5.5.5 h1:amBjrZVmksIdNjxGW/IiIMzxMKZFelXbUoPNb+8sjQw=
+github.com/jackc/pgx/v5 v5.5.5/go.mod h1:ez9gk+OAat140fv9ErkZDYFWmXLfV+++K0uAOiwgm1A=
+github.com/jackc/puddle/v2 v2.2.1 h1:RhxXJtFG022u4ibrCSMSiu5aOq1i77R3OHKNJj77OAk=
+github.com/jackc/puddle/v2 v2.2.1/go.mod h1:vriiEXHvEE654aYKXXjOvZM39qJ0q+azkZFrfEOc3H4=
+github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
+github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
+github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=
+github.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=
+github.com/joho/godotenv v1.5.1 h1:7eLL/+HRGLY0ldzfGMeQkb7vMd0as4CfYvUVzLqw0N0=
+github.com/joho/godotenv v1.5.1/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=
+github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
+github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
+github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
+github.com/klauspost/cpuid/v2 v2.2.8 h1:+StwCXwm9PdpiEkPyzBXIy+M9KUb4ODm0Zarf1kS5BM=
+github.com/klauspost/cpuid/v2 v2.2.8/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=
+github.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=
+github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
+github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
+github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
+github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
+github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
+github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
+github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
+github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
+github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
+github.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=
+github.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=
+github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
+github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
+github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
+github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
+github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
+github.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=
+github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
+github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
+github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
+github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=
+github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
+github.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=
+github.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
+golang.org/x/arch v0.11.0 h1:KXV8WWKCXm6tRpLirl2szsO5j/oOODwZf4hATmGVNs4=
+golang.org/x/arch v0.11.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=
+golang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=
+golang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=
+golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=
+golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=
+golang.org/x/exp v0.0.0-20241009180824-f66d83c29e7c h1:7dEasQXItcW1xKJ2+gg5VOiBnqWrJc+rq0DPKyvvdbY=
+golang.org/x/exp v0.0.0-20241009180824-f66d83c29e7c/go.mod h1:NQtJDoLvd6faHhE7m4T/1IY708gDefGGjR/iUW8yQQ8=
+golang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=
+golang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=
+golang.org/x/sync v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=
+golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+golang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=
+golang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
+golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=
+golang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
+golang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=
+golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
+golang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=
+golang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
+google.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=
+google.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=
+gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
+gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gorm.io/driver/postgres v1.5.9 h1:DkegyItji119OlcaLjqN11kHoUgZ/j13E0jkJZgD6A8=
+gorm.io/driver/postgres v1.5.9/go.mod h1:DX3GReXH+3FPWGrrgffdvCk3DQ1dwDPdmbenSkweRGI=
+gorm.io/gorm v1.25.12 h1:I0u8i2hWQItBq1WfE0o2+WuL9+8L21K9e2HHSTE/0f8=
+gorm.io/gorm v1.25.12/go.mod h1:xh7N7RHfYlNc5EmcI/El95gXusucDrQnHXe0+CgWcLQ=
+nullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=
+rsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=
diff --git a/handler/category.go b/handler/category.go
new file mode 100644
index 0000000..07756cf
--- /dev/null
+++ b/handler/category.go
@@ -0,0 +1,163 @@
+package handler
+
+import (
+	"api-kasirapp/formatter"
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/service"
+	"net/http"
+	"strconv"
+
+	"github.com/gin-gonic/gin"
+)
+
+type categoryHandler struct {
+	categoryService service.CategoryService
+}
+
+func NewCategoryHandler(categoryService service.CategoryService) *categoryHandler {
+	return &categoryHandler{
+		categoryService,
+	}
+}
+
+func (h *categoryHandler) CreateCategory(c *gin.Context) {
+	var input input.CategoryInput
+
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Create category failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	newCategory, err := h.categoryService.SaveCategory(input)
+	if err != nil {
+		response := helper.APIResponse("Create category failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success create category", http.StatusOK, "success", formatter.FormatCategory(newCategory))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *categoryHandler) GetCategories(c *gin.Context) {
+	categories, err := h.categoryService.FindCategories()
+	if err != nil {
+		response := helper.APIResponse("Get categories failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	formatedCategories := formatter.FormatCategories(categories)
+
+	response := helper.APIResponse("Success get categories", http.StatusOK, "success", formatedCategories)
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *categoryHandler) GetCategoryById(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	getCategory, err := h.categoryService.FindCategoryByID(id)
+	if err != nil {
+		response := helper.APIResponse("ID Not Found", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	formatedCategory := formatter.FormatCategory(getCategory)
+
+	response := helper.APIResponse("Success get category", http.StatusOK, "success", formatedCategory)
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *categoryHandler) UpdateCategory(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	var input input.CategoryInput
+	err = c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Update category failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	updateCategory, err := h.categoryService.UpdateCategory(id, input)
+	if err != nil {
+		response := helper.APIResponse("Update category failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success update category", http.StatusOK, "success", formatter.FormatCategory(updateCategory))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *categoryHandler) DeleteCategory(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	deleteCategory, err := h.categoryService.DeleteCategory(id)
+	if err != nil {
+		response := helper.APIResponse("Delete category failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success delete category", http.StatusOK, "success", formatter.FormatCategory(deleteCategory))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *categoryHandler) GetCategoryProducts(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	products, err := h.categoryService.GetCategoryProducts(id)
+	if err != nil {
+		response := helper.APIResponse("Get category products failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	categories, err := h.categoryService.FindCategoryByID(id)
+	if err != nil {
+		response := helper.APIResponse("ID Not Found", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+
+	}
+
+	formatedProducts := formatter.FormatCategoryProducts(categories, products)
+
+	response := helper.APIResponse("Success get category products", http.StatusOK, "success", formatedProducts)
+	c.JSON(http.StatusOK, response)
+}
diff --git a/handler/customer.go b/handler/customer.go
new file mode 100644
index 0000000..0e73931
--- /dev/null
+++ b/handler/customer.go
@@ -0,0 +1,142 @@
+package handler
+
+import (
+	"api-kasirapp/formatter"
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/service"
+	"net/http"
+	"strconv"
+
+	"github.com/gin-gonic/gin"
+)
+
+type customerHandler struct {
+	customerService service.CustomerService
+}
+
+func NewCustomerHandler(customerService service.CustomerService) *customerHandler {
+	return &customerHandler{customerService}
+}
+
+func (h *customerHandler) CreateCustomer(c *gin.Context) {
+	var input input.CustomerInput
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+		response := helper.APIResponse("Create customer failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	newCustomer, err := h.customerService.CreateCustomer(input)
+	if err != nil {
+		response := helper.APIResponse("Create customer failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success create customer", http.StatusCreated, "success", formatter.FormatCustomer(newCustomer))
+	c.JSON(http.StatusCreated, response)
+}
+
+func (h *customerHandler) GetCustomers(c *gin.Context) {
+	limitStr := c.Query("limit")
+	offsetStr := c.Query("offset")
+
+	limit, err := strconv.Atoi(limitStr)
+	if err != nil || limit <= 0 {
+		limit = 5
+	}
+
+	offset, err := strconv.Atoi(offsetStr)
+	if err != nil || offset < 0 {
+		offset = 0
+	}
+
+	customers, err := h.customerService.GetCustomers(limit, offset)
+	if err != nil {
+		response := helper.APIResponse("Get customers failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get customers", http.StatusOK, "success", customers)
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *customerHandler) GetCustomerById(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	getCustomer, err := h.customerService.GetCustomerByID(id)
+	if err != nil {
+		if err.Error() == "record not found" {
+			response := helper.APIResponse("Get customer failed", http.StatusNotFound, "error", nil)
+			c.JSON(http.StatusNotFound, response)
+			return
+		}
+		response := helper.APIResponse("Get customer failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get customer", http.StatusOK, "success", formatter.FormatCustomer(getCustomer))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *customerHandler) UpdateCustomer(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	var input input.CustomerInput
+	err = c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+		response := helper.APIResponse("Update customer failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	updateCustomer, err := h.customerService.UpdateCustomer(id, input)
+	if err != nil {
+		response := helper.APIResponse("Update customer failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success update customer", http.StatusOK, "success", formatter.FormatCustomer(updateCustomer))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *customerHandler) DeleteCustomer(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	deleteCustomer, err := h.customerService.DeleteCustomer(id)
+	if err != nil {
+		response := helper.APIResponse("Delete customer failed", http.StatusNotFound, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusNotFound, response)
+		return
+	}
+
+	response := helper.APIResponse("Success delete customer", http.StatusOK, "success", formatter.FormatCustomer(deleteCustomer))
+	c.JSON(http.StatusOK, response)
+}
diff --git a/handler/discount.go b/handler/discount.go
new file mode 100644
index 0000000..9fe5879
--- /dev/null
+++ b/handler/discount.go
@@ -0,0 +1,128 @@
+package handler
+
+import (
+	"api-kasirapp/formatter"
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/service"
+	"net/http"
+	"strconv"
+
+	"github.com/gin-gonic/gin"
+)
+
+type discountHandler struct {
+	discountService service.DiscountService
+}
+
+func NewDiscountHandler(discountService service.DiscountService) *discountHandler {
+	return &discountHandler{discountService}
+}
+
+func (h *discountHandler) CreateDiscount(c *gin.Context) {
+	var input input.DiscountInput
+
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Create discount failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	newDiscount, err := h.discountService.Create(input)
+	if err != nil {
+		response := helper.APIResponse("Create discount failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success create discount", http.StatusCreated, "success", formatter.FormatDiscount(newDiscount))
+	c.JSON(http.StatusCreated, response)
+}
+
+func (h *discountHandler) GetDiscounts(c *gin.Context) {
+	discounts, err := h.discountService.GetAll()
+	if err != nil {
+		response := helper.APIResponse("Get discounts failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get discounts", http.StatusOK, "success", formatter.FormatDiscounts(discounts))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *discountHandler) GetDiscountById(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	getDiscount, err := h.discountService.GetByID(id)
+	if err != nil {
+		response := helper.APIResponse("Get discount failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get discount", http.StatusOK, "success", formatter.FormatDiscount(getDiscount))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *discountHandler) UpdateDiscount(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	var input input.DiscountInput
+
+	err = c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Update discount failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	updateDiscount, err := h.discountService.Update(id, input)
+	if err != nil {
+		response := helper.APIResponse("Update discount failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success update discount", http.StatusOK, "success", formatter.FormatDiscount(updateDiscount))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *discountHandler) DeleteDiscount(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	deleteSupplier, err := h.discountService.Delete(id)
+	if err != nil {
+		response := helper.APIResponse("Delete discount failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success delete discount", http.StatusOK, "success", formatter.FormatDiscount(deleteSupplier))
+	c.JSON(http.StatusOK, response)
+}
diff --git a/handler/product.go b/handler/product.go
new file mode 100644
index 0000000..b1fe39b
--- /dev/null
+++ b/handler/product.go
@@ -0,0 +1,132 @@
+package handler
+
+import (
+	"api-kasirapp/formatter"
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/service"
+	"net/http"
+	"strconv"
+
+	"github.com/gin-gonic/gin"
+)
+
+type productHandler struct {
+	productService service.ProductService
+}
+
+func NewProductHandler(productService service.ProductService) *productHandler {
+	return &productHandler{productService}
+}
+
+func (h *productHandler) CreateProduct(c *gin.Context) {
+	var input input.ProductInput
+
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Create product failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	newProduct, err := h.productService.CreateProduct(input)
+	if err != nil {
+		if err.Error() == "product code already exists" {
+			response := helper.APIResponse("product code already exists", http.StatusConflict, "error", gin.H{"message": err.Error()})
+			c.JSON(http.StatusConflict, response)
+			return
+		}
+		response := helper.APIResponse("Create product failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success create product", http.StatusCreated, "success", formatter.FormatProduct(newProduct))
+	c.JSON(http.StatusCreated, response)
+}
+
+func (h *productHandler) GetProducts(c *gin.Context) {
+	products, err := h.productService.FindAll()
+	if err != nil {
+		response := helper.APIResponse("Get products failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get products", http.StatusOK, "success", formatter.FormatProducts(products))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *productHandler) GetProductById(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	getProduct, err := h.productService.FindProductByID(id)
+	if err != nil {
+		response := helper.APIResponse("Get product failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get product", http.StatusOK, "success", formatter.FormatProduct(getProduct))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *productHandler) UpdateProduct(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	var input input.ProductInput
+	err = c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Update product failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	updateProduct, err := h.productService.UpdateProduct(id, input)
+	if err != nil {
+		response := helper.APIResponse("Update product failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success update product", http.StatusOK, "success", formatter.FormatProduct(updateProduct))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *productHandler) DeleteProduct(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	deleteProduct, err := h.productService.DeleteProduct(id)
+	if err != nil {
+		response := helper.APIResponse("Delete product failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success delete product", http.StatusOK, "success", formatter.FormatProduct(deleteProduct))
+	c.JSON(http.StatusOK, response)
+}
diff --git a/handler/stock.go b/handler/stock.go
new file mode 100644
index 0000000..abeebd1
--- /dev/null
+++ b/handler/stock.go
@@ -0,0 +1 @@
+package handler
diff --git a/handler/supplier.go b/handler/supplier.go
new file mode 100644
index 0000000..d03d154
--- /dev/null
+++ b/handler/supplier.go
@@ -0,0 +1,141 @@
+package handler
+
+import (
+	"api-kasirapp/formatter"
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/service"
+	"net/http"
+	"strconv"
+
+	"github.com/gin-gonic/gin"
+)
+
+type supplierHandler struct {
+	supplierService service.SupplierService
+}
+
+func NewSupplierHandler(supplierService service.SupplierService) *supplierHandler {
+	return &supplierHandler{supplierService}
+}
+
+func (h *supplierHandler) CreateSupplier(c *gin.Context) {
+	var input input.SupplierInput
+
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Create supplier failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	newSupplier, err := h.supplierService.CreateSupplier(input)
+	if err != nil {
+		response := helper.APIResponse("Create supplier failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success create supplier", http.StatusCreated, "success", formatter.FormatSupplier(newSupplier))
+	c.JSON(http.StatusCreated, response)
+}
+
+func (h *supplierHandler) GetSupplierById(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	getSupplier, err := h.supplierService.GetByID(id)
+	if err != nil {
+		response := helper.APIResponse("Get supplier failed", http.StatusNotFound, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusNotFound, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get supplier", http.StatusOK, "success", formatter.FormatSupplier(getSupplier))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *supplierHandler) GetSuppliers(c *gin.Context) {
+	limitStr := c.Query("limit")
+	offsetStr := c.Query("offset")
+
+	limit, err := strconv.Atoi(limitStr)
+	if err != nil || limit <= 0 {
+		limit = 4
+	}
+
+	offset, err := strconv.Atoi(offsetStr)
+	if err != nil || offset < 0 {
+		offset = 0
+	}
+
+	suppliers, err := h.supplierService.GetAll(limit, offset)
+	if err != nil {
+		response := helper.APIResponse("Get suppliers failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success get suppliers", http.StatusOK, "success", formatter.FormatSuppliers(suppliers))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *supplierHandler) UpdateSupplier(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	var input input.SupplierInput
+
+	err = c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Update supplier failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	updateSupplier, err := h.supplierService.Update(id, input)
+	if err != nil {
+		response := helper.APIResponse("Update supplier failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success update supplier", http.StatusOK, "success", formatter.FormatSupplier(updateSupplier))
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *supplierHandler) DeleteSupplier(c *gin.Context) {
+	idParam := c.Param("id")
+	id, err := strconv.Atoi(idParam)
+	if err != nil {
+		response := helper.APIResponse("Invalid ID format", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	deleteSupplier, err := h.supplierService.Delete(id)
+	if err != nil {
+		response := helper.APIResponse("Delete supplier failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	response := helper.APIResponse("Success delete supplier", http.StatusOK, "success", formatter.FormatSupplier(deleteSupplier))
+	c.JSON(http.StatusOK, response)
+}
diff --git a/handler/user.go b/handler/user.go
new file mode 100644
index 0000000..8e3a031
--- /dev/null
+++ b/handler/user.go
@@ -0,0 +1,129 @@
+package handler
+
+import (
+	"api-kasirapp/auth"
+	"api-kasirapp/formatter"
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/service"
+	"net/http"
+
+	"github.com/gin-gonic/gin"
+)
+
+type userHandler struct {
+	userService service.UserService
+	authService auth.Service
+}
+
+func NewUserHandler(userService service.UserService, authService auth.Service) *userHandler {
+	return &userHandler{userService, authService}
+
+}
+
+func (h *userHandler) RegisterUser(c *gin.Context) {
+	var input input.RegisterUserInput
+
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Register failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	newUser, err := h.userService.RegisterUser(input)
+	if err != nil {
+		response := helper.APIResponse("Register failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	token, err := h.authService.GenerateToken(newUser.ID)
+	if err != nil {
+		response := helper.APIResponse("Register failed", http.StatusBadRequest, "error", gin.H{"message": err.Error()})
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	formatter := formatter.FormatUser(newUser, token)
+
+	response := helper.APIResponse("Account has been registered", http.StatusOK, "success", formatter)
+	c.JSON(http.StatusOK, response)
+}
+
+func (h *userHandler) Login(c *gin.Context) {
+	var input input.LoginInput
+
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Login failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	loggedinUser, err := h.userService.Login(input)
+
+	if err != nil {
+		errorMessage := gin.H{"errors": err.Error()}
+
+		response := helper.APIResponse("Login failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	token, err := h.authService.GenerateToken(loggedinUser.ID)
+	if err != nil {
+		response := helper.APIResponse("Login failed", http.StatusBadRequest, "error", nil)
+		c.JSON(http.StatusBadRequest, response)
+		return
+	}
+
+	formatter := formatter.FormatUser(loggedinUser, token)
+
+	response := helper.APIResponse("Successfuly loggedin", http.StatusOK, "success", formatter)
+
+	c.JSON(http.StatusOK, response)
+
+}
+
+func (h *userHandler) CheckEmailAvailability(c *gin.Context) {
+	var input input.CheckEmailInput
+
+	err := c.ShouldBindJSON(&input)
+	if err != nil {
+		errors := helper.FormatValidationError(err)
+		errorMessage := gin.H{"errors": errors}
+
+		response := helper.APIResponse("Email checking failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	IsEmailAvailable, err := h.userService.IsEmailAvailable(input)
+	if err != nil {
+		errorMessage := gin.H{"errors": "Server error"}
+
+		response := helper.APIResponse("Email checking failed", http.StatusUnprocessableEntity, "error", errorMessage)
+		c.JSON(http.StatusUnprocessableEntity, response)
+		return
+	}
+
+	data := gin.H{
+		"is_available": IsEmailAvailable,
+	}
+
+	metaMessage := "Email has been registered"
+
+	if IsEmailAvailable {
+		metaMessage = "Email is available"
+	}
+	response := helper.APIResponse(metaMessage, http.StatusOK, "success", data)
+	c.JSON(http.StatusOK, response)
+
+}
diff --git a/helper/helper.go b/helper/helper.go
new file mode 100644
index 0000000..70aad85
--- /dev/null
+++ b/helper/helper.go
@@ -0,0 +1,60 @@
+package helper
+
+import (
+	"errors"
+	"regexp"
+
+	"github.com/go-playground/validator/v10"
+)
+
+type Response struct {
+	Meta Meta        `json:"meta"`
+	Data interface{} `json:"data"`
+}
+
+type Meta struct {
+	Message string `json:"message"`
+	Code    int    `json:"code"`
+	Status  string `json:"status"`
+}
+
+func APIResponse(message string, code int, status string, data interface{}) Response {
+	meta := Meta{
+		Message: message,
+		Code:    code,
+		Status:  status,
+	}
+
+	jsonResponse := Response{
+		Meta: meta,
+		Data: data,
+	}
+
+	return jsonResponse
+}
+
+func FormatValidationError(err error) []string {
+	var errors []string
+
+	for _, e := range err.(validator.ValidationErrors) {
+		errors = append(errors, e.Error())
+	}
+
+	return errors
+}
+
+func ValidatePhoneNumber(phone string) error {
+	re := regexp.MustCompile(`^(08|628)[0-9]{8,11}$`)
+	if !re.MatchString(phone) {
+		return errors.New("phone number must start with '08' or '628' and minimum 11 digists and maximum 13 digits long")
+	}
+	return nil
+}
+
+func ValidateEmail(email string) error {
+	re := regexp.MustCompile(`^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`)
+	if !re.MatchString(email) {
+		return errors.New("invalid email address")
+	}
+	return nil
+}
diff --git a/input/category.go b/input/category.go
new file mode 100644
index 0000000..c0290a2
--- /dev/null
+++ b/input/category.go
@@ -0,0 +1,5 @@
+package input
+
+type CategoryInput struct {
+	Name string `json:"name" form:"name" validate:"required"`
+}
diff --git a/input/customer.go b/input/customer.go
new file mode 100644
index 0000000..fca4c12
--- /dev/null
+++ b/input/customer.go
@@ -0,0 +1,8 @@
+package input
+
+type CustomerInput struct {
+	Name    string `json:"name" validate:"required"`
+	Address string `json:"address" validate:"required"`
+	Phone   string `json:"phone" validate:"required, len=13, regexp=^08|628[0-9]{9,}$"`
+	Email   string `json:"email" validate:"optional, email"`
+}
diff --git a/input/discount.go b/input/discount.go
new file mode 100644
index 0000000..1c2be20
--- /dev/null
+++ b/input/discount.go
@@ -0,0 +1,6 @@
+package input
+
+type DiscountInput struct {
+	Name       string  `json:"name" form:"name" validate:"required"`
+	Percentage float64 `json:"percentage" form:"percentage" validate:"required"`
+}
diff --git a/input/product.go b/input/product.go
new file mode 100644
index 0000000..ee7a9e1
--- /dev/null
+++ b/input/product.go
@@ -0,0 +1,16 @@
+package input
+
+type ProductInput struct {
+	Name         string `json:"name" validate:"required"`
+	ProductType  string `json:"product_type" validate:"required"`
+	BasePrice    float64    `json:"base_price" validate:"required"`
+	SellingPrice float64    `json:"selling_price" validate:"required"`
+	Stock        int    `json:"stock" validate:"required"`
+	CodeProduct  string `json:"code_product" validate:"required"`
+	CategoryID   int    `json:"category_id" validate:"required"`
+	MinimumStock int    `json:"minimum_stock" validate:"required"`
+	Shelf        string `json:"shelf" validate:"required"`
+	Weight       int    `json:"weight" validate:"required"`
+	Discount     int    `json:"discount" validate:"required"`
+	Information  string `json:"information" validate:"required"`
+}
diff --git a/input/stock.go b/input/stock.go
new file mode 100644
index 0000000..3bc1786
--- /dev/null
+++ b/input/stock.go
@@ -0,0 +1,8 @@
+package input
+
+type StockInput struct {
+	Date        string  `json:"date"`
+	BuyingPrice float64 `json:"buying_price"`
+	Amount      int     `json:"amount"`
+	Information string  `json:"information"`
+}
diff --git a/input/supplier.go b/input/supplier.go
new file mode 100644
index 0000000..4b70f34
--- /dev/null
+++ b/input/supplier.go
@@ -0,0 +1,8 @@
+package input
+
+type SupplierInput struct {
+	Name    string `json:"name" validate:"required"`
+	Address string `json:"address" validate:"required"`
+	Email   string `json:"email" validate:"required,email"`
+	Phone   string `json:"phone" validate:"required,regexp=^08|628[0-9]{9,11}$"`
+}
diff --git a/input/user.go b/input/user.go
new file mode 100644
index 0000000..43c8e68
--- /dev/null
+++ b/input/user.go
@@ -0,0 +1,17 @@
+package input
+
+type RegisterUserInput struct {
+	Name     string `json:"name" binding:"required"`
+	Email    string `json:"email" binding:"required,email"`
+	Password string `json:"password" binding:"required"`
+	Phone    string `json:"phone" binding:"required"`
+}
+
+type LoginInput struct {
+	Email    string `json:"email" form:"email" binding:"required,email"`
+	Password string `json:"password" form:"password" binding:"required"`
+}
+
+type CheckEmailInput struct {
+	Email string `json:"email" binding:"required,email"`
+}
diff --git a/main.go b/main.go
new file mode 100644
index 0000000..c0d3f2e
--- /dev/null
+++ b/main.go
@@ -0,0 +1,145 @@
+package main
+
+import (
+	"api-kasirapp/auth"
+	"api-kasirapp/handler"
+	"api-kasirapp/helper"
+	"api-kasirapp/repository"
+	"api-kasirapp/service"
+	"fmt"
+	"log"
+	"net/http"
+	"os"
+	"strings"
+
+	"github.com/gin-gonic/gin"
+	"github.com/golang-jwt/jwt/v5"
+	"gorm.io/driver/postgres"
+	"gorm.io/gorm"
+
+	"github.com/joho/godotenv"
+)
+
+func main() {
+	loadEnv()
+	host := os.Getenv("DB_HOST")
+	username := os.Getenv("DB_USER")
+	password := os.Getenv("DB_PASSWORD")
+	databaseName := os.Getenv("DB_NAME")
+	port := os.Getenv("DB_PORT")
+
+	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Africa/Lagos", host, username, password, databaseName, port)
+	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
+	if err != nil {
+		log.Fatal(err.Error())
+	}
+
+	userRepository := repository.NewRepository(db)
+	categoryRepository := repository.NewCategoryRepository(db)
+	productRepository := repository.NewProductRepository(db)
+	customerRepository := repository.NewCustomerRepository(db)
+	supplierRepository := repository.NewSupplierRepository(db)
+	discountRepository := repository.NewDiscountRepository(db)
+
+	userService := service.NewService(userRepository)
+	categoryService := service.NewCategoryService(categoryRepository)
+	productService := service.NewProductService(productRepository)
+	customersService := service.NewCustomerService(customerRepository)
+	supplierService := service.NewSupplierService(supplierRepository)
+	discountService := service.NewDiscountService(discountRepository)
+	authService := auth.NewService()
+
+	userHandler := handler.NewUserHandler(userService, authService)
+	categoryHandler := handler.NewCategoryHandler(categoryService)
+	productHandler := handler.NewProductHandler(productService)
+	customerHandler := handler.NewCustomerHandler(customersService)
+	supplierHandler := handler.NewSupplierHandler(supplierService)
+	discountHandler := handler.NewDiscountHandler(discountService)
+	router := gin.Default()
+
+	api := router.Group("/api/v1")
+	api.POST("/users", userHandler.RegisterUser)
+	api.POST("/sessions", userHandler.Login)
+	api.POST("/email_checkers", userHandler.CheckEmailAvailability)
+	api.POST("/categories", categoryHandler.CreateCategory)
+	api.POST("/products", productHandler.CreateProduct)
+	api.POST("/customers", customerHandler.CreateCustomer)
+	api.POST("/suppliers", supplierHandler.CreateSupplier)
+	api.POST("/discounts", discountHandler.CreateDiscount)
+
+	api.GET("/categories", categoryHandler.GetCategories)
+	api.GET("/categories/:id", categoryHandler.GetCategoryById)
+	api.GET("/products", productHandler.GetProducts)
+	api.GET("/products/:id", productHandler.GetProductById)
+	api.GET("/customers", customerHandler.GetCustomers)
+	api.GET("/customers/:id", customerHandler.GetCustomerById)
+	api.GET("/suppliers", supplierHandler.GetSuppliers)
+	api.GET("/suppliers/:id", supplierHandler.GetSupplierById)
+	api.GET("/discounts", discountHandler.GetDiscounts)
+	api.GET("/discounts/:id", discountHandler.GetDiscountById)
+	api.GET("/category-products/:id", categoryHandler.GetCategoryProducts)
+
+	api.PUT("/categories/:id", categoryHandler.UpdateCategory)
+	api.PUT("/products/:id", productHandler.UpdateProduct)
+	api.PUT("/customers/:id", customerHandler.UpdateCustomer)
+	api.PUT("/suppliers/:id", supplierHandler.UpdateSupplier)
+	api.PUT("/discounts/:id", discountHandler.UpdateDiscount)
+
+	api.DELETE("/categories/:id", categoryHandler.DeleteCategory)
+	api.DELETE("/products/:id", productHandler.DeleteProduct)
+	api.DELETE("/customers/:id", customerHandler.DeleteCustomer)
+	api.DELETE("/suppliers/:id", supplierHandler.DeleteSupplier)
+	api.DELETE("/discounts/:id", discountHandler.DeleteDiscount)
+
+	router.Run()
+}
+
+func loadEnv() {
+	err := godotenv.Load()
+	if err != nil {
+		log.Fatal("Error loading .env file")
+	}
+}
+
+func authMiddleware(authService auth.Service, userService service.UserService) gin.HandlerFunc {
+	return func(c *gin.Context) {
+		authHeader := c.GetHeader("Authorization")
+
+		if !strings.Contains(authHeader, "Bearer") {
+			response := helper.APIResponse("Unauthorized", http.StatusUnauthorized, "error", nil)
+			c.AbortWithStatusJSON(http.StatusUnauthorized, response)
+			return
+		}
+
+		tokenString := ""
+		arrayToken := strings.Split(authHeader, " ")
+		if len(arrayToken) == 2 {
+			tokenString = arrayToken[1]
+		}
+
+		token, err := authService.ValidateToken(tokenString)
+		if err != nil {
+			response := helper.APIResponse("Unauthorized", http.StatusUnauthorized, "error", nil)
+			c.AbortWithStatusJSON(http.StatusUnauthorized, response)
+			return
+		}
+
+		claim, ok := token.Claims.(jwt.MapClaims)
+		if !ok || !token.Valid {
+			response := helper.APIResponse("Unauthorized", http.StatusUnauthorized, "error", nil)
+			c.AbortWithStatusJSON(http.StatusUnauthorized, response)
+			return
+		}
+
+		userID := int(claim["user_id"].(float64))
+		user, err := userService.GetUserByID(userID)
+		if err != nil {
+			response := helper.APIResponse("Unauthorized", http.StatusUnauthorized, "error", nil)
+			c.AbortWithStatusJSON(http.StatusUnauthorized, response)
+			return
+		}
+
+		c.Set("currentUser", user)
+	}
+
+}
diff --git a/models/category_entity.go b/models/category_entity.go
new file mode 100644
index 0000000..f7e0bd8
--- /dev/null
+++ b/models/category_entity.go
@@ -0,0 +1,11 @@
+package models
+
+import "time"
+
+type Category struct {
+	ID        int
+	Name      string
+	Product  []Product
+	CreatedAt time.Time
+	UpdatedAt time.Time
+}
\ No newline at end of file
diff --git a/models/customer_entity.go b/models/customer_entity.go
new file mode 100644
index 0000000..6637eca
--- /dev/null
+++ b/models/customer_entity.go
@@ -0,0 +1,13 @@
+package models
+
+import "time"
+
+type Customer struct {
+	ID        int
+	Name      string
+	Address   string
+	Phone     string
+	Email     string
+	CreatedAt time.Time
+	UpdatedAt time.Time
+}
diff --git a/models/discount_entity.go b/models/discount_entity.go
new file mode 100644
index 0000000..381c3b2
--- /dev/null
+++ b/models/discount_entity.go
@@ -0,0 +1,11 @@
+package models
+
+import "time"
+
+type Discount struct {
+	ID         int       `json:"id"`
+	Name       string    `json:"name"`
+	Percentage float64   `json:"percentage"`
+	CreatedAt  time.Time `json:"created_at"`
+	UpdatedAt  time.Time `json:"updated_at"`
+}
diff --git a/models/product_entity.go b/models/product_entity.go
new file mode 100644
index 0000000..b039089
--- /dev/null
+++ b/models/product_entity.go
@@ -0,0 +1,23 @@
+package models
+
+import (
+	"time"
+)
+
+type Product struct {
+	ID           int
+	Name         string
+	ProductType  string
+	BasePrice    float64
+	SellingPrice float64
+	Stock        int
+	CodeProduct  string
+	CategoryID   int
+	MinimumStock int
+	Shelf        string
+	Weight       int
+	Discount     int
+	Information  string
+	CreatedAt    time.Time
+	UpdatedAt    time.Time
+}
diff --git a/models/stock_entity.go b/models/stock_entity.go
new file mode 100644
index 0000000..f0f7257
--- /dev/null
+++ b/models/stock_entity.go
@@ -0,0 +1,13 @@
+package models
+
+import "time"
+
+type Stock struct {
+	ID           int       `json:"id"`
+	Date         string    `json:"date"`
+	BuyingPrice  float64   `json:"buying_price"`
+	Amount       int       `json:"amount"`
+	Information  string    `json:"information"`
+	CreatedAt    time.Time `json:"created_at"`
+	UpdatedAt    time.Time `json:"updated_at"`
+}
diff --git a/models/supplier_entity.go b/models/supplier_entity.go
new file mode 100644
index 0000000..4c73be7
--- /dev/null
+++ b/models/supplier_entity.go
@@ -0,0 +1,14 @@
+package models
+
+import "time"
+
+type Supplier struct {
+	ID        int
+	Name      string
+	Address   string
+	Email     string
+	Phone     string
+	Code      int
+	CreatedAt time.Time
+	UpdatedAt time.Time
+}
diff --git a/models/user_entity.go b/models/user_entity.go
new file mode 100644
index 0000000..f7086c2
--- /dev/null
+++ b/models/user_entity.go
@@ -0,0 +1,14 @@
+package models
+
+import "time"
+
+type User struct {
+	ID           int
+	Email        string
+	PasswordHash string
+	Name         string
+	Phone        string
+	IsActive     bool
+	CreatedAt    time.Time
+	UpdatedAt    time.Time
+}
diff --git a/repository/category.go b/repository/category.go
new file mode 100644
index 0000000..26a8c01
--- /dev/null
+++ b/repository/category.go
@@ -0,0 +1,95 @@
+package repository
+
+import (
+	"api-kasirapp/models"
+	"gorm.io/gorm"
+)
+
+type CategoryRepository interface {
+	SaveCategory(category models.Category) (models.Category, error)
+	FindCategoryByID(ID int) (models.Category, error)
+	FindCategories() ([]models.Category, error)
+	FindCategoryByName(name string) (models.Category, error)
+	UpdateCategory(category models.Category) (models.Category, error)
+	DeleteCategory(ID int) (models.Category, error)
+	FindCategoryProducts(ID int) ([]models.Product, error)
+}
+
+type categoryRepository struct {
+	db *gorm.DB
+}
+
+func NewCategoryRepository(db *gorm.DB) *categoryRepository {
+	return &categoryRepository{db}
+}
+
+func (r *categoryRepository )FindCategoryProducts(ID int) ([]models.Product, error){
+	var products []models.Product
+
+	err := r.db.Where("category_id = ?", ID).Find(&products).Error
+	if err != nil {
+		return products, err
+	}
+	return products, nil
+}
+
+func (r *categoryRepository) SaveCategory(category models.Category) (models.Category, error) {
+	err := r.db.Create(&category).Error
+	if err != nil {
+		return category, err
+	}
+
+	return category, nil
+}
+
+func (r *categoryRepository) FindCategoryByID(ID int) (models.Category, error) {
+	var category models.Category
+
+	err := r.db.Where("id = ?", ID).First(&category).Error
+	if err != nil {
+		return category, err
+	}
+
+	return category, nil
+}
+
+func (r *categoryRepository) FindCategories() ([]models.Category, error) {
+	var categories []models.Category
+
+	err := r.db.Find(&categories).Error
+	if err != nil {
+		return categories, err
+	}
+
+	return categories, nil
+}
+
+func (r *categoryRepository) FindCategoryByName(name string) (models.Category, error) {
+	var category models.Category
+
+	err := r.db.Where("name = ?", name).Find(&category).Error
+	if err != nil {
+		return category, err
+	}
+
+	return category, nil
+}
+
+func (r *categoryRepository) UpdateCategory(category models.Category) (models.Category, error) {
+	err := r.db.Save(&category).Error
+	if err != nil {
+		return category, err
+	}
+
+	return category, nil
+}
+
+func (r *categoryRepository) DeleteCategory(ID int) (models.Category, error) {
+	var category models.Category
+
+	err := r.db.Where("id = ?", ID).First(&category).Error
+	if err != nil {
+		return category, err
+	}
+	return category, nil
+}
diff --git a/repository/customer.go b/repository/customer.go
new file mode 100644
index 0000000..39ba1d6
--- /dev/null
+++ b/repository/customer.go
@@ -0,0 +1,80 @@
+package repository
+
+import (
+	"api-kasirapp/models"
+	"errors"
+
+	"gorm.io/gorm"
+)
+
+type CustomerRepository interface {
+	SaveCustomer(customer models.Customer) (models.Customer, error)
+	FindCustomers(limit int, offset int) ([]models.Customer, error)
+	FindCustomerByID(ID int) (models.Customer, error)
+	UpdateCustomer(customer models.Customer) (models.Customer, error)
+	DeleteCustomer(ID int) (models.Customer, error)
+}
+
+type customerRepository struct {
+	db *gorm.DB
+}
+
+func NewCustomerRepository(db *gorm.DB) *customerRepository {
+	return &customerRepository{db}
+}
+
+func (r *customerRepository) SaveCustomer(customer models.Customer) (models.Customer, error) {
+	err := r.db.Create(&customer).Error
+	if err != nil {
+		return customer, err
+	}
+
+	return customer, nil
+}
+
+func (r *customerRepository) FindCustomers(limit int, offset int) ([]models.Customer, error) {
+	var customers []models.Customer
+
+	err := r.db.Limit(limit).Offset(offset).Find(&customers).Error
+	if err != nil {
+		return customers, err
+	}
+
+	return customers, nil
+}
+
+func (r *customerRepository) FindCustomerByID(ID int) (models.Customer, error) {
+	var customer models.Customer
+	err := r.db.Where("id = ?", ID).Find(&customer).Error
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return customer, errors.New("customer not found")
+		}
+		return customer, err
+	}
+
+	return customer, nil
+}
+
+func (r *customerRepository) UpdateCustomer(customer models.Customer) (models.Customer, error) {
+	err := r.db.Save(&customer).Error
+	if err != nil {
+		return customer, err
+	}
+
+	return customer, nil
+}
+
+func (r *customerRepository) DeleteCustomer(ID int) (models.Customer, error) {
+	var customer models.Customer
+
+	err := r.db.Where("id = ?", ID).First(&customer).Error
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return customer, errors.New("customer not found")
+		}
+		return customer, err
+	}
+
+	return customer, nil
+}
diff --git a/repository/discount.go b/repository/discount.go
new file mode 100644
index 0000000..f9c3416
--- /dev/null
+++ b/repository/discount.go
@@ -0,0 +1,93 @@
+package repository
+
+import (
+	"api-kasirapp/models"
+	"gorm.io/gorm"
+)
+
+type DiscountRepository interface {
+	SaveDiscount(discount models.Discount) (models.Discount, error)
+	FindDiscountByID(id int) (models.Discount, error)
+	FindDiscounts() ([]models.Discount, error)
+	UpdateDiscount(ID int, discount models.Discount) (models.Discount, error)
+	DeleteDiscount(ID int) (models.Discount, error)
+}
+
+type discountRepository struct {
+	db *gorm.DB
+}
+
+func NewDiscountRepository(db *gorm.DB) *discountRepository {
+	return &discountRepository{db}
+}
+
+func (r *discountRepository) SaveDiscount(discount models.Discount) (models.Discount, error) {
+	var availableID *int
+
+	if err := r.db.Raw("SELECT MIN(id) FROM discounts WHERE id NOT IN (SELECT id FROM discounts)").Scan(&availableID).Error; err != nil {
+		return discount, err
+	}
+
+	if availableID != nil {
+		discount.ID = *availableID
+	} else {
+		var maxID *int
+		if err := r.db.Model(&models.Discount{}).Select("MAX(id)").Scan(&maxID).Error; err != nil {
+			return discount, err
+		}
+		if maxID != nil {
+			discount.ID = *maxID + 1
+		} else {
+			discount.ID = 1
+		}
+	}
+	err := r.db.Create(&discount).Error
+	if err != nil {
+		return discount, err
+	}
+	return discount, nil
+}
+
+func (r *discountRepository) FindDiscountByID(id int) (models.Discount, error) {
+	var discount models.Discount
+	err := r.db.Where("id = ?", id).First(&discount).Error
+	if err != nil {
+		return discount, err
+	}
+	return discount, nil
+}
+
+func (r *discountRepository) FindDiscounts() ([]models.Discount, error) {
+	var discounts []models.Discount
+	err := r.db.Find(&discounts).Error
+	if err != nil {
+		return discounts, err
+	}
+	return discounts, nil
+}
+
+func (r *discountRepository) UpdateDiscount(ID int, input models.Discount) (models.Discount, error) {
+	var discount models.Discount
+	if err := r.db.Where("id = ?", ID).First(&discount).Error; err != nil {
+		return discount, err
+	}
+	discount.Name = input.Name
+	discount.Percentage = input.Percentage
+	err := r.db.Save(&discount).Error
+	if err != nil {
+		return discount, err
+	}
+
+	return discount, nil
+}
+
+func (r *discountRepository) DeleteDiscount(ID int) (models.Discount, error) {
+	var discount models.Discount
+
+	err := r.db.Where("id = ?", ID).First(&discount).Error
+	if err != nil {
+		return discount, err
+	}
+
+	return discount, nil
+}
diff --git a/repository/product.go b/repository/product.go
new file mode 100644
index 0000000..12a6f6d
--- /dev/null
+++ b/repository/product.go
@@ -0,0 +1,110 @@
+package repository
+
+import (
+	"api-kasirapp/models"
+	"errors"
+
+	"gorm.io/gorm"
+)
+
+type ProductRepository interface {
+	Save(product models.Product) (models.Product, error)
+	FindByID(ID int) (models.Product, error)
+	FindByName(name string) (models.Product, error)
+	FindAll() ([]models.Product, error)
+	FindByCategoryID(categoryID int) ([]models.Product, error)
+	Update(ID int, product models.Product) (models.Product, error)
+	Delete(ID int) (models.Product, error)
+}
+
+func (r *productRepository) FindByCategoryID(categoryID int) ([]models.Product, error) {
+	var products []models.Product
+
+	err := r.db.Where("category_id = ?", categoryID).Find(&products).Error
+	if err != nil {
+		return products, err
+	}
+	return products, nil
+}
+
+type productRepository struct {
+	db *gorm.DB
+}
+
+func NewProductRepository(db *gorm.DB) *productRepository {
+	return &productRepository{db}
+}
+
+func (r *productRepository) Save(product models.Product) (models.Product, error) {
+	var existingProduct models.Product
+
+	if err := r.db.Where("code_product = ?", product.CodeProduct).First(&existingProduct).Error; err == nil {
+		return product, errors.New("product code already exists") // Return error if product code exists
+	}
+
+	err := r.db.Create(&product).Error
+	if err != nil {
+		return product, err
+	}
+
+	return product, nil
+}
+
+func (r *productRepository) FindByID(ID int) (models.Product, error) {
+	var product models.Product
+
+	err := r.db.Where("id = ?", ID).Find(&product).Error
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return product, errors.New("product not found")
+		}
+		return product, err
+
+	}
+	return product, nil
+}
+
+func (r *productRepository) FindByName(name string) (models.Product, error) {
+	var product models.Product
+
+	err := r.db.Where("name = ?", name).Find(&product).Error
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return product, errors.New("product not found")
+		}
+		return product, err
+	}
+	return product, nil
+}
+
+func (r *productRepository) FindAll() ([]models.Product, error) {
+	var products []models.Product
+
+	err := r.db.Find(&products).Error
+	if err != nil {
+		return products, err
+	}
+	return products, nil
+}
+
+func (r *productRepository) Update(ID int, product models.Product) (models.Product, error) {
+	err := r.db.Save(&product).Error
+	if err != nil {
+		return product, err
+	}
+	return product, nil
+}
+
+func (r *productRepository) Delete(ID int) (models.Product, error) {
+	var product models.Product
+
+	err := r.db.Where("id = ?", ID).First(&product).Error
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return product, errors.New("product not found")
+		}
+		return product, err
+	}
+
+	return product, nil
+}
diff --git a/repository/stock.go b/repository/stock.go
new file mode 100644
index 0000000..50a4378
--- /dev/null
+++ b/repository/stock.go
@@ -0,0 +1 @@
+package repository
diff --git a/repository/supplier.go b/repository/supplier.go
new file mode 100644
index 0000000..fb2b73c
--- /dev/null
+++ b/repository/supplier.go
@@ -0,0 +1,80 @@
+package repository
+
+import (
+	"api-kasirapp/models"
+	"gorm.io/gorm"
+)
+
+type SupplierRepository interface {
+	Save(supplier models.Supplier) (models.Supplier, error)
+	FindByID(ID int) (models.Supplier, error)
+	FindByName(name string) (models.Supplier, error)
+	FindAll(limit int, offset int) ([]models.Supplier, error)
+	Update(ID int, supplier models.Supplier) (models.Supplier, error)
+	Delete(ID int) (models.Supplier, error)
+}
+
+type supplierRepository struct {
+	db *gorm.DB
+}
+
+func NewSupplierRepository(db *gorm.DB) *supplierRepository {
+	return &supplierRepository{db}
+}
+
+func (r *supplierRepository) Save(supplier models.Supplier) (models.Supplier, error) {
+	if err := r.db.Create(&supplier).Error; err != nil {
+		return supplier, err
+	}
+
+	return supplier, nil
+}
+
+func (r *supplierRepository) FindByID(ID int) (models.Supplier, error) {
+	var supplier models.Supplier
+
+	err := r.db.Where("id = ?", ID).Find(&supplier).Error
+	if err != nil {
+		return supplier, err
+	}
+	return supplier, nil
+}
+
+func (r *supplierRepository) FindByName(name string) (models.Supplier, error) {
+	var supplier models.Supplier
+
+	err := r.db.Where("name = ?", name).Find(&supplier).Error
+	if err != nil {
+		return supplier, err
+	}
+	return supplier, nil
+}
+
+func (r *supplierRepository) FindAll(limit int, offset int) ([]models.Supplier, error) {
+	var suppliers []models.Supplier
+
+	err := r.db.Limit(limit).Offset(offset).Find(&suppliers).Error
+	if err != nil {
+		return suppliers, err
+	}
+
+	return suppliers, nil
+}
+
+func (r *supplierRepository) Update(ID int, supplier models.Supplier) (models.Supplier, error) {
+	if err := r.db.Model(&models.Supplier{}).Where("id = ?", ID).Updates(&supplier).Error; err != nil {
+		return supplier, err
+	}
+	return supplier, nil
+}
+
+func (r *supplierRepository) Delete(ID int) (models.Supplier, error) {
+	var supplier models.Supplier
+
+	err := r.db.Where("id = ?", ID).Delete(&supplier).Error
+	if err != nil {
+		return supplier, err
+	}
+
+	return supplier, nil
+}
diff --git a/repository/user.go b/repository/user.go
new file mode 100644
index 0000000..d2bab37
--- /dev/null
+++ b/repository/user.go
@@ -0,0 +1,100 @@
+package repository
+
+import (
+	"api-kasirapp/models"
+	"gorm.io/gorm"
+)
+
+type UserRepository interface {
+	Save(user models.User) (models.User, error)
+	FindByEmail(email string) (models.User, error)
+	FindByPhone(phone int) (models.User, error)
+	FindByID(ID int) (models.User, error)
+	Update(user models.User) (models.User, error)
+	FindAll() ([]models.User, error)
+	ActivateUser(ID int) (models.User, error)
+}
+
+type userRepository struct {
+	db *gorm.DB
+}
+
+func NewRepository(db *gorm.DB) *userRepository {
+	return &userRepository{db}
+}
+
+func (r *userRepository) Save(user models.User) (models.User, error) {
+	err := r.db.Create(&user).Error
+	if err != nil {
+		return user, err
+	}
+
+	return user, nil
+}
+
+func (r *userRepository) FindByEmail(email string) (models.User, error) {
+	var user models.User
+
+	err := r.db.Where("email = ?", email).Find(&user).Error
+	if err != nil {
+		return user, err
+	}
+
+	return user, nil
+}
+
+func (r *userRepository) FindByPhone(phone int) (models.User, error) {
+	var user models.User
+	err := r.db.Where("phone = ?", phone).Find(&user).Error
+	if err != nil {
+		return user, err
+	}
+	return user, nil
+}
+
+func (r *userRepository) FindByID(ID int) (models.User, error) {
+	var user models.User
+
+	err := r.db.Where("id = ?", ID).Find(&user).Error
+	if err != nil {
+		return user, err
+	}
+
+	return user, nil
+}
+
+func (r *userRepository) Update(user models.User) (models.User, error) {
+	err := r.db.Save(&user).Error
+	if err != nil {
+		return user, err
+	}
+	return user, nil
+}
+
+func (r *userRepository) FindAll() ([]models.User, error) {
+	var users []models.User
+
+	err := r.db.Find(&users).Error
+	if err != nil {
+		return users, err
+	}
+
+	return users, nil
+}
+
+func (r *userRepository) ActivateUser(ID int) (models.User, error) {
+	var user models.User
+
+	err := r.db.Where("id = ?", ID).Find(&user).Error
+	if err != nil {
+		return user, err
+	}
+
+	user.IsActive = true
+	err = r.db.Save(&user).Error
+	if err != nil {
+		return user, err
+	}
+
+	return user, nil
+}
diff --git a/service/category.go b/service/category.go
new file mode 100644
index 0000000..8141fbe
--- /dev/null
+++ b/service/category.go
@@ -0,0 +1,101 @@
+package service
+
+import (
+	"api-kasirapp/input"
+	"api-kasirapp/models"
+	"api-kasirapp/repository"
+	"errors"
+
+	"gorm.io/gorm"
+)
+
+type CategoryService interface {
+	SaveCategory(input input.CategoryInput) (models.Category, error)
+	FindCategoryByID(ID int) (models.Category, error)
+	FindCategories() ([]models.Category, error)
+	UpdateCategory(ID int, input input.CategoryInput) (models.Category, error)
+	DeleteCategory(ID int) (models.Category, error)
+	GetCategoryProducts(ID int) ([]models.Product, error)
+}
+
+type categoryService struct {
+	repository repository.CategoryRepository
+}
+
+func NewCategoryService(repository repository.CategoryRepository) *categoryService {
+	return &categoryService{repository}
+}
+
+func (s *categoryService)GetCategoryProducts(ID int) ([]models.Product, error){
+	products, err := s.repository.FindCategoryProducts(ID)
+	if err != nil {
+		return products, err
+	}
+
+	return products, nil
+}
+func (s *categoryService) SaveCategory(input input.CategoryInput) (models.Category, error) {
+	category := models.Category{}
+
+	category.Name = input.Name
+
+	newCategory, err := s.repository.SaveCategory(category)
+	if err != nil {
+		return newCategory, err
+	}
+
+	return newCategory, nil
+}
+
+func (s *categoryService) FindCategoryByID(ID int) (models.Category, error) {
+	category, err := s.repository.FindCategoryByID(ID)
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+
+
+			return category, errors.New("category not found")
+		}
+		return category, err
+	}
+
+	return category, nil
+}
+
+func (s *categoryService) FindCategories() ([]models.Category, error) {
+	categories, err := s.repository.FindCategories()
+	if err != nil {
+		return categories, err
+	}
+
+	return categories, nil
+}
+
+func (s *categoryService) UpdateCategory(ID int, input input.CategoryInput) (models.Category, error) {
+	category, err := s.repository.FindCategoryByID(ID)
+	if err != nil {
+		return category, err
+	}
+
+	category.Name = input.Name
+
+	updatedCategory, err := s.repository.UpdateCategory(category)
+	if err != nil {
+		return updatedCategory, err
+	}
+
+	return updatedCategory, nil
+}
+
+func (s *categoryService) DeleteCategory(ID int) (models.Category, error) {
+	category, err := s.repository.FindCategoryByID(ID)
+	if err != nil {
+		return category, err
+	}
+
+	deletedCategory, err := s.repository.DeleteCategory(ID)
+	if err != nil {
+		return deletedCategory, err
+	}
+
+	return deletedCategory, nil
+}
diff --git a/service/customer.go b/service/customer.go
new file mode 100644
index 0000000..be75fcc
--- /dev/null
+++ b/service/customer.go
@@ -0,0 +1,109 @@
+package service
+
+import (
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/models"
+	repository2 "api-kasirapp/repository"
+	"errors"
+
+	"gorm.io/gorm"
+)
+
+type CustomerService interface {
+	CreateCustomer(input input.CustomerInput) (models.Customer, error)
+	GetCustomers(limit int, offset int) ([]models.Customer, error)
+	GetCustomerByID(ID int) (models.Customer, error)
+	UpdateCustomer(ID int, input input.CustomerInput) (models.Customer, error)
+	DeleteCustomer(ID int) (models.Customer, error)
+}
+
+type customerService struct {
+	repository repository2.CustomerRepository
+}
+
+func NewCustomerService(repository repository2.CustomerRepository) *customerService {
+	return &customerService{repository}
+}
+
+func (s *customerService) CreateCustomer(input input.CustomerInput) (models.Customer, error) {
+	customer := models.Customer{}
+
+	customer.Name = input.Name
+	customer.Address = input.Address
+	customer.Phone = input.Phone
+	customer.Email = input.Email
+
+	if err := helper.ValidateEmail(customer.Email); err != nil {
+		return models.Customer{}, err
+	}
+
+	if err := helper.ValidatePhoneNumber(customer.Phone); err != nil {
+		return models.Customer{}, err
+	}
+
+	newCustomer, err := s.repository.SaveCustomer(customer)
+	if err != nil {
+		return newCustomer, err
+	}
+
+	return newCustomer, nil
+
+}
+
+func (s *customerService) GetCustomers(limit int, offset int) ([]models.Customer, error) {
+	customers, err := s.repository.FindCustomers(limit, offset)
+	if err != nil {
+		return customers, err
+	}
+
+	return customers, nil
+}
+
+func (s *customerService) GetCustomerByID(ID int) (models.Customer, error) {
+	customer, err := s.repository.FindCustomerByID(ID)
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return customer, errors.New("category not found")
+		}
+		return customer, err
+	}
+
+	return customer, nil
+}
+
+func (s *customerService) UpdateCustomer(ID int, input input.CustomerInput) (models.Customer, error) {
+	customer, err := s.repository.FindCustomerByID(ID)
+	if err != nil {
+		if errors.Is(err, gorm.ErrRecordNotFound) {
+			return customer, errors.New("customer not found")
+		}
+		return customer, err
+	}
+
+	customer.Name = input.Name
+	customer.Address = input.Address
+	customer.Phone = input.Phone
+	customer.Email = input.Email
+
+	updatedCustomer, err := s.repository.UpdateCustomer(customer)
+	if err != nil {
+		return updatedCustomer, err
+	}
+
+	return updatedCustomer, nil
+}
+
+func (s *customerService) DeleteCustomer(ID int) (models.Customer, error) {
+	customer, err := s.repository.FindCustomerByID(ID)
+	if err != nil {
+		return customer, err
+	}
+
+	deletedCustomer, err := s.repository.DeleteCustomer(ID)
+	if err != nil {
+		return deletedCustomer, err
+	}
+
+	return deletedCustomer, nil
+}
diff --git a/service/discount.go b/service/discount.go
new file mode 100644
index 0000000..9bfd127
--- /dev/null
+++ b/service/discount.go
@@ -0,0 +1,80 @@
+package service
+
+import (
+	"api-kasirapp/input"
+	"api-kasirapp/models"
+	repository2 "api-kasirapp/repository"
+)
+
+type DiscountService interface {
+	Create(input input.DiscountInput) (models.Discount, error)
+	GetByID(id int) (models.Discount, error)
+	GetAll() ([]models.Discount, error)
+	Update(ID int, input input.DiscountInput) (models.Discount, error)
+	Delete(ID int) (models.Discount, error)
+}
+
+type discountService struct {
+	repository repository2.DiscountRepository
+}
+
+func NewDiscountService(repository repository2.DiscountRepository) *discountService {
+	return &discountService{repository}
+}
+
+func (s *discountService) Create(input input.DiscountInput) (models.Discount, error) {
+	discount := models.Discount{
+		Name:       input.Name,
+		Percentage: input.Percentage,
+	}
+	newDiscount, err := s.repository.SaveDiscount(discount)
+	if err != nil {
+		return newDiscount, err
+	}
+	return newDiscount, nil
+}
+
+func (s *discountService) GetByID(id int) (models.Discount, error) {
+	discount, err := s.repository.FindDiscountByID(id)
+	if err != nil {
+		return discount, err
+	}
+	return discount, nil
+}
+
+func (s *discountService) GetAll() ([]models.Discount, error) {
+	discounts, err := s.repository.FindDiscounts()
+	if err != nil {
+		return discounts, err
+	}
+	return discounts, nil
+}
+
+func (s *discountService) Update(ID int, input input.DiscountInput) (models.Discount, error) {
+	discount, err := s.repository.FindDiscountByID(ID)
+	if err != nil {
+		return discount, err
+	}
+
+	discount.Name = input.Name
+	discount.Percentage = input.Percentage
+
+	updatedDiscount, err := s.repository.UpdateDiscount(ID, discount)
+	if err != nil {
+		return updatedDiscount, err
+	}
+	return updatedDiscount, nil
+}
+
+func (s *discountService) Delete(ID int) (models.Discount, error) {
+	discount, err := s.repository.FindDiscountByID(ID)
+	if err != nil {
+		return discount, err
+	}
+
+	deletedDiscount, err := s.repository.DeleteDiscount(ID)
+	if err != nil {
+		return deletedDiscount, err
+	}
+	return deletedDiscount, nil
+}
diff --git a/service/product.go b/service/product.go
new file mode 100644
index 0000000..355d21f
--- /dev/null
+++ b/service/product.go
@@ -0,0 +1,116 @@
+package service
+
+import (
+	"api-kasirapp/input"
+	"api-kasirapp/models"
+	"api-kasirapp/repository"
+)
+
+type ProductService interface {
+	CreateProduct(input input.ProductInput) (models.Product, error)
+	FindProductByID(ID int) (models.Product, error)
+	FindByName(name string) (models.Product, error)
+	FindAll() ([]models.Product, error)
+	UpdateProduct(ID int, input input.ProductInput) (models.Product, error)
+	DeleteProduct(ID int) (models.Product, error)
+}
+
+type productService struct {
+	productRepository repository.ProductRepository
+}
+
+func NewProductService(productRepository repository.ProductRepository) *productService {
+	return &productService{productRepository}
+}
+
+func (s *productService) CreateProduct(input input.ProductInput) (models.Product, error) {
+	product := models.Product{}
+
+	product.Name = input.Name
+	product.ProductType = input.ProductType
+	product.BasePrice = input.BasePrice
+	product.SellingPrice = input.SellingPrice
+	product.Stock = input.Stock
+	product.CodeProduct = input.CodeProduct
+	product.CategoryID = input.CategoryID
+	product.MinimumStock = input.MinimumStock
+	product.Shelf = input.Shelf
+	product.Weight = input.Weight
+	product.Discount = input.Discount
+	product.Information = input.Information
+
+	newProduct, err := s.productRepository.Save(product)
+	if err != nil {
+		return newProduct, err
+	}
+
+	return newProduct, nil
+}
+
+func (s *productService) FindProductByID(ID int) (models.Product, error) {
+	product, err := s.productRepository.FindByID(ID)
+	if err != nil {
+		return product, err
+	}
+
+	return product, nil
+}
+
+func (s *productService) FindByName(name string) (models.Product, error) {
+	product, err := s.productRepository.FindByName(name)
+	if err != nil {
+		return product, err
+	}
+
+	return product, nil
+}
+
+func (s *productService) FindAll() ([]models.Product, error) {
+	products, err := s.productRepository.FindAll()
+	if err != nil {
+		return products, err
+	}
+
+	return products, nil
+}
+
+func (s *productService) UpdateProduct(ID int, input input.ProductInput) (models.Product, error) {
+	product, err := s.productRepository.FindByID(ID)
+	if err != nil {
+		return product, err
+	}
+
+	product.Name = input.Name
+	product.ProductType = input.ProductType
+	product.BasePrice = input.BasePrice
+	product.SellingPrice = input.SellingPrice
+	product.Stock = input.Stock
+	product.CodeProduct = input.CodeProduct
+	product.CategoryID = input.CategoryID
+	product.MinimumStock = input.MinimumStock
+	product.Shelf = input.Shelf
+	product.Weight = input.Weight
+	product.Discount = input.Discount
+	product.Information = input.Information
+
+	updatedProduct, err := s.productRepository.Update(ID, product)
+	if err != nil {
+		return updatedProduct, err
+	}
+
+	return updatedProduct, nil
+}
+
+func (s *productService) DeleteProduct(ID int) (models.Product, error) {
+	product, err := s.productRepository.FindByID(ID)
+	if err != nil {
+		return product, err
+	}
+
+	deletedProduct, err := s.productRepository.Delete(ID)
+	if err != nil {
+		return deletedProduct, err
+	}
+
+	return deletedProduct, nil
+}
diff --git a/service/stock.go b/service/stock.go
new file mode 100644
index 0000000..6d43c33
--- /dev/null
+++ b/service/stock.go
@@ -0,0 +1 @@
+package service
diff --git a/service/supplier.go b/service/supplier.go
new file mode 100644
index 0000000..79dd483
--- /dev/null
+++ b/service/supplier.go
@@ -0,0 +1,109 @@
+package service
+
+import (
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/models"
+	"api-kasirapp/repository"
+	"time"
+
+	"golang.org/x/exp/rand"
+)
+
+type SupplierService interface {
+	CreateSupplier(Input input.SupplierInput) (models.Supplier, error)
+	GetByID(ID int) (models.Supplier, error)
+	GetByName(name string) (models.Supplier, error)
+	GetAll(limit int, offset int) ([]models.Supplier, error)
+	Update(ID int, Input input.SupplierInput) (models.Supplier, error)
+	Delete(ID int) (models.Supplier, error)
+}
+
+type supplierService struct {
+	repository repository.SupplierRepository
+}
+
+func NewSupplierService(repository repository.SupplierRepository) *supplierService {
+	return &supplierService{repository}
+}
+
+func (s *supplierService) CreateSupplier(input input.SupplierInput) (models.Supplier, error) {
+	supplier := models.Supplier{
+		Name:    input.Name,
+		Address: input.Address,
+		Email:   input.Email,
+		Phone:   input.Phone,
+	}
+
+	rand.Seed(uint64(time.Now().UnixNano()))
+	supplier.Code = rand.Intn(90000) + 10000
+
+	if err := helper.ValidateEmail(supplier.Email); err != nil {
+		return models.Supplier{}, err
+	}
+
+	if err := helper.ValidatePhoneNumber(supplier.Phone); err != nil {
+		return models.Supplier{}, err
+	}
+
+	newSupplier, err := s.repository.Save(supplier)
+	if err != nil {
+		return newSupplier, err
+	}
+
+	return newSupplier, nil
+}
+
+func (s *supplierService) GetByID(ID int) (models.Supplier, error) {
+	supplier, err := s.repository.FindByID(ID)
+	if err != nil {
+		return supplier, err
+	}
+	return supplier, nil
+}
+
+func (s *supplierService) GetByName(name string) (models.Supplier, error) {
+	supplier, err := s.repository.FindByName(name)
+	if err != nil {
+		return supplier, err
+	}
+	return supplier, nil
+}
+
+func (s *supplierService) GetAll(limit int, offset int) ([]models.Supplier, error) {
+	suppliers, err := s.repository.FindAll(limit, offset)
+	if err != nil {
+		return suppliers, err
+	}
+	return suppliers, nil
+}
+
+func (s *supplierService) Update(ID int, input input.SupplierInput) (models.Supplier, error) {
+	supplier, err := s.repository.FindByID(ID)
+	if err != nil {
+		return supplier, err
+	}
+
+	supplier.Name = input.Name
+	supplier.Address = input.Address
+	supplier.Email = input.Email
+	supplier.Phone = input.Phone
+
+	updatedSupplier, err := s.repository.Update(ID, supplier)
+	if err != nil {
+		return updatedSupplier, err
+	}
+	return updatedSupplier, nil
+}
+
+func (s *supplierService) Delete(ID int) (models.Supplier, error) {
+	supplier, err := s.repository.FindByID(ID)
+	if err != nil {
+		return supplier, err
+	}
+	deletedSupplier, err := s.repository.Delete(ID)
+	if err != nil {
+		return deletedSupplier, err
+	}
+	return deletedSupplier, nil
+}
diff --git a/service/user.go b/service/user.go
new file mode 100644
index 0000000..39d85ff
--- /dev/null
+++ b/service/user.go
@@ -0,0 +1,124 @@
+package service
+
+import (
+	"api-kasirapp/helper"
+	"api-kasirapp/input"
+	"api-kasirapp/models"
+	repository2 "api-kasirapp/repository"
+	"errors"
+
+	"golang.org/x/crypto/bcrypt"
+)
+
+type UserService interface {
+	RegisterUser(input input.RegisterUserInput) (models.User, error)
+	Login(input input.LoginInput) (models.User, error)
+	IsEmailAvailable(input input.CheckEmailInput) (bool, error)
+	GetUserByID(ID int) (models.User, error)
+	GetAllUsers() ([]models.User, error)
+	isActiveUser(ID int) (models.User, error)
+}
+
+type userService struct {
+	repository repository2.UserRepository
+}
+
+func NewService(repository repository2.UserRepository) *userService {
+	return &userService{repository}
+}
+
+func (s *userService) RegisterUser(input input.RegisterUserInput) (models.User, error) {
+	user := models.User{}
+
+	user.Name = input.Name
+	user.Email = input.Email
+	passwordHash, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.MinCost)
+	if err != nil {
+		return user, err
+	}
+
+	user.PasswordHash = string(passwordHash)
+	user.Phone = input.Phone
+
+	if err := helper.ValidateEmail(user.Email); err != nil {
+		return models.User{}, err
+	}
+
+	if err := helper.ValidatePhoneNumber(user.Phone); err != nil {
+		return models.User{}, err
+	}
+
+	newUser, err := s.repository.Save(user)
+	if err != nil {
+		return newUser, err
+	}
+
+	return newUser, nil
+}
+
+func (s *userService) Login(input input.LoginInput) (models.User, error) {
+	email := input.Email
+	password := input.Password
+
+	user, err := s.repository.FindByEmail(email)
+	if err != nil {
+		return user, err
+	}
+
+	if user.ID == 0 {
+		return user, errors.New("no user found on that email")
+	}
+
+	err = bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(password))
+	if err != nil {
+		return user, err
+	}
+
+	return user, nil
+}
+
+func (s *userService) IsEmailAvailable(input input.CheckEmailInput) (bool, error) {
+	email := input.Email
+
+	user, err := s.repository.FindByEmail(email)
+	if err != nil {
+		return false, err
+	}
+
+	if user.ID == 0 {
+		return true, nil
+	}
+
+	return false, nil
+}
+
+func (s *userService) GetUserByID(ID int) (models.User, error) {
+	user, err := s.repository.FindByID(ID)
+	if err != nil {
+		return user, err
+	}
+
+	if user.ID == 0 {
+		return user, errors.New("no user found with that id")
+	}
+
+	return user, nil
+}
+
+func (s *userService) GetAllUsers() ([]models.User, error) {
+	users, err := s.repository.FindAll()
+	if err != nil {
+		return users, err
+	}
+
+	return users, nil
+}
+
+func (s *userService) isActiveUser(ID int) (models.User, error) {
+	user, err := s.repository.ActivateUser(ID)
+	if err != nil {
+		return user, err
+	}
+
+	return user, nil
+}
----------------------------------------------------


